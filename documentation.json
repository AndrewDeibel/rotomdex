{
    "pipes": [],
    "interfaces": [
        {
            "name": "GetScanCardParams",
            "id": "interface-GetScanCardParams-9f8a54b24e46a0e459cd49e927375b49804718c4ca99df2502bddf65498c0295f3e7324e91ce7c1d352751aaf72ad3c65a66299a245dd67e23466cc3e7fa2af0",
            "file": "src/app/pages/scanner/scanner.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { APIResponse, buildUrl } from '@app/models';\r\nimport { ScannerList, Card } from '@app/pages';\r\nimport { NotificationsService, Notification, AlertType } from '@app/controls';\r\n\r\nexport enum ScanType {\r\n  scan = 'scan',\r\n  multiple = 'scan_multiple',\r\n  snapshot = 'snapshot',\r\n}\r\n\r\nexport interface GetScanCardParams {\r\n  image: string;\r\n}\r\n\r\nexport interface GetScanCardsParams {\r\n  image: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ScannerService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private notificationService: NotificationsService\r\n  ) {}\r\n\r\n  // TempId\r\n  private tempId = 0;\r\n  getTempId() {\r\n    return this.tempId++;\r\n  }\r\n\r\n  // Scan single card\r\n  private scanCardSubject = new BehaviorSubject<Card | null>(null);\r\n  getScanCardObservable() {\r\n    this.scanCardSubject = new BehaviorSubject<Card | null>(null);\r\n    return this.scanCardSubject.asObservable();\r\n  }\r\n  getScanCard(params: GetScanCardParams) {\r\n    this.http\r\n      .post<APIResponse>(buildUrl('scanner/detect'), params)\r\n      .subscribe((res) => {\r\n        if (res.success) {\r\n          const card = new Card(res.data.card);\r\n          if (card.id > 0) {\r\n            this.scanCardSubject.next(card);\r\n          }\r\n        } else {\r\n          this.scanCardSubject.next(null);\r\n        }\r\n      });\r\n  }\r\n\r\n  // Scan mutiple cards\r\n  private scanCardsSubject = new BehaviorSubject<Card[]>([]);\r\n  getScanCardsObservable() {\r\n    this.scanCardsSubject = new BehaviorSubject<Card[]>([]);\r\n    return this.scanCardsSubject.asObservable();\r\n  }\r\n  getScanCards(params: GetScanCardsParams) {\r\n    this.http\r\n      .post<APIResponse>(buildUrl('scanner/multiple'), params)\r\n      .subscribe((res) => {\r\n        if (res.success && res.data.length > 0) {\r\n          this.scanCardsSubject.next(\r\n            res.data\r\n              .map((card: any) => new Card(card))\r\n              .filter((card: Card) => card.id > 0)\r\n          );\r\n        } else {\r\n          this.scanCardsSubject.next([]);\r\n        }\r\n      });\r\n  }\r\n\r\n  // Scan cache\r\n  private _scannerList: ScannerList = new ScannerList();\r\n  get scannerList() {\r\n    return this._scannerList;\r\n  }\r\n  set scannerList(scannerList) {\r\n    this._scannerList = scannerList;\r\n  }\r\n\r\n  // Clear cache\r\n  clearScans() {\r\n    this._scannerList = new ScannerList();\r\n  }\r\n\r\n  // Scan cache\r\n  private scansSubject = new BehaviorSubject<Card[]>([]);\r\n  getScansObservable() {\r\n    this.scansSubject = new BehaviorSubject<Card[]>([]);\r\n    return this.scansSubject.asObservable();\r\n  }\r\n  getScans() {\r\n    this.scansSubject.next(this._scannerList.cards);\r\n  }\r\n\r\n  changeVersion(cardOld: Card, cardNew: Card) {\r\n    // Remove old card via tempId\r\n    // this._scannerList.cards = this._scannerList.cards.filter(card => {\r\n    // \treturn card.tempId != cardOld.tempId;\r\n    // });\r\n    const updatedScannerListCards: Card[] = [];\r\n    this._scannerList.cards.forEach((card) => {\r\n      if (card.tempId === cardOld.tempId) {\r\n        updatedScannerListCards.push(cardNew);\r\n      } else {\r\n        updatedScannerListCards.push(card);\r\n      }\r\n    });\r\n\r\n    this._scannerList.cards = updatedScannerListCards;\r\n\r\n    // Add new card\r\n    //cardNew.tempId = cardOld.tempId++;\r\n    //this._scannerList.cards.push(cardNew);\r\n\r\n    // Update subscriptions\r\n    this.scansSubject.next(this._scannerList.cards);\r\n  }\r\n\r\n  removeCard(card: Card) {\r\n    this._scannerList.cards = this._scannerList.cards.filter((_card) => {\r\n      return _card.tempId != card.tempId;\r\n    });\r\n\r\n    // Update subscriptions\r\n    this.scansSubject.next(this._scannerList.cards);\r\n\r\n    this.notificationService.addNotifications([\r\n      new Notification({\r\n        alertType: AlertType.success,\r\n        message: 'Removed ' + card.name + ' from results',\r\n      }),\r\n    ]);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GetScanCardsParams",
            "id": "interface-GetScanCardsParams-9f8a54b24e46a0e459cd49e927375b49804718c4ca99df2502bddf65498c0295f3e7324e91ce7c1d352751aaf72ad3c65a66299a245dd67e23466cc3e7fa2af0",
            "file": "src/app/pages/scanner/scanner.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { APIResponse, buildUrl } from '@app/models';\r\nimport { ScannerList, Card } from '@app/pages';\r\nimport { NotificationsService, Notification, AlertType } from '@app/controls';\r\n\r\nexport enum ScanType {\r\n  scan = 'scan',\r\n  multiple = 'scan_multiple',\r\n  snapshot = 'snapshot',\r\n}\r\n\r\nexport interface GetScanCardParams {\r\n  image: string;\r\n}\r\n\r\nexport interface GetScanCardsParams {\r\n  image: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ScannerService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private notificationService: NotificationsService\r\n  ) {}\r\n\r\n  // TempId\r\n  private tempId = 0;\r\n  getTempId() {\r\n    return this.tempId++;\r\n  }\r\n\r\n  // Scan single card\r\n  private scanCardSubject = new BehaviorSubject<Card | null>(null);\r\n  getScanCardObservable() {\r\n    this.scanCardSubject = new BehaviorSubject<Card | null>(null);\r\n    return this.scanCardSubject.asObservable();\r\n  }\r\n  getScanCard(params: GetScanCardParams) {\r\n    this.http\r\n      .post<APIResponse>(buildUrl('scanner/detect'), params)\r\n      .subscribe((res) => {\r\n        if (res.success) {\r\n          const card = new Card(res.data.card);\r\n          if (card.id > 0) {\r\n            this.scanCardSubject.next(card);\r\n          }\r\n        } else {\r\n          this.scanCardSubject.next(null);\r\n        }\r\n      });\r\n  }\r\n\r\n  // Scan mutiple cards\r\n  private scanCardsSubject = new BehaviorSubject<Card[]>([]);\r\n  getScanCardsObservable() {\r\n    this.scanCardsSubject = new BehaviorSubject<Card[]>([]);\r\n    return this.scanCardsSubject.asObservable();\r\n  }\r\n  getScanCards(params: GetScanCardsParams) {\r\n    this.http\r\n      .post<APIResponse>(buildUrl('scanner/multiple'), params)\r\n      .subscribe((res) => {\r\n        if (res.success && res.data.length > 0) {\r\n          this.scanCardsSubject.next(\r\n            res.data\r\n              .map((card: any) => new Card(card))\r\n              .filter((card: Card) => card.id > 0)\r\n          );\r\n        } else {\r\n          this.scanCardsSubject.next([]);\r\n        }\r\n      });\r\n  }\r\n\r\n  // Scan cache\r\n  private _scannerList: ScannerList = new ScannerList();\r\n  get scannerList() {\r\n    return this._scannerList;\r\n  }\r\n  set scannerList(scannerList) {\r\n    this._scannerList = scannerList;\r\n  }\r\n\r\n  // Clear cache\r\n  clearScans() {\r\n    this._scannerList = new ScannerList();\r\n  }\r\n\r\n  // Scan cache\r\n  private scansSubject = new BehaviorSubject<Card[]>([]);\r\n  getScansObservable() {\r\n    this.scansSubject = new BehaviorSubject<Card[]>([]);\r\n    return this.scansSubject.asObservable();\r\n  }\r\n  getScans() {\r\n    this.scansSubject.next(this._scannerList.cards);\r\n  }\r\n\r\n  changeVersion(cardOld: Card, cardNew: Card) {\r\n    // Remove old card via tempId\r\n    // this._scannerList.cards = this._scannerList.cards.filter(card => {\r\n    // \treturn card.tempId != cardOld.tempId;\r\n    // });\r\n    const updatedScannerListCards: Card[] = [];\r\n    this._scannerList.cards.forEach((card) => {\r\n      if (card.tempId === cardOld.tempId) {\r\n        updatedScannerListCards.push(cardNew);\r\n      } else {\r\n        updatedScannerListCards.push(card);\r\n      }\r\n    });\r\n\r\n    this._scannerList.cards = updatedScannerListCards;\r\n\r\n    // Add new card\r\n    //cardNew.tempId = cardOld.tempId++;\r\n    //this._scannerList.cards.push(cardNew);\r\n\r\n    // Update subscriptions\r\n    this.scansSubject.next(this._scannerList.cards);\r\n  }\r\n\r\n  removeCard(card: Card) {\r\n    this._scannerList.cards = this._scannerList.cards.filter((_card) => {\r\n      return _card.tempId != card.tempId;\r\n    });\r\n\r\n    // Update subscriptions\r\n    this.scansSubject.next(this._scannerList.cards);\r\n\r\n    this.notificationService.addNotifications([\r\n      new Notification({\r\n        alertType: AlertType.success,\r\n        message: 'Removed ' + card.name + ' from results',\r\n      }),\r\n    ]);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ReleaseNote",
            "id": "interface-ReleaseNote-75f3501d13db17f0f0530f37cc173b649c741a295b1f6bbba58adef03d5f11dd0d946a478f9ee0a7e326d4a99f6987a9341b884076d0a3ed9477523dc487363f",
            "file": "src/app/pages/home/release-notes.services.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nexport interface ReleaseNote {\r\n\ttitle: string;\r\n\tversion: string;\r\n\tcontent: string;\r\n\tdate: Date;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ReleaseNotesServices {\r\n\tprivate _releaseNotes: ReleaseNote[] = [\r\n\t\t{\r\n\t\t\ttitle: 'Welcome to RotomDex',\r\n\t\t\tcontent: `Our first release is focused on delivering TCG information including expansion, card, and Pokemon data.\r\n\t\t\t\tWe are ironing out initial project startup issue and refining the user interface for desktop and mobile.\r\n\t\t\t\tWe plan to develop addition features including a card scanner and collection management in the future.\r\n\t\t\t\tIf you run into any bugs or have suggestions for improvement we would love to hear from you via our contact from.`,\r\n\t\t\tversion: '0.9.6',\r\n\t\t\tdate: new Date('4/7/2021'),\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Our long-term goal',\r\n\t\t\tcontent: `We started building RotomDex after hearing from many friends and people within the Pokemon TCG community.\r\n\t\t\t\tWe all want a better way to manage our ever growing collection of amazing cards!\r\n\t\t\t\tThere are a few existing TCG collection management solutions, but nothing that stands out or has features for Pokemon fans.\r\n\t\t\t\tRotomDex is our solution to this desire, a mobile app and website that makes it easy to catalog every Pokemon card in your collection.`,\r\n\t\t\tversion: '0.9.7',\r\n\t\t\tdate: new Date('5/11/2021'),\r\n\t\t},\r\n\t];\r\n\r\n\t_releaseNotesSorted = this._releaseNotes.sort(\r\n\t\t(a, b) => <any>b.date - <any>a.date\r\n\t);\r\n\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\t// Get release notes\r\n\tprivate allReleaseNotesSubject = new BehaviorSubject<ReleaseNote[]>([]);\r\n\tgetReleaseNotesObservable() {\r\n\t\tthis.allReleaseNotesSubject = new BehaviorSubject<ReleaseNote[]>([]);\r\n\t\treturn this.allReleaseNotesSubject.asObservable();\r\n\t}\r\n\tgetReleaseNotes() {\r\n\t\tthis.allReleaseNotesSubject.next(this._releaseNotesSorted);\r\n\t}\r\n}\r\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ResCards",
            "id": "interface-ResCards-2d8a1ef1a8dcc4be0a7dd2ec1031798fd5fcb05127473c0611376c1901d129b90bd5f38ace70192f2ad06a6122228a672c2ecb7971a9477d133426e2aecaa65c",
            "file": "src/app/pages/cards/cards.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { LoaderService } from './../../controls/loader/loader.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { APIGetPaged, APIResponse } from '@app/models';\r\nimport { Card } from '@app/pages';\r\n\r\nexport interface ResCards {\r\n  total_value?: number;\r\n  total_results: number;\r\n  total_pages: number;\r\n  cards?: Card[];\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CardsService {\r\n  constructor(private http: HttpClient, private loaderService: LoaderService) {}\r\n\r\n  // Get cards\r\n  private getCardsSubject = new BehaviorSubject<ResCards | null>(null);\r\n  getCardsObservable() {\r\n    this.getCardsSubject = new BehaviorSubject<ResCards | null>(null);\r\n    return this.getCardsSubject.asObservable();\r\n  }\r\n  getCards(params: APIGetPaged) {\r\n    this.loaderService.addItemLoading('getCards');\r\n    this.http.get<APIResponse>(params.buildUrl('cards')).subscribe((res) => {\r\n      this.getCardsSubject.next({\r\n        cards: res.data.map((card: any) => new Card(card)),\r\n        total_pages: res.meta.last_page,\r\n        total_results: res.meta.total,\r\n      });\r\n      this.loaderService.clearItemLoading('getCards');\r\n    });\r\n  }\r\n\r\n  // Get cards filtered\r\n  private getCardsFilteredSubject = new BehaviorSubject<ResCards | null>(null);\r\n  getCardsFilteredObservable() {\r\n    this.getCardsFilteredSubject = new BehaviorSubject<ResCards | null>(null);\r\n    return this.getCardsFilteredSubject.asObservable();\r\n  }\r\n  getCardsFiltered(params: APIGetPaged) {\r\n    this.loaderService.addItemLoading('getFilteredCards');\r\n    this.http\r\n      .get<APIResponse>(params.buildUrl('cards/filter'))\r\n      .subscribe((res) => {\r\n        this.getCardsFilteredSubject.next({\r\n          cards: res.data.map((card: any) => new Card(card)),\r\n          total_pages: res.meta.last_page,\r\n          total_results: res.meta.total,\r\n        });\r\n        this.loaderService.clearItemLoading('getFilteredCards');\r\n      });\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "cards",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card[]",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "total_pages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "total_results",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "total_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ResPokemonVariants",
            "id": "interface-ResPokemonVariants-78dd022dc4e231fa65527bdf73a8b31dfc396117e7549fdbfcd177c0a00ac7f555ecb5bf8e80aeb016869841730d6af7fa873c9b82594a1c52b5d534686b4d53",
            "file": "src/app/pages/pokemons/pokemons.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { LoaderService } from './../../controls/loader/loader.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { APIGetPaged, APIResponse } from '@app/models';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { PokemonVariant } from './pokemon/pokemon';\r\n\r\nexport interface ResPokemonVariants {\r\n  total_results: number;\r\n  total_pages: number;\r\n  pokemon_variants?: PokemonVariant[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PokemonsService {\r\n  constructor(private http: HttpClient, private loaderService: LoaderService) {}\r\n\r\n  // Get all pokemon variants\r\n  private getPokemonVariantsSubject =\r\n    new BehaviorSubject<ResPokemonVariants | null>(null);\r\n  getPokemonVariantsObservable() {\r\n    this.getPokemonVariantsSubject =\r\n      new BehaviorSubject<ResPokemonVariants | null>(null);\r\n    return this.getPokemonVariantsSubject.asObservable();\r\n  }\r\n  getPokemonVariants(params: APIGetPaged) {\r\n    this.loaderService.addItemLoading('getPokemon');\r\n    this.http\r\n      .get<APIResponse>(params.buildUrl('pokemon-variants'))\r\n      .subscribe((res) => {\r\n        this.getPokemonVariantsSubject.next({\r\n          total_pages: res.meta.last_page,\r\n          total_results: res.meta.total,\r\n          pokemon_variants: res.data.map(\r\n            (pokemonVariant: any) => new PokemonVariant(pokemonVariant)\r\n          ),\r\n        });\r\n        this.loaderService.clearItemLoading('getPokemon');\r\n      });\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "pokemon_variants",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PokemonVariant[]",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "total_pages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "total_results",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ResUserCardGroups",
            "id": "interface-ResUserCardGroups-9031d650fdc719042f2492aed62e3ee16d588095075dc03cb03229020e016ec90acebdda931b02e3c65e44dbf84a3c6d005254e5594fcef9bce55deac64ea312",
            "file": "src/app/pages/collection/user-card-group/user-card-group.services.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport {\r\n  LoaderService,\r\n  Notification,\r\n  NotificationsService,\r\n} from '@app/controls';\r\nimport { APIGetPaged, APIResponse, buildUrl } from '@app/models';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { UserCardGroup } from '@app/pages/collection';\r\n\r\nexport interface ResUserCardGroups {\r\n  total_results: number;\r\n  total_pages: number;\r\n  user_card_groups: UserCardGroup[];\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserCardGroupService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private notificationService: NotificationsService,\r\n    private loaderService: LoaderService\r\n  ) {}\r\n\r\n  // Get user card groups\r\n  private getUserCardGroupsSubject =\r\n    new BehaviorSubject<ResUserCardGroups | null>(null);\r\n  getUserCardGroupsObservable() {\r\n    this.getUserCardGroupsSubject =\r\n      new BehaviorSubject<ResUserCardGroups | null>(null);\r\n    return this.getUserCardGroupsSubject.asObservable();\r\n  }\r\n  getUserCardGroups(params: APIGetPaged) {\r\n    this.http\r\n      .get<APIResponse>(params.buildUrl('card-groups'))\r\n      .subscribe((res) => {\r\n        this.getUserCardGroupsSubject.next({\r\n          user_card_groups: res.data.map(\r\n            (userCardGroup: any) => new UserCardGroup(userCardGroup)\r\n          ),\r\n          total_pages: res.meta.last_page,\r\n          total_results: res.meta.total,\r\n        });\r\n      });\r\n  }\r\n\r\n  // Add user card groups\r\n  private addUserCardGroupSubject = new BehaviorSubject<UserCardGroup | null>(\r\n    null\r\n  );\r\n  addUserCardGroupObservable() {\r\n    this.addUserCardGroupSubject = new BehaviorSubject<UserCardGroup | null>(\r\n      null\r\n    );\r\n    return this.addUserCardGroupSubject.asObservable();\r\n  }\r\n  addUserCardGroup(userCardGroup: UserCardGroup) {\r\n    this.loaderService.addItemLoading('user-card-group');\r\n    this.http\r\n      .post<APIResponse>(buildUrl('card-groups/create'), userCardGroup)\r\n      .subscribe((res) => {\r\n        if (res.success) {\r\n          this.addUserCardGroupSubject.next(userCardGroup);\r\n          this.notificationService.addNotifications([\r\n            new Notification({\r\n              message: `Added ${userCardGroup.name}`,\r\n            }),\r\n          ]);\r\n          this.loaderService.clearItemLoading('user-card-group');\r\n        }\r\n      });\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "total_pages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "total_results",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "user_card_groups",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserCardGroup[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "String",
            "id": "interface-String-4090277bd435ca1b08bed6591f8f240b019e6f0608361d76d0f7ca6e79cc797dda93eb31f27c2b978a220d22c9e1b19fada698ce0cf455bdebc1e6d70775a005",
            "file": "src/app/helpers/string.extensions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "interface String {\r\n    trimEnds(): string;\r\n    parseNewLine(): string;\r\n}\r\n\r\n// Parse new line\r\nString.prototype.parseNewLine = function(): string {\r\n    return this.replace(/(?:\\r\\n|\\r|\\n)/g, '<br>');\r\n}\r\n\r\n// Trim first and last character (\"\")\r\nString.prototype.trimEnds = function(): string {\r\n    return this.substr(1).slice(0, -1);\r\n}",
            "properties": [],
            "indexSignatures": [],
            "kind": 167,
            "methods": [
                {
                    "name": "parseNewLine",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "trimEnds",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ]
        }
    ],
    "injectables": [
        {
            "name": "AuthenticationService",
            "id": "injectable-AuthenticationService-2cbe570fb97504a043ff4deb1c75040499fa03edc31a0a214f09f1aac3db70290daa9a99035d7eecd04dd8ab7bcad9ad3b3c840dd12cf5e9ff7bf1826d782078",
            "file": "src/app/pages/auth/auth.service.ts",
            "properties": [
                {
                    "name": "currentUserSubject",
                    "defaultValue": "new BehaviorSubject<User | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "currentUserObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "forgot",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password_confirmation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password_confirmation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password_confirmation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password_confirmation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { AlertType } from './../../controls/alert/alert';\r\nimport { buildUrl } from '@app/models';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { User } from '@app/pages/user/user';\r\nimport {\r\n  LoaderService,\r\n  Notification,\r\n  NotificationsService,\r\n} from '@app/controls';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthenticationService {\r\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\r\n  currentUserObservable() {\r\n    return this.currentUserSubject.asObservable();\r\n  }\r\n  constructor(\r\n    private http: HttpClient,\r\n    private notificationService: NotificationsService,\r\n    private loaderService: LoaderService\r\n  ) {\r\n    const currentUser = localStorage.getItem('currentUser');\r\n    if (currentUser) {\r\n      this.currentUserSubject = new BehaviorSubject<User | null>(\r\n        new User(JSON.parse(currentUser))\r\n      );\r\n    }\r\n  }\r\n\r\n  public get currentUserValue(): User | null {\r\n    return this.currentUserSubject?.value;\r\n  }\r\n\r\n  login(email: string, password: string) {\r\n    this.loaderService.addItemLoading('login');\r\n    return this.http\r\n      .post<any>(buildUrl('login'), { email, password })\r\n      .subscribe((res) => {\r\n        // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n        const user: User = new User({\r\n          ...res.data.user,\r\n          token: res.data.token,\r\n          expires_at: res.data.expires_at,\r\n        });\r\n        localStorage.setItem('currentUser', JSON.stringify(user));\r\n        this.currentUserSubject.next(user);\r\n        // success notification\r\n        this.notificationService.addNotifications([\r\n          new Notification({\r\n            alertType: AlertType.success,\r\n            message: 'Successfully signed in',\r\n          }),\r\n        ]);\r\n        this.loaderService.clearItemLoading('login');\r\n      });\r\n  }\r\n\r\n  logout() {\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem('currentUser');\r\n    if (this.currentUserSubject) {\r\n      this.currentUserSubject?.next(null);\r\n      location.reload();\r\n    }\r\n  }\r\n\r\n  register(\r\n    email: string,\r\n    username: string,\r\n    password: string,\r\n    password_confirmation: string\r\n  ) {\r\n    this.loaderService.addItemLoading('register');\r\n    return this.http\r\n      .post<any>(buildUrl('register'), {\r\n        email,\r\n        username,\r\n        password,\r\n        password_confirmation,\r\n      })\r\n      .pipe(\r\n        map((res) => {\r\n          const user: User = new User({\r\n            ...res.data.user,\r\n            token: res.data.token,\r\n          });\r\n          localStorage.setItem('currentUser', JSON.stringify(user));\r\n          this.currentUserSubject.next(user);\r\n          this.loaderService.clearItemLoading('register');\r\n        })\r\n      );\r\n  }\r\n\r\n  forgot(email: string) {\r\n    return this.http.post<any>(buildUrl('forgot-password'), {\r\n      email,\r\n    });\r\n  }\r\n\r\n  reset(\r\n    token: string,\r\n    email: string,\r\n    password: string,\r\n    password_confirmation: string\r\n  ) {\r\n    return this.http.post<any>(buildUrl('password-reset'), {\r\n      token,\r\n      email,\r\n      password,\r\n      password_confirmation,\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "currentUserValue": {
                    "name": "currentUserValue",
                    "getSignature": {
                        "name": "currentUserValue",
                        "type": "",
                        "returnType": "User | null",
                        "line": 33
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "CardService",
            "id": "injectable-CardService-5b548fc89034d31887a5f5ccc8a5f35cb29420330ed24e3359d6fdb3219f9a49b61b37a632aa760c5921e5e82fcec28040de78df7730ad9c84d17bfb7091bb0f",
            "file": "src/app/pages/cards/card/card.service.ts",
            "properties": [
                {
                    "name": "getCardSubject",
                    "defaultValue": "new BehaviorSubject<Card | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getCard",
                    "args": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCardObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { LoaderService } from '@app/controls';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { APIResponse, buildUrl } from '@app/models';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { Card } from '@app/pages';\r\nimport { Cache } from '@app/helpers';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CardService {\r\n  constructor(private http: HttpClient, private loaderService: LoaderService) {}\r\n\r\n  // Get card\r\n  private getCardSubject = new BehaviorSubject<Card | null>(null);\r\n  getCardObservable() {\r\n    this.getCardSubject = new BehaviorSubject<Card | null>(null);\r\n    return this.getCardSubject.asObservable();\r\n  }\r\n  getCard(code: string) {\r\n    // Try cache\r\n    if (Cache.card[code]) {\r\n      this.getCardSubject.next(Cache.card[code]);\r\n    } else {\r\n      // Show loader\r\n      this.loaderService.addItemLoading('getCard');\r\n      // Request\r\n      this.http.get<APIResponse>(buildUrl('card/' + code)).subscribe((res) => {\r\n        const card = new Card(res.data);\r\n        // Add to cache\r\n        Cache.card[code] = card;\r\n        this.getCardSubject.next(card);\r\n        // Hide loader\r\n        this.loaderService.clearItemLoading('getCard');\r\n      });\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CardsService",
            "id": "injectable-CardsService-2d8a1ef1a8dcc4be0a7dd2ec1031798fd5fcb05127473c0611376c1901d129b90bd5f38ace70192f2ad06a6122228a672c2ecb7971a9477d133426e2aecaa65c",
            "file": "src/app/pages/cards/cards.service.ts",
            "properties": [
                {
                    "name": "getCardsFilteredSubject",
                    "defaultValue": "new BehaviorSubject<ResCards | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getCardsSubject",
                    "defaultValue": "new BehaviorSubject<ResCards | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getCards",
                    "args": [
                        {
                            "name": "params",
                            "type": "APIGetPaged",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "APIGetPaged",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCardsFiltered",
                    "args": [
                        {
                            "name": "params",
                            "type": "APIGetPaged",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "APIGetPaged",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCardsFilteredObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCardsObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { LoaderService } from './../../controls/loader/loader.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { APIGetPaged, APIResponse } from '@app/models';\r\nimport { Card } from '@app/pages';\r\n\r\nexport interface ResCards {\r\n  total_value?: number;\r\n  total_results: number;\r\n  total_pages: number;\r\n  cards?: Card[];\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CardsService {\r\n  constructor(private http: HttpClient, private loaderService: LoaderService) {}\r\n\r\n  // Get cards\r\n  private getCardsSubject = new BehaviorSubject<ResCards | null>(null);\r\n  getCardsObservable() {\r\n    this.getCardsSubject = new BehaviorSubject<ResCards | null>(null);\r\n    return this.getCardsSubject.asObservable();\r\n  }\r\n  getCards(params: APIGetPaged) {\r\n    this.loaderService.addItemLoading('getCards');\r\n    this.http.get<APIResponse>(params.buildUrl('cards')).subscribe((res) => {\r\n      this.getCardsSubject.next({\r\n        cards: res.data.map((card: any) => new Card(card)),\r\n        total_pages: res.meta.last_page,\r\n        total_results: res.meta.total,\r\n      });\r\n      this.loaderService.clearItemLoading('getCards');\r\n    });\r\n  }\r\n\r\n  // Get cards filtered\r\n  private getCardsFilteredSubject = new BehaviorSubject<ResCards | null>(null);\r\n  getCardsFilteredObservable() {\r\n    this.getCardsFilteredSubject = new BehaviorSubject<ResCards | null>(null);\r\n    return this.getCardsFilteredSubject.asObservable();\r\n  }\r\n  getCardsFiltered(params: APIGetPaged) {\r\n    this.loaderService.addItemLoading('getFilteredCards');\r\n    this.http\r\n      .get<APIResponse>(params.buildUrl('cards/filter'))\r\n      .subscribe((res) => {\r\n        this.getCardsFilteredSubject.next({\r\n          cards: res.data.map((card: any) => new Card(card)),\r\n          total_pages: res.meta.last_page,\r\n          total_results: res.meta.total,\r\n        });\r\n        this.loaderService.clearItemLoading('getFilteredCards');\r\n      });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DialogService",
            "id": "injectable-DialogService-9db5695498e1352cf210cba1814f1a374abb2ed3172b32f6bde8fa082c9be43da1ff8d7e223b1263ce965806a36bd8bce8b78f362b6c1da120ba31d70da64e19",
            "file": "src/app/controls/dialog/dialog.service.ts",
            "properties": [
                {
                    "name": "dialogComponentRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<DialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methods": [
                {
                    "name": "appendDialogComponentToBody",
                    "args": [
                        {
                            "name": "config",
                            "type": "DialogConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DialogRef",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "DialogConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "componentType",
                            "type": "Type<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "DialogConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DialogRef",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "componentType",
                            "type": "Type<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "DialogConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeDialogComponentFromBody",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { DialogModule } from './dialog.module';\r\nimport {\r\n  ApplicationRef,\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  EmbeddedViewRef,\r\n  Injectable,\r\n  Injector,\r\n  Type,\r\n} from '@angular/core';\r\nimport { DialogComponent } from '.';\r\nimport { DialogRef, DialogConfig, DialogInjector } from './dialog';\r\n\r\n@Injectable({\r\n  providedIn: DialogModule,\r\n})\r\nexport class DialogService {\r\n  dialogComponentRef: ComponentRef<DialogComponent>;\r\n\r\n  constructor(\r\n    private componentFactoryResolver: ComponentFactoryResolver,\r\n    private appRef: ApplicationRef,\r\n    private injector: Injector\r\n  ) {}\r\n\r\n  public open(componentType: Type<any>, config: DialogConfig): DialogRef {\r\n    const dialogRef = this.appendDialogComponentToBody(config);\r\n    this.dialogComponentRef.instance.childComponentType = componentType;\r\n    return dialogRef;\r\n  }\r\n\r\n  private appendDialogComponentToBody(config: DialogConfig): DialogRef {\r\n    // Config\r\n    const map = new WeakMap();\r\n    map.set(DialogConfig, config);\r\n    const dialogRef = new DialogRef();\r\n    map.set(DialogRef, dialogRef);\r\n    // After close remove from body\r\n    const sub = dialogRef.afterClosed.subscribe(() => {\r\n      this.removeDialogComponentFromBody();\r\n      sub.unsubscribe();\r\n    });\r\n    // Child component\r\n    const componentFactory =\r\n      this.componentFactoryResolver.resolveComponentFactory(DialogComponent);\r\n    const componentRef = componentFactory.create(\r\n      new DialogInjector(this.injector, map)\r\n    );\r\n    // Inject into body\r\n    this.appRef.attachView(componentRef.hostView);\r\n    const domElem = (componentRef.hostView as EmbeddedViewRef<any>)\r\n      .rootNodes[0] as HTMLElement;\r\n    document.body.appendChild(domElem);\r\n    // Refs\r\n    this.dialogComponentRef = componentRef;\r\n    this.dialogComponentRef.instance.config = config;\r\n    this.dialogComponentRef.instance.onClose.subscribe(() => {\r\n      this.removeDialogComponentFromBody();\r\n    });\r\n    return dialogRef;\r\n  }\r\n\r\n  private removeDialogComponentFromBody(): void {\r\n    this.appRef.detachView(this.dialogComponentRef.hostView);\r\n    this.dialogComponentRef.destroy();\r\n  }\r\n\r\n  public closeAll(): void {\r\n    this.removeDialogComponentFromBody();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appRef",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appRef",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ExpansionService",
            "id": "injectable-ExpansionService-dbe8bf9e66fdc2dcfe8aa847a0ac796073ddf2dcc61030f1e0c67b8839c755e84ff614f2108c6a12391dd9d54e1a9c49fcd8fc723962151acb38a1007a8a85a5",
            "file": "src/app/pages/expansions/expansion/expansion.service.ts",
            "properties": [
                {
                    "name": "getExpansionCardsSubject",
                    "defaultValue": "new BehaviorSubject<ResCards | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getExpansionSubject",
                    "defaultValue": "new BehaviorSubject<Expansion | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getExpansion",
                    "args": [
                        {
                            "name": "params",
                            "type": "APIGetPaged",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "APIGetPaged",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getExpansionCards",
                    "args": [
                        {
                            "name": "params",
                            "type": "APIGetPaged",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "APIGetPaged",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getExpansionCardsObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getExpansionObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { APIGetPaged, APIResponse } from '@app/models';\r\nimport { Card, Expansion, ResCards } from '@app/pages';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { Cache } from '@app/helpers';\r\nimport { LoaderService } from '@app/controls';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ExpansionService {\r\n  constructor(private http: HttpClient, private loaderService: LoaderService) {}\r\n\r\n  // Get expansion\r\n  private getExpansionSubject = new BehaviorSubject<Expansion | null>(null);\r\n  getExpansionObservable() {\r\n    this.getExpansionSubject = new BehaviorSubject<Expansion | null>(null);\r\n    return this.getExpansionSubject.asObservable();\r\n  }\r\n  getExpansion(params: APIGetPaged) {\r\n    if (Cache.expansion[params.code]) {\r\n      this.getExpansionSubject.next(Cache.expansion[params.code]);\r\n    } else {\r\n      this.loaderService.addItemLoading('getExpansion');\r\n      this.http\r\n        .get<APIResponse>(params.buildUrl('expansion/' + params.code))\r\n        .subscribe((res) => {\r\n          this.getExpansionSubject.next(new Expansion(res.data));\r\n          this.loaderService.clearItemLoading('getExpansion');\r\n        });\r\n    }\r\n  }\r\n\r\n  // Get expansions cards\r\n  private getExpansionCardsSubject = new BehaviorSubject<ResCards | null>(null);\r\n  getExpansionCardsObservable() {\r\n    this.getExpansionCardsSubject = new BehaviorSubject<ResCards | null>(null);\r\n    return this.getExpansionCardsSubject.asObservable();\r\n  }\r\n  getExpansionCards(params: APIGetPaged) {\r\n    this.loaderService.addItemLoading('getExpansionCards');\r\n    this.http\r\n      .get<APIResponse>(params.buildUrl('expansion/' + params.code + '/cards'))\r\n      .subscribe((res) => {\r\n        this.getExpansionCardsSubject.next({\r\n          cards: res.data.map((card: any) => new Card(card)),\r\n          total_pages: res.meta.last_page,\r\n          total_results: res.meta.total,\r\n        });\r\n        this.loaderService.clearItemLoading('getExpansionCards');\r\n      });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ExpansionsService",
            "id": "injectable-ExpansionsService-db48a9baf444d228ec13422df63c8a28bf151bb4621313c1a50312a5242ca43fc8823c596c8e0353119761910cc8f02fc23113098a20a3e5e555cb459043010d",
            "file": "src/app/pages/expansions/expansions.service.ts",
            "properties": [
                {
                    "name": "getExpansionsSubject",
                    "defaultValue": "new BehaviorSubject<Series[] | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getExpansions",
                    "args": [
                        {
                            "name": "params",
                            "type": "APIGetPaged",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "APIGetPaged",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getExpansionsObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleExpansionsParams",
                    "args": [
                        {
                            "name": "params",
                            "type": "APIGetPaged",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "seriesCollection",
                            "type": "Series[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Series[]",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "APIGetPaged",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "seriesCollection",
                            "type": "Series[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { LoaderService } from '@app/controls';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { APIGetPaged, APIResponse, buildUrl } from '@app/models';\r\nimport { Expansion, Series } from '@app/pages';\r\nimport { Cache } from '@app/helpers';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ExpansionsService {\r\n  constructor(private http: HttpClient, private loaderService: LoaderService) {}\r\n\r\n  // Get expansions\r\n  private getExpansionsSubject = new BehaviorSubject<Series[] | null>(null);\r\n  getExpansionsObservable() {\r\n    this.getExpansionsSubject = new BehaviorSubject<Series[] | null>(null);\r\n    return this.getExpansionsSubject.asObservable();\r\n  }\r\n  getExpansions(params: APIGetPaged) {\r\n    if (Cache.expansions) {\r\n      this.getExpansionsSubject.next(\r\n        this.handleExpansionsParams(params, Cache.expansions)\r\n      );\r\n    } else {\r\n      this.loaderService.addItemLoading('getExpansions');\r\n      this.http.get<APIResponse>(buildUrl('expansions')).subscribe((res) => {\r\n        const series = res.data.map((series: any) => new Series(series));\r\n        Cache.expansions = series;\r\n        this.getExpansionsSubject.next(\r\n          this.handleExpansionsParams(params, series)\r\n        );\r\n        this.loaderService.clearItemLoading('getExpansions');\r\n      });\r\n    }\r\n  }\r\n  handleExpansionsParams(\r\n    params: APIGetPaged,\r\n    seriesCollection: Series[]\r\n  ): Series[] {\r\n    // No data\r\n    if (!seriesCollection.length) {\r\n      return [];\r\n    } else {\r\n      let _seriesCollection: Series[] = [];\r\n\r\n      // Query\r\n      if (params.query && params.query.length) {\r\n        // Filter expansions\r\n        seriesCollection.forEach((series) => {\r\n          const expansions = series.expansions.filter((expansion: any) => {\r\n            return expansion.name\r\n              .toLowerCase()\r\n              .includes(params.query.toLowerCase());\r\n          });\r\n          if (expansions.length) {\r\n            const _series = Object.assign({}, series);\r\n            _series.expansions = expansions;\r\n            _seriesCollection.push(_series);\r\n          }\r\n        });\r\n      } else {\r\n        _seriesCollection = seriesCollection;\r\n      }\r\n\r\n      // Sort\r\n      function sortSeriesAsc(a: Series, b: Series) {\r\n        if (a.id < b.id) {\r\n          return -1;\r\n        }\r\n        if (a.id > b.id) {\r\n          return 1;\r\n        }\r\n        return 0;\r\n      }\r\n      function sortSeriesDesc(a: Series, b: Series) {\r\n        if (a.id > b.id) {\r\n          return -1;\r\n        }\r\n        if (a.id < b.id) {\r\n          return 1;\r\n        }\r\n        return 0;\r\n      }\r\n      function sortExpansionAsc(a: Expansion, b: Expansion) {\r\n        if (new Date(a.release_date) < new Date(b.release_date)) {\r\n          return -1;\r\n        }\r\n        if (new Date(a.release_date) > new Date(b.release_date)) {\r\n          return 1;\r\n        }\r\n        return 0;\r\n      }\r\n      function sortExpansionDesc(a: Expansion, b: Expansion) {\r\n        if (new Date(a.release_date) > new Date(b.release_date)) {\r\n          return -1;\r\n        }\r\n        if (new Date(a.release_date) < new Date(b.release_date)) {\r\n          return 1;\r\n        }\r\n        return 0;\r\n      }\r\n      switch (params.sort_direction) {\r\n        case 'asc':\r\n          _seriesCollection.sort(sortSeriesAsc);\r\n          _seriesCollection.forEach((_series) => {\r\n            _series.expansions.sort(sortExpansionAsc);\r\n          });\r\n          break;\r\n        case 'desc':\r\n          _seriesCollection.sort(sortSeriesDesc);\r\n          _seriesCollection.forEach((_series) => {\r\n            _series.expansions.sort(sortExpansionDesc);\r\n          });\r\n          break;\r\n      }\r\n\r\n      return _seriesCollection;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FeaturedService",
            "id": "injectable-FeaturedService-b03d7cb07312e4a5dec038c7e5c3b84446f1211bc246063737b46ea613f370704f6d8d41958177f80c50bfa9efb4398e5861f42de73775a9f9b8e0120c5c790c",
            "file": "src/app/pages/home/featured.service.ts",
            "properties": [
                {
                    "name": "getFeaturedSubject",
                    "defaultValue": "new BehaviorSubject<Featured | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getFeatured",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFeaturedObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { LoaderService } from './../../controls/loader/loader.service';\r\nimport { APIResponse, buildUrl } from '@app/models';\r\nimport { Featured } from './featured';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FeaturedService {\r\n  constructor(private http: HttpClient, private loaderService: LoaderService) {}\r\n\r\n  // Get featured\r\n  private getFeaturedSubject = new BehaviorSubject<Featured | null>(null);\r\n  getFeaturedObservable() {\r\n    this.getFeaturedSubject = new BehaviorSubject<Featured | null>(null);\r\n    return this.getFeaturedSubject.asObservable();\r\n  }\r\n  getFeatured() {\r\n    this.loaderService.addItemLoading('featured');\r\n    this.http.get<APIResponse>(buildUrl('featured')).subscribe((res) => {\r\n      if (res) {\r\n        this.getFeaturedSubject.next(new Featured(res.data));\r\n        this.loaderService.clearItemLoading('featured');\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LoaderService",
            "id": "injectable-LoaderService-2a23f1edc2f3be82249660c04111b6091705382c7f25de80cc1746fedf41786484b0df3d435a9707cec35e4eee7004a74a79879d3a78cb9b8dfd37b4c176d425",
            "file": "src/app/controls/loader/loader.service.ts",
            "properties": [
                {
                    "name": "_itemsLoading",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "_hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "addItemLoading",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearItemLoading",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getItemsLoading",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "update",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LoaderService {\r\n  private _itemsLoading: string[] = [];\r\n  loading = new BehaviorSubject<boolean>(false);\r\n  constructor() {}\r\n\r\n  private _show() {\r\n    if (this.loading.value != true) this.loading.next(true);\r\n  }\r\n\r\n  private _hide() {\r\n    if (this.loading.value != false) this.loading.next(false);\r\n  }\r\n\r\n  update() {\r\n    if (this._itemsLoading.length) {\r\n      this._show();\r\n    } else {\r\n      this._hide();\r\n    }\r\n  }\r\n\r\n  addItemLoading(key: string) {\r\n    console.log(`Loading: ${key}`);\r\n    this._itemsLoading.push(key);\r\n    this.update();\r\n  }\r\n\r\n  getItemsLoading() {\r\n    return this._itemsLoading;\r\n  }\r\n\r\n  clearItemLoading(key: string) {\r\n    console.log(`Done Loading: ${key}`);\r\n    this._itemsLoading = this._itemsLoading.filter((item) => {\r\n      return item !== key;\r\n    });\r\n    this.update();\r\n  }\r\n\r\n  clear() {\r\n    this._itemsLoading = [];\r\n    this.update();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "NotificationsService",
            "id": "injectable-NotificationsService-c0ab837654b9ee70560069fffc4717976395cff5e8e65381b7189ff2e0009434a6e89149f64f091c5b9d2586fa6725d2ed06d739e851e742ca70230cc98ad5ca",
            "file": "src/app/controls/notifications/notifications.service.ts",
            "properties": [
                {
                    "name": "notificationsSubject",
                    "defaultValue": "new BehaviorSubject<Notification[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addNotifications",
                    "args": [
                        {
                            "name": "notifications",
                            "type": "Notification[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "notifications",
                            "type": "Notification[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "notificationsObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Notification } from './notification';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class NotificationsService {\r\n  constructor() {}\r\n\r\n  // Notifications\r\n  private notificationsSubject = new BehaviorSubject<Notification[]>([]);\r\n  notificationsObservable() {\r\n    this.notificationsSubject = new BehaviorSubject<Notification[]>([]);\r\n    return this.notificationsSubject.asObservable();\r\n  }\r\n  addNotifications(notifications: Notification[]) {\r\n    this.notificationsSubject.next([\r\n      // Current value\r\n      ...this.notificationsSubject.value,\r\n      // + new value\r\n      ...notifications,\r\n    ]);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "PokemonService",
            "id": "injectable-PokemonService-f1be405ee4e8f6bf831c7427b7c181bdc1881494c650793c335c5fe2e63c6768d7e3af57f35674c657fbbcddc2190e3ef67276f730099d809b55eb3ee3a3a6ba",
            "file": "src/app/pages/pokemons/pokemon/pokemon.service.ts",
            "properties": [
                {
                    "name": "getPokemonSubject",
                    "defaultValue": "new BehaviorSubject<Pokemon | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getPokemonVariantCardsSubject",
                    "defaultValue": "new BehaviorSubject<ResCards | null>(\r\n    null\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getPokemonVariantSubject",
                    "defaultValue": "new BehaviorSubject<PokemonVariant | null>(\r\n    null\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getPokemon",
                    "args": [
                        {
                            "name": "slug",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "slug",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPokemonObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPokemonVariant",
                    "args": [
                        {
                            "name": "slug",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "slug",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPokemonVariantCards",
                    "args": [
                        {
                            "name": "params",
                            "type": "APIGetPaged",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "APIGetPaged",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPokemonVariantCardsObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPokemonVariantObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { LoaderService } from '@app/controls';\r\nimport { Cache } from '@app/helpers';\r\nimport { APIGetPaged, APIResponse, buildUrl } from '@app/models';\r\nimport { Card, ResCards } from '@app/pages/cards';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { Pokemon, PokemonVariant } from './pokemon';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PokemonService {\r\n  constructor(private http: HttpClient, private loaderService: LoaderService) {}\r\n\r\n  // Get pokemon\r\n  private getPokemonSubject = new BehaviorSubject<Pokemon | null>(null);\r\n  getPokemonObservable() {\r\n    this.getPokemonSubject = new BehaviorSubject<Pokemon | null>(null);\r\n    return this.getPokemonSubject.asObservable();\r\n  }\r\n  getPokemon(slug: string) {\r\n    if (Cache.pokemon[slug]) {\r\n      this.getPokemonSubject.next(Cache.pokemon[slug]);\r\n    } else {\r\n      this.loaderService.addItemLoading('getPokemon');\r\n      this.http\r\n        .get<APIResponse>(buildUrl('pokemon/' + slug))\r\n        .subscribe((res) => {\r\n          this.getPokemonSubject.next(new Pokemon(res.data));\r\n          this.loaderService.clearItemLoading('getPokemon');\r\n        });\r\n    }\r\n  }\r\n\r\n  // Get pokemon variant\r\n  private getPokemonVariantSubject = new BehaviorSubject<PokemonVariant | null>(\r\n    null\r\n  );\r\n  getPokemonVariantObservable() {\r\n    this.getPokemonVariantSubject = new BehaviorSubject<PokemonVariant | null>(\r\n      null\r\n    );\r\n    return this.getPokemonVariantSubject.asObservable();\r\n  }\r\n  getPokemonVariant(slug: string) {\r\n    if (Cache.pokemonVariant[slug]) {\r\n      this.getPokemonVariantSubject.next(Cache.pokemonVariant[slug]);\r\n    } else {\r\n      this.loaderService.addItemLoading('getPokemonVariant');\r\n      this.http\r\n        .get<APIResponse>(buildUrl('pokemon-variants/' + slug))\r\n        .subscribe((res) => {\r\n          this.getPokemonVariantSubject.next(new PokemonVariant(res.data));\r\n          this.loaderService.clearItemLoading('getPokemonVariant');\r\n        });\r\n    }\r\n  }\r\n\r\n  // Get pokemon variant cards\r\n  private getPokemonVariantCardsSubject = new BehaviorSubject<ResCards | null>(\r\n    null\r\n  );\r\n  getPokemonVariantCardsObservable() {\r\n    this.getPokemonVariantCardsSubject = new BehaviorSubject<ResCards | null>(\r\n      null\r\n    );\r\n    return this.getPokemonVariantCardsSubject.asObservable();\r\n  }\r\n  getPokemonVariantCards(params: APIGetPaged) {\r\n    this.loaderService.addItemLoading('getPokemonCards');\r\n    this.http\r\n      .get<APIResponse>(\r\n        params.buildUrl(`pokemon-variants/${params.slug}/cards`)\r\n      )\r\n      .subscribe((res) => {\r\n        this.getPokemonVariantCardsSubject.next({\r\n          total_pages: res.meta.last_page,\r\n          total_results: res.meta.total,\r\n          cards: res.data.map((card: any) => new Card(card)),\r\n        });\r\n        this.loaderService.clearItemLoading('getPokemonCards');\r\n      });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PokemonsService",
            "id": "injectable-PokemonsService-78dd022dc4e231fa65527bdf73a8b31dfc396117e7549fdbfcd177c0a00ac7f555ecb5bf8e80aeb016869841730d6af7fa873c9b82594a1c52b5d534686b4d53",
            "file": "src/app/pages/pokemons/pokemons.service.ts",
            "properties": [
                {
                    "name": "getPokemonVariantsSubject",
                    "defaultValue": "new BehaviorSubject<ResPokemonVariants | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getPokemonVariants",
                    "args": [
                        {
                            "name": "params",
                            "type": "APIGetPaged",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "APIGetPaged",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPokemonVariantsObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { LoaderService } from './../../controls/loader/loader.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { APIGetPaged, APIResponse } from '@app/models';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { PokemonVariant } from './pokemon/pokemon';\r\n\r\nexport interface ResPokemonVariants {\r\n  total_results: number;\r\n  total_pages: number;\r\n  pokemon_variants?: PokemonVariant[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PokemonsService {\r\n  constructor(private http: HttpClient, private loaderService: LoaderService) {}\r\n\r\n  // Get all pokemon variants\r\n  private getPokemonVariantsSubject =\r\n    new BehaviorSubject<ResPokemonVariants | null>(null);\r\n  getPokemonVariantsObservable() {\r\n    this.getPokemonVariantsSubject =\r\n      new BehaviorSubject<ResPokemonVariants | null>(null);\r\n    return this.getPokemonVariantsSubject.asObservable();\r\n  }\r\n  getPokemonVariants(params: APIGetPaged) {\r\n    this.loaderService.addItemLoading('getPokemon');\r\n    this.http\r\n      .get<APIResponse>(params.buildUrl('pokemon-variants'))\r\n      .subscribe((res) => {\r\n        this.getPokemonVariantsSubject.next({\r\n          total_pages: res.meta.last_page,\r\n          total_results: res.meta.total,\r\n          pokemon_variants: res.data.map(\r\n            (pokemonVariant: any) => new PokemonVariant(pokemonVariant)\r\n          ),\r\n        });\r\n        this.loaderService.clearItemLoading('getPokemon');\r\n      });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ReleaseNotesServices",
            "id": "injectable-ReleaseNotesServices-75f3501d13db17f0f0530f37cc173b649c741a295b1f6bbba58adef03d5f11dd0d946a478f9ee0a7e326d4a99f6987a9341b884076d0a3ed9477523dc487363f",
            "file": "src/app/pages/home/release-notes.services.ts",
            "properties": [
                {
                    "name": "_releaseNotes",
                    "defaultValue": "[\r\n\t\t{\r\n\t\t\ttitle: 'Welcome to RotomDex',\r\n\t\t\tcontent: `Our first release is focused on delivering TCG information including expansion, card, and Pokemon data.\r\n\t\t\t\tWe are ironing out initial project startup issue and refining the user interface for desktop and mobile.\r\n\t\t\t\tWe plan to develop addition features including a card scanner and collection management in the future.\r\n\t\t\t\tIf you run into any bugs or have suggestions for improvement we would love to hear from you via our contact from.`,\r\n\t\t\tversion: '0.9.6',\r\n\t\t\tdate: new Date('4/7/2021'),\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Our long-term goal',\r\n\t\t\tcontent: `We started building RotomDex after hearing from many friends and people within the Pokemon TCG community.\r\n\t\t\t\tWe all want a better way to manage our ever growing collection of amazing cards!\r\n\t\t\t\tThere are a few existing TCG collection management solutions, but nothing that stands out or has features for Pokemon fans.\r\n\t\t\t\tRotomDex is our solution to this desire, a mobile app and website that makes it easy to catalog every Pokemon card in your collection.`,\r\n\t\t\tversion: '0.9.7',\r\n\t\t\tdate: new Date('5/11/2021'),\r\n\t\t},\r\n\t]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReleaseNote[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_releaseNotesSorted",
                    "defaultValue": "this._releaseNotes.sort(\r\n\t\t(a, b) => <any>b.date - <any>a.date\r\n\t)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "allReleaseNotesSubject",
                    "defaultValue": "new BehaviorSubject<ReleaseNote[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getReleaseNotes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getReleaseNotesObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nexport interface ReleaseNote {\r\n\ttitle: string;\r\n\tversion: string;\r\n\tcontent: string;\r\n\tdate: Date;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ReleaseNotesServices {\r\n\tprivate _releaseNotes: ReleaseNote[] = [\r\n\t\t{\r\n\t\t\ttitle: 'Welcome to RotomDex',\r\n\t\t\tcontent: `Our first release is focused on delivering TCG information including expansion, card, and Pokemon data.\r\n\t\t\t\tWe are ironing out initial project startup issue and refining the user interface for desktop and mobile.\r\n\t\t\t\tWe plan to develop addition features including a card scanner and collection management in the future.\r\n\t\t\t\tIf you run into any bugs or have suggestions for improvement we would love to hear from you via our contact from.`,\r\n\t\t\tversion: '0.9.6',\r\n\t\t\tdate: new Date('4/7/2021'),\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: 'Our long-term goal',\r\n\t\t\tcontent: `We started building RotomDex after hearing from many friends and people within the Pokemon TCG community.\r\n\t\t\t\tWe all want a better way to manage our ever growing collection of amazing cards!\r\n\t\t\t\tThere are a few existing TCG collection management solutions, but nothing that stands out or has features for Pokemon fans.\r\n\t\t\t\tRotomDex is our solution to this desire, a mobile app and website that makes it easy to catalog every Pokemon card in your collection.`,\r\n\t\t\tversion: '0.9.7',\r\n\t\t\tdate: new Date('5/11/2021'),\r\n\t\t},\r\n\t];\r\n\r\n\t_releaseNotesSorted = this._releaseNotes.sort(\r\n\t\t(a, b) => <any>b.date - <any>a.date\r\n\t);\r\n\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\t// Get release notes\r\n\tprivate allReleaseNotesSubject = new BehaviorSubject<ReleaseNote[]>([]);\r\n\tgetReleaseNotesObservable() {\r\n\t\tthis.allReleaseNotesSubject = new BehaviorSubject<ReleaseNote[]>([]);\r\n\t\treturn this.allReleaseNotesSubject.asObservable();\r\n\t}\r\n\tgetReleaseNotes() {\r\n\t\tthis.allReleaseNotesSubject.next(this._releaseNotesSorted);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ScannerService",
            "id": "injectable-ScannerService-9f8a54b24e46a0e459cd49e927375b49804718c4ca99df2502bddf65498c0295f3e7324e91ce7c1d352751aaf72ad3c65a66299a245dd67e23466cc3e7fa2af0",
            "file": "src/app/pages/scanner/scanner.service.ts",
            "properties": [
                {
                    "name": "_scannerList",
                    "defaultValue": "new ScannerList()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScannerList",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "scanCardsSubject",
                    "defaultValue": "new BehaviorSubject<Card[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "scanCardSubject",
                    "defaultValue": "new BehaviorSubject<Card | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "scansSubject",
                    "defaultValue": "new BehaviorSubject<Card[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tempId",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "changeVersion",
                    "args": [
                        {
                            "name": "cardOld",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cardNew",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cardOld",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cardNew",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearScans",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getScanCard",
                    "args": [
                        {
                            "name": "params",
                            "type": "GetScanCardParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "GetScanCardParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScanCardObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getScanCards",
                    "args": [
                        {
                            "name": "params",
                            "type": "GetScanCardsParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "GetScanCardsParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getScanCardsObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getScans",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getScansObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTempId",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeCard",
                    "args": [
                        {
                            "name": "card",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "card",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { APIResponse, buildUrl } from '@app/models';\r\nimport { ScannerList, Card } from '@app/pages';\r\nimport { NotificationsService, Notification, AlertType } from '@app/controls';\r\n\r\nexport enum ScanType {\r\n  scan = 'scan',\r\n  multiple = 'scan_multiple',\r\n  snapshot = 'snapshot',\r\n}\r\n\r\nexport interface GetScanCardParams {\r\n  image: string;\r\n}\r\n\r\nexport interface GetScanCardsParams {\r\n  image: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ScannerService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private notificationService: NotificationsService\r\n  ) {}\r\n\r\n  // TempId\r\n  private tempId = 0;\r\n  getTempId() {\r\n    return this.tempId++;\r\n  }\r\n\r\n  // Scan single card\r\n  private scanCardSubject = new BehaviorSubject<Card | null>(null);\r\n  getScanCardObservable() {\r\n    this.scanCardSubject = new BehaviorSubject<Card | null>(null);\r\n    return this.scanCardSubject.asObservable();\r\n  }\r\n  getScanCard(params: GetScanCardParams) {\r\n    this.http\r\n      .post<APIResponse>(buildUrl('scanner/detect'), params)\r\n      .subscribe((res) => {\r\n        if (res.success) {\r\n          const card = new Card(res.data.card);\r\n          if (card.id > 0) {\r\n            this.scanCardSubject.next(card);\r\n          }\r\n        } else {\r\n          this.scanCardSubject.next(null);\r\n        }\r\n      });\r\n  }\r\n\r\n  // Scan mutiple cards\r\n  private scanCardsSubject = new BehaviorSubject<Card[]>([]);\r\n  getScanCardsObservable() {\r\n    this.scanCardsSubject = new BehaviorSubject<Card[]>([]);\r\n    return this.scanCardsSubject.asObservable();\r\n  }\r\n  getScanCards(params: GetScanCardsParams) {\r\n    this.http\r\n      .post<APIResponse>(buildUrl('scanner/multiple'), params)\r\n      .subscribe((res) => {\r\n        if (res.success && res.data.length > 0) {\r\n          this.scanCardsSubject.next(\r\n            res.data\r\n              .map((card: any) => new Card(card))\r\n              .filter((card: Card) => card.id > 0)\r\n          );\r\n        } else {\r\n          this.scanCardsSubject.next([]);\r\n        }\r\n      });\r\n  }\r\n\r\n  // Scan cache\r\n  private _scannerList: ScannerList = new ScannerList();\r\n  get scannerList() {\r\n    return this._scannerList;\r\n  }\r\n  set scannerList(scannerList) {\r\n    this._scannerList = scannerList;\r\n  }\r\n\r\n  // Clear cache\r\n  clearScans() {\r\n    this._scannerList = new ScannerList();\r\n  }\r\n\r\n  // Scan cache\r\n  private scansSubject = new BehaviorSubject<Card[]>([]);\r\n  getScansObservable() {\r\n    this.scansSubject = new BehaviorSubject<Card[]>([]);\r\n    return this.scansSubject.asObservable();\r\n  }\r\n  getScans() {\r\n    this.scansSubject.next(this._scannerList.cards);\r\n  }\r\n\r\n  changeVersion(cardOld: Card, cardNew: Card) {\r\n    // Remove old card via tempId\r\n    // this._scannerList.cards = this._scannerList.cards.filter(card => {\r\n    // \treturn card.tempId != cardOld.tempId;\r\n    // });\r\n    const updatedScannerListCards: Card[] = [];\r\n    this._scannerList.cards.forEach((card) => {\r\n      if (card.tempId === cardOld.tempId) {\r\n        updatedScannerListCards.push(cardNew);\r\n      } else {\r\n        updatedScannerListCards.push(card);\r\n      }\r\n    });\r\n\r\n    this._scannerList.cards = updatedScannerListCards;\r\n\r\n    // Add new card\r\n    //cardNew.tempId = cardOld.tempId++;\r\n    //this._scannerList.cards.push(cardNew);\r\n\r\n    // Update subscriptions\r\n    this.scansSubject.next(this._scannerList.cards);\r\n  }\r\n\r\n  removeCard(card: Card) {\r\n    this._scannerList.cards = this._scannerList.cards.filter((_card) => {\r\n      return _card.tempId != card.tempId;\r\n    });\r\n\r\n    // Update subscriptions\r\n    this.scansSubject.next(this._scannerList.cards);\r\n\r\n    this.notificationService.addNotifications([\r\n      new Notification({\r\n        alertType: AlertType.success,\r\n        message: 'Removed ' + card.name + ' from results',\r\n      }),\r\n    ]);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "scannerList": {
                    "name": "scannerList",
                    "setSignature": {
                        "name": "scannerList",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "scannerList",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 85,
                        "jsdoctags": [
                            {
                                "name": "scannerList",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "scannerList",
                        "type": "",
                        "returnType": "",
                        "line": 82
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "UserCardGroupService",
            "id": "injectable-UserCardGroupService-9031d650fdc719042f2492aed62e3ee16d588095075dc03cb03229020e016ec90acebdda931b02e3c65e44dbf84a3c6d005254e5594fcef9bce55deac64ea312",
            "file": "src/app/pages/collection/user-card-group/user-card-group.services.ts",
            "properties": [
                {
                    "name": "addUserCardGroupSubject",
                    "defaultValue": "new BehaviorSubject<UserCardGroup | null>(\r\n    null\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getUserCardGroupsSubject",
                    "defaultValue": "new BehaviorSubject<ResUserCardGroups | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addUserCardGroup",
                    "args": [
                        {
                            "name": "userCardGroup",
                            "type": "UserCardGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userCardGroup",
                            "type": "UserCardGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addUserCardGroupObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserCardGroups",
                    "args": [
                        {
                            "name": "params",
                            "type": "APIGetPaged",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "APIGetPaged",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserCardGroupsObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport {\r\n  LoaderService,\r\n  Notification,\r\n  NotificationsService,\r\n} from '@app/controls';\r\nimport { APIGetPaged, APIResponse, buildUrl } from '@app/models';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { UserCardGroup } from '@app/pages/collection';\r\n\r\nexport interface ResUserCardGroups {\r\n  total_results: number;\r\n  total_pages: number;\r\n  user_card_groups: UserCardGroup[];\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserCardGroupService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private notificationService: NotificationsService,\r\n    private loaderService: LoaderService\r\n  ) {}\r\n\r\n  // Get user card groups\r\n  private getUserCardGroupsSubject =\r\n    new BehaviorSubject<ResUserCardGroups | null>(null);\r\n  getUserCardGroupsObservable() {\r\n    this.getUserCardGroupsSubject =\r\n      new BehaviorSubject<ResUserCardGroups | null>(null);\r\n    return this.getUserCardGroupsSubject.asObservable();\r\n  }\r\n  getUserCardGroups(params: APIGetPaged) {\r\n    this.http\r\n      .get<APIResponse>(params.buildUrl('card-groups'))\r\n      .subscribe((res) => {\r\n        this.getUserCardGroupsSubject.next({\r\n          user_card_groups: res.data.map(\r\n            (userCardGroup: any) => new UserCardGroup(userCardGroup)\r\n          ),\r\n          total_pages: res.meta.last_page,\r\n          total_results: res.meta.total,\r\n        });\r\n      });\r\n  }\r\n\r\n  // Add user card groups\r\n  private addUserCardGroupSubject = new BehaviorSubject<UserCardGroup | null>(\r\n    null\r\n  );\r\n  addUserCardGroupObservable() {\r\n    this.addUserCardGroupSubject = new BehaviorSubject<UserCardGroup | null>(\r\n      null\r\n    );\r\n    return this.addUserCardGroupSubject.asObservable();\r\n  }\r\n  addUserCardGroup(userCardGroup: UserCardGroup) {\r\n    this.loaderService.addItemLoading('user-card-group');\r\n    this.http\r\n      .post<APIResponse>(buildUrl('card-groups/create'), userCardGroup)\r\n      .subscribe((res) => {\r\n        if (res.success) {\r\n          this.addUserCardGroupSubject.next(userCardGroup);\r\n          this.notificationService.addNotifications([\r\n            new Notification({\r\n              message: `Added ${userCardGroup.name}`,\r\n            }),\r\n          ]);\r\n          this.loaderService.clearItemLoading('user-card-group');\r\n        }\r\n      });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserCardsService",
            "id": "injectable-UserCardsService-1b074dba5032b82480b12097eeed91a9f1d1e495e817d8b17e4c65ce528aaede0a66c6e588229885363cb9dd3a1cd358f0e7cffb513ee5b86f239efe2de9ff30",
            "file": "src/app/pages/collection/user-cards/user-cards.service.ts",
            "properties": [
                {
                    "name": "addUserCardSubject",
                    "defaultValue": "new BehaviorSubject<UserCard | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getCardUserCardsSubject",
                    "defaultValue": "new BehaviorSubject<UserCard[] | null>(\r\n    null\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getUserCardsSubject",
                    "defaultValue": "new BehaviorSubject<ResCards | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addUserCard",
                    "args": [
                        {
                            "name": "userCard",
                            "type": "UserCard",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userCard",
                            "type": "UserCard",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addUserCardObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCardUserCards",
                    "args": [
                        {
                            "name": "slug",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "slug",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCardUserCardsObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserCards",
                    "args": [
                        {
                            "name": "params",
                            "type": "APIGetPaged",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "APIGetPaged",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserCardsObservable",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeUserCard",
                    "args": [
                        {
                            "name": "user_card_id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user_card_id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUserCard",
                    "args": [
                        {
                            "name": "userCard",
                            "type": "UserCard",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userCard",
                            "type": "UserCard",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { LoaderService } from './../../../controls/loader/loader.service';\r\nimport { APIGetPaged, APIResponse, buildUrl } from '@app/models';\r\nimport { ResCards, Card } from '@app/pages';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { UserCard } from './user-card';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\nexport class UpdateUserCard {\r\n  user_card_id: number;\r\n  condition: string;\r\n  graded_by: string;\r\n  printing: string;\r\n  notes: string;\r\n  constructor(init?: Partial<UpdateUserCard>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport class AddUserCard {\r\n  card_id: number;\r\n  card_group_id?: number;\r\n  condition: string;\r\n  graded_by: string;\r\n  printing: string;\r\n  notes: string;\r\n  date_obtained: Date;\r\n  purchase_price: number;\r\n  constructor(init?: Partial<AddUserCard>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserCardsService {\r\n  constructor(private http: HttpClient, private loaderService: LoaderService) {}\r\n\r\n  // Get user cards\r\n  private getUserCardsSubject = new BehaviorSubject<ResCards | null>(null);\r\n  getUserCardsObservable() {\r\n    this.getUserCardsSubject = new BehaviorSubject<ResCards | null>(null);\r\n    return this.getUserCardsSubject.asObservable();\r\n  }\r\n  getUserCards(params: APIGetPaged) {\r\n    this.loaderService.addItemLoading('getUserCards');\r\n    this.http\r\n      .get<APIResponse>(params.buildUrl('user-cards'))\r\n      .subscribe((res) => {\r\n        this.getUserCardsSubject.next({\r\n          cards: res.data.map((userCard: any) => new Card(userCard.card)),\r\n          total_pages: res.meta.last_page,\r\n          total_results: res.meta.total,\r\n        });\r\n        this.loaderService.clearItemLoading('getUserCards');\r\n      });\r\n  }\r\n\r\n  // Get card user cards\r\n  private getCardUserCardsSubject = new BehaviorSubject<UserCard[] | null>(\r\n    null\r\n  );\r\n  getCardUserCardsObservable() {\r\n    this.getCardUserCardsSubject = new BehaviorSubject<UserCard[] | null>(null);\r\n    return this.getCardUserCardsSubject.asObservable();\r\n  }\r\n  getCardUserCards(slug: string) {\r\n    this.loaderService.addItemLoading('getUserCardsCard');\r\n    this.http\r\n      .get<APIResponse>(buildUrl('user-cards/' + slug))\r\n      .subscribe((res) => {\r\n        this.getCardUserCardsSubject.next(\r\n          res.data.map((userCard: any) => new UserCard(userCard))\r\n        );\r\n        this.loaderService.clearItemLoading('getUserCardsCard');\r\n      });\r\n  }\r\n\r\n  // Add user card\r\n  private addUserCardSubject = new BehaviorSubject<UserCard | null>(null);\r\n  addUserCardObservable() {\r\n    this.addUserCardSubject = new BehaviorSubject<UserCard | null>(null);\r\n    return this.addUserCardSubject.asObservable();\r\n  }\r\n  addUserCard(userCard: UserCard) {\r\n    this.loaderService.addItemLoading('addUserCard');\r\n    this.http\r\n      .post<APIResponse>(buildUrl('user-cards/create'), userCard)\r\n      .subscribe((res) => {\r\n        if (res.success) this.addUserCardSubject.next(userCard);\r\n        this.loaderService.clearItemLoading('addUserCard');\r\n      });\r\n  }\r\n\r\n  // Remove user card\r\n  removeUserCard(user_card_id: number) {\r\n    return this.http.post<APIResponse>(buildUrl('user-cards/delete'), {\r\n      user_card_id,\r\n    });\r\n  }\r\n\r\n  // Update user card\r\n  updateUserCard(userCard: UserCard) {\r\n    return this.http.post<APIResponse>(buildUrl('user-cards/update'), userCard);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-d8d14e997473b7b1cf32e8ffbfefc421d11e43dd311f54201a14fcb4ab694af0d9d090e65024f62964b6637ccadd51ebdaca75db93e2f2060b279179549d3eb6",
            "file": "src/app/helpers/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n  Router,\r\n  CanActivate,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot,\r\n} from '@angular/router';\r\nimport { AuthenticationService } from '../pages/auth/auth.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(\r\n    private router: Router,\r\n    private authenticationService: AuthenticationService\r\n  ) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    const currentUser = this.authenticationService.currentUserValue;\r\n    if (currentUser) {\r\n      // logged in so return true\r\n      return true;\r\n    }\r\n\r\n    // not logged in so redirect to login page with the return url\r\n    this.router.navigate(['/signin'], {\r\n      queryParams: { returnUrl: state.url },\r\n    });\r\n    return false;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "ErrorIntercept",
            "id": "injectable-ErrorIntercept-8242eeeaf4ef826a313d77c55fd937056b49df3a2a248b884c73e0f657df553356375043af1bfc8f2d615e66fd149aba4e3a628048b9eca44214cf66d8741a13",
            "file": "src/app/helpers/error.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpErrorResponse,\r\n  HttpEvent,\r\n} from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport { AuthenticationService } from '@app/pages/auth/auth.service';\r\nimport {\r\n  NotificationsService,\r\n  Notification,\r\n} from '@app/controls/notifications';\r\nimport { AlertType } from '@app/controls/alert/alert';\r\nimport { LoaderService } from '@app/controls';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ErrorIntercept implements HttpInterceptor {\r\n  constructor(\r\n    private authenticationService: AuthenticationService,\r\n    private notificationService: NotificationsService,\r\n    private loaderService: LoaderService\r\n  ) {}\r\n\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    return next.handle(request).pipe(\r\n      //retry(1),\r\n      catchError((error: HttpErrorResponse) => {\r\n        let message = '';\r\n        if (error.error instanceof ErrorEvent) {\r\n          // client-side error\r\n          message = error.error.message;\r\n        } else {\r\n          // server-side error\r\n          if (error.error && error.error.data) {\r\n            message = error.error.data;\r\n          } else if (error.error && error.error.errors) {\r\n            for (let prop in error.error.errors) {\r\n              if (\r\n                Object.prototype.hasOwnProperty.call(error.error.errors, prop)\r\n              ) {\r\n                message = error.error.errors[prop][0];\r\n              }\r\n            }\r\n          } else if (error.error && error.error.message) {\r\n            message = error.error.message;\r\n          } else {\r\n            message = error.message;\r\n          }\r\n        }\r\n\r\n        // Auto logout if 401 response returned from api\r\n        switch (error.status) {\r\n          case 401:\r\n            this.authenticationService.logout();\r\n            break;\r\n          case 429:\r\n            this.notificationService.addNotifications([\r\n              new Notification({\r\n                alertType: AlertType.error,\r\n                message: 'Too many requests, try again later',\r\n              }),\r\n            ]);\r\n            break;\r\n          default:\r\n            let _message = '';\r\n            switch (typeof message) {\r\n              case 'string': {\r\n                _message = message;\r\n                break;\r\n              }\r\n              case 'object': {\r\n                const messageCount = Object.keys(message).length;\r\n                Object.keys(message).forEach((k: any, i) => {\r\n                  _message += message[k][0];\r\n                  // Not last item add space\r\n                  if (i + 1 !== messageCount) {\r\n                    _message += ' ';\r\n                  }\r\n                });\r\n                break;\r\n              }\r\n            }\r\n            this.notificationService.addNotifications([\r\n              new Notification({\r\n                alertType: AlertType.error,\r\n                message: _message,\r\n              }),\r\n            ]);\r\n        }\r\n\r\n        this.loaderService.clear();\r\n\r\n        return throwError(message);\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        },
        {
            "name": "JwtInterceptor",
            "id": "injectable-JwtInterceptor-14aeaf480cf4c2fc8d8b17e602063abe232f2e3be7127e33e5308724e7151bc44217a37640b75b135a1cacbe153ecd6afc3d934f88e5e42f15351d22bda8d421",
            "file": "src/app/helpers/jwt.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthenticationService } from '@app/pages/auth/auth.service';\r\n\r\n@Injectable()\r\nexport class JwtInterceptor implements HttpInterceptor {\r\n  constructor(private authenticationService: AuthenticationService) {}\r\n\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    // add authorization header with jwt token if available\r\n    const currentUser = this.authenticationService.currentUserValue;\r\n    if (currentUser && currentUser.token) {\r\n      request = request.clone({\r\n        setHeaders: {\r\n          Authorization: `Bearer ${currentUser.token}`,\r\n          Accept: 'application/json',\r\n        },\r\n      });\r\n    }\r\n\r\n    return next.handle(request);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "AddUserCard",
            "id": "class-AddUserCard-1b074dba5032b82480b12097eeed91a9f1d1e495e817d8b17e4c65ce528aaede0a66c6e588229885363cb9dd3a1cd358f0e7cffb513ee5b86f239efe2de9ff30",
            "file": "src/app/pages/collection/user-cards/user-cards.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { LoaderService } from './../../../controls/loader/loader.service';\r\nimport { APIGetPaged, APIResponse, buildUrl } from '@app/models';\r\nimport { ResCards, Card } from '@app/pages';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { UserCard } from './user-card';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\nexport class UpdateUserCard {\r\n  user_card_id: number;\r\n  condition: string;\r\n  graded_by: string;\r\n  printing: string;\r\n  notes: string;\r\n  constructor(init?: Partial<UpdateUserCard>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport class AddUserCard {\r\n  card_id: number;\r\n  card_group_id?: number;\r\n  condition: string;\r\n  graded_by: string;\r\n  printing: string;\r\n  notes: string;\r\n  date_obtained: Date;\r\n  purchase_price: number;\r\n  constructor(init?: Partial<AddUserCard>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserCardsService {\r\n  constructor(private http: HttpClient, private loaderService: LoaderService) {}\r\n\r\n  // Get user cards\r\n  private getUserCardsSubject = new BehaviorSubject<ResCards | null>(null);\r\n  getUserCardsObservable() {\r\n    this.getUserCardsSubject = new BehaviorSubject<ResCards | null>(null);\r\n    return this.getUserCardsSubject.asObservable();\r\n  }\r\n  getUserCards(params: APIGetPaged) {\r\n    this.loaderService.addItemLoading('getUserCards');\r\n    this.http\r\n      .get<APIResponse>(params.buildUrl('user-cards'))\r\n      .subscribe((res) => {\r\n        this.getUserCardsSubject.next({\r\n          cards: res.data.map((userCard: any) => new Card(userCard.card)),\r\n          total_pages: res.meta.last_page,\r\n          total_results: res.meta.total,\r\n        });\r\n        this.loaderService.clearItemLoading('getUserCards');\r\n      });\r\n  }\r\n\r\n  // Get card user cards\r\n  private getCardUserCardsSubject = new BehaviorSubject<UserCard[] | null>(\r\n    null\r\n  );\r\n  getCardUserCardsObservable() {\r\n    this.getCardUserCardsSubject = new BehaviorSubject<UserCard[] | null>(null);\r\n    return this.getCardUserCardsSubject.asObservable();\r\n  }\r\n  getCardUserCards(slug: string) {\r\n    this.loaderService.addItemLoading('getUserCardsCard');\r\n    this.http\r\n      .get<APIResponse>(buildUrl('user-cards/' + slug))\r\n      .subscribe((res) => {\r\n        this.getCardUserCardsSubject.next(\r\n          res.data.map((userCard: any) => new UserCard(userCard))\r\n        );\r\n        this.loaderService.clearItemLoading('getUserCardsCard');\r\n      });\r\n  }\r\n\r\n  // Add user card\r\n  private addUserCardSubject = new BehaviorSubject<UserCard | null>(null);\r\n  addUserCardObservable() {\r\n    this.addUserCardSubject = new BehaviorSubject<UserCard | null>(null);\r\n    return this.addUserCardSubject.asObservable();\r\n  }\r\n  addUserCard(userCard: UserCard) {\r\n    this.loaderService.addItemLoading('addUserCard');\r\n    this.http\r\n      .post<APIResponse>(buildUrl('user-cards/create'), userCard)\r\n      .subscribe((res) => {\r\n        if (res.success) this.addUserCardSubject.next(userCard);\r\n        this.loaderService.clearItemLoading('addUserCard');\r\n      });\r\n  }\r\n\r\n  // Remove user card\r\n  removeUserCard(user_card_id: number) {\r\n    return this.http.post<APIResponse>(buildUrl('user-cards/delete'), {\r\n      user_card_id,\r\n    });\r\n  }\r\n\r\n  // Update user card\r\n  updateUserCard(userCard: UserCard) {\r\n    return this.http.post<APIResponse>(buildUrl('user-cards/update'), userCard);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<AddUserCard>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<AddUserCard>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "card_group_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "card_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "condition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "date_obtained",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "graded_by",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "notes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "printing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "purchase_price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Alert",
            "id": "class-Alert-9d392a873d8df0423a44428fe48030a119fad7527e2f307cfad10827dc8c8a20003edfd35b9369ce5ff7dc2dbba7ee622749a6a4540a5e851d37822a730f4f77",
            "file": "src/app/controls/alert/alert.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Alert {\r\n\tmessage: string;\r\n\ttype: AlertType;\r\n\r\n    public constructor(init?:Partial<Alert>) {\r\n        Object.assign(this, init);\r\n\t}\r\n}\r\n\r\nexport enum AlertType {\r\n\tsuccess = \"success\",\r\n\tinfo = \"info\",\r\n\twarning = \"warning\",\r\n\terror = \"error\"\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Alert>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 3,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Alert>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AlertType",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "APIGetPaged",
            "id": "class-APIGetPaged-52dd3c6bfc7da23fd5e841575a29bfc2572308a2a8ba265ded62d99f118e84cbc00b121b2f367bdfe4e67c0aa16f9113c8ba244b0a132db0eb3e2c527cdfc221",
            "file": "src/app/models/api.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpParams } from '@angular/common/http';\r\n\r\nexport class APIResponse {\r\n  success: boolean;\r\n  data: any;\r\n  meta: APIReponseMeta;\r\n}\r\n\r\nexport class APIReponseMeta {\r\n  current_page: number;\r\n  from: number;\r\n  last_page: number;\r\n  path: string;\r\n  per_page: number;\r\n  to: number;\r\n  total: number;\r\n}\r\n\r\n// Class when using paged API endpoints\r\nexport class APIGetPaged {\r\n  page: number;\r\n  page_size: number;\r\n  sort_by: string;\r\n  sort_direction: string;\r\n  query: string;\r\n  artist: string;\r\n  type: string;\r\n  supertype: string;\r\n  subtype: string;\r\n  rarity: string;\r\n  user_id: number;\r\n  slug: string;\r\n  code: string;\r\n\r\n  url: string;\r\n\r\n  buildUrl = (folder: string) => {\r\n    let query = new HttpParams();\r\n\r\n    // Page\r\n    if (this.page && this.page.toString().length)\r\n      query = query.set('page', this.page.toString());\r\n    else query = query.delete('page');\r\n\r\n    // Page size\r\n    if (this.page_size && this.page_size.toString().length)\r\n      query = query.set('page_size', this.page_size.toString());\r\n    else query = query.delete('page_size');\r\n\r\n    // Sort by\r\n    if (this.sort_by && this.sort_by.toString().length)\r\n      query = query.set('sort_by', this.sort_by);\r\n    else query = query.delete('sort_by');\r\n\r\n    // Sort direction\r\n    if (this.sort_direction && this.sort_direction.toString().length)\r\n      query = query.set('sort_direction', this.sort_direction);\r\n    else query = query.delete('sort_direction');\r\n\r\n    // Query\r\n    if (this.query && this.query.length)\r\n      query = query.set('search', this.query);\r\n    else query = query.delete('search');\r\n\r\n    // Artist\r\n    if (this.artist && this.artist.length)\r\n      query = query.set('artist', this.artist);\r\n    else query = query.delete('artist');\r\n\r\n    // Type\r\n    if (this.type && this.type.length) query = query.set('type', this.type);\r\n    else query = query.delete('type');\r\n\r\n    // Super type\r\n    if (this.supertype && this.supertype.length)\r\n      query = query.set('supertype', this.supertype);\r\n    else query = query.delete('supertype');\r\n\r\n    // Sub type\r\n    if (this.subtype && this.subtype.length)\r\n      query = query.set('subtype', this.subtype);\r\n    else query = query.delete('subtype');\r\n\r\n    // Rarity\r\n    if (this.rarity && this.rarity.length)\r\n      query = query.set('rarity', this.rarity);\r\n    else query = query.delete('rarity');\r\n\r\n    // User ID\r\n    if (this.user_id && this.user_id.toString().length)\r\n      query = query.set('user_id', this.user_id.toString());\r\n    else query = query.delete('user_id');\r\n\r\n    // Slug\r\n    if (this.slug && this.slug.length) query = query.set('slug', this.slug);\r\n    else query = query.delete('slug');\r\n\r\n    // Include ? and query string if provided\r\n    this.url = buildUrl(folder, query.toString());\r\n    return this.url;\r\n  };\r\n\r\n  constructor(init?: Partial<APIGetPaged>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport const buildUrl = (folder: string, queryString = '') => {\r\n  const apiUrl = 'https://api.rotomdex.app/api/';\r\n  return `${apiUrl}${folder}${queryString.length ? '?' + queryString : ''}`;\r\n};\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<APIGetPaged>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 101,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<APIGetPaged>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "artist",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "buildUrl",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "page_size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "query",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "rarity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "slug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "sort_by",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "sort_direction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "subtype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "supertype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "user_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "APIReponseMeta",
            "id": "class-APIReponseMeta-52dd3c6bfc7da23fd5e841575a29bfc2572308a2a8ba265ded62d99f118e84cbc00b121b2f367bdfe4e67c0aa16f9113c8ba244b0a132db0eb3e2c527cdfc221",
            "file": "src/app/models/api.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpParams } from '@angular/common/http';\r\n\r\nexport class APIResponse {\r\n  success: boolean;\r\n  data: any;\r\n  meta: APIReponseMeta;\r\n}\r\n\r\nexport class APIReponseMeta {\r\n  current_page: number;\r\n  from: number;\r\n  last_page: number;\r\n  path: string;\r\n  per_page: number;\r\n  to: number;\r\n  total: number;\r\n}\r\n\r\n// Class when using paged API endpoints\r\nexport class APIGetPaged {\r\n  page: number;\r\n  page_size: number;\r\n  sort_by: string;\r\n  sort_direction: string;\r\n  query: string;\r\n  artist: string;\r\n  type: string;\r\n  supertype: string;\r\n  subtype: string;\r\n  rarity: string;\r\n  user_id: number;\r\n  slug: string;\r\n  code: string;\r\n\r\n  url: string;\r\n\r\n  buildUrl = (folder: string) => {\r\n    let query = new HttpParams();\r\n\r\n    // Page\r\n    if (this.page && this.page.toString().length)\r\n      query = query.set('page', this.page.toString());\r\n    else query = query.delete('page');\r\n\r\n    // Page size\r\n    if (this.page_size && this.page_size.toString().length)\r\n      query = query.set('page_size', this.page_size.toString());\r\n    else query = query.delete('page_size');\r\n\r\n    // Sort by\r\n    if (this.sort_by && this.sort_by.toString().length)\r\n      query = query.set('sort_by', this.sort_by);\r\n    else query = query.delete('sort_by');\r\n\r\n    // Sort direction\r\n    if (this.sort_direction && this.sort_direction.toString().length)\r\n      query = query.set('sort_direction', this.sort_direction);\r\n    else query = query.delete('sort_direction');\r\n\r\n    // Query\r\n    if (this.query && this.query.length)\r\n      query = query.set('search', this.query);\r\n    else query = query.delete('search');\r\n\r\n    // Artist\r\n    if (this.artist && this.artist.length)\r\n      query = query.set('artist', this.artist);\r\n    else query = query.delete('artist');\r\n\r\n    // Type\r\n    if (this.type && this.type.length) query = query.set('type', this.type);\r\n    else query = query.delete('type');\r\n\r\n    // Super type\r\n    if (this.supertype && this.supertype.length)\r\n      query = query.set('supertype', this.supertype);\r\n    else query = query.delete('supertype');\r\n\r\n    // Sub type\r\n    if (this.subtype && this.subtype.length)\r\n      query = query.set('subtype', this.subtype);\r\n    else query = query.delete('subtype');\r\n\r\n    // Rarity\r\n    if (this.rarity && this.rarity.length)\r\n      query = query.set('rarity', this.rarity);\r\n    else query = query.delete('rarity');\r\n\r\n    // User ID\r\n    if (this.user_id && this.user_id.toString().length)\r\n      query = query.set('user_id', this.user_id.toString());\r\n    else query = query.delete('user_id');\r\n\r\n    // Slug\r\n    if (this.slug && this.slug.length) query = query.set('slug', this.slug);\r\n    else query = query.delete('slug');\r\n\r\n    // Include ? and query string if provided\r\n    this.url = buildUrl(folder, query.toString());\r\n    return this.url;\r\n  };\r\n\r\n  constructor(init?: Partial<APIGetPaged>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport const buildUrl = (folder: string, queryString = '') => {\r\n  const apiUrl = 'https://api.rotomdex.app/api/';\r\n  return `${apiUrl}${folder}${queryString.length ? '?' + queryString : ''}`;\r\n};\r\n",
            "properties": [
                {
                    "name": "current_page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "from",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "last_page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "per_page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "to",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "APIResponse",
            "id": "class-APIResponse-52dd3c6bfc7da23fd5e841575a29bfc2572308a2a8ba265ded62d99f118e84cbc00b121b2f367bdfe4e67c0aa16f9113c8ba244b0a132db0eb3e2c527cdfc221",
            "file": "src/app/models/api.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpParams } from '@angular/common/http';\r\n\r\nexport class APIResponse {\r\n  success: boolean;\r\n  data: any;\r\n  meta: APIReponseMeta;\r\n}\r\n\r\nexport class APIReponseMeta {\r\n  current_page: number;\r\n  from: number;\r\n  last_page: number;\r\n  path: string;\r\n  per_page: number;\r\n  to: number;\r\n  total: number;\r\n}\r\n\r\n// Class when using paged API endpoints\r\nexport class APIGetPaged {\r\n  page: number;\r\n  page_size: number;\r\n  sort_by: string;\r\n  sort_direction: string;\r\n  query: string;\r\n  artist: string;\r\n  type: string;\r\n  supertype: string;\r\n  subtype: string;\r\n  rarity: string;\r\n  user_id: number;\r\n  slug: string;\r\n  code: string;\r\n\r\n  url: string;\r\n\r\n  buildUrl = (folder: string) => {\r\n    let query = new HttpParams();\r\n\r\n    // Page\r\n    if (this.page && this.page.toString().length)\r\n      query = query.set('page', this.page.toString());\r\n    else query = query.delete('page');\r\n\r\n    // Page size\r\n    if (this.page_size && this.page_size.toString().length)\r\n      query = query.set('page_size', this.page_size.toString());\r\n    else query = query.delete('page_size');\r\n\r\n    // Sort by\r\n    if (this.sort_by && this.sort_by.toString().length)\r\n      query = query.set('sort_by', this.sort_by);\r\n    else query = query.delete('sort_by');\r\n\r\n    // Sort direction\r\n    if (this.sort_direction && this.sort_direction.toString().length)\r\n      query = query.set('sort_direction', this.sort_direction);\r\n    else query = query.delete('sort_direction');\r\n\r\n    // Query\r\n    if (this.query && this.query.length)\r\n      query = query.set('search', this.query);\r\n    else query = query.delete('search');\r\n\r\n    // Artist\r\n    if (this.artist && this.artist.length)\r\n      query = query.set('artist', this.artist);\r\n    else query = query.delete('artist');\r\n\r\n    // Type\r\n    if (this.type && this.type.length) query = query.set('type', this.type);\r\n    else query = query.delete('type');\r\n\r\n    // Super type\r\n    if (this.supertype && this.supertype.length)\r\n      query = query.set('supertype', this.supertype);\r\n    else query = query.delete('supertype');\r\n\r\n    // Sub type\r\n    if (this.subtype && this.subtype.length)\r\n      query = query.set('subtype', this.subtype);\r\n    else query = query.delete('subtype');\r\n\r\n    // Rarity\r\n    if (this.rarity && this.rarity.length)\r\n      query = query.set('rarity', this.rarity);\r\n    else query = query.delete('rarity');\r\n\r\n    // User ID\r\n    if (this.user_id && this.user_id.toString().length)\r\n      query = query.set('user_id', this.user_id.toString());\r\n    else query = query.delete('user_id');\r\n\r\n    // Slug\r\n    if (this.slug && this.slug.length) query = query.set('slug', this.slug);\r\n    else query = query.delete('slug');\r\n\r\n    // Include ? and query string if provided\r\n    this.url = buildUrl(folder, query.toString());\r\n    return this.url;\r\n  };\r\n\r\n  constructor(init?: Partial<APIGetPaged>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport const buildUrl = (folder: string, queryString = '') => {\r\n  const apiUrl = 'https://api.rotomdex.app/api/';\r\n  return `${apiUrl}${folder}${queryString.length ? '?' + queryString : ''}`;\r\n};\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "meta",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "APIReponseMeta",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AppSettings",
            "id": "class-AppSettings-c984c83c862aa57df7a734412dc0b182533abfe2322e9f71b739e3a40242882f1c7c6e5e613f50cc782593bd34b15f8a49fcad495f248a09eee464f883b2686b",
            "file": "src/app/app.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export abstract class AppSettings {\r\n\tstatic titlePrefix:string = \"Rotomdex - \";\r\n}",
            "properties": [
                {
                    "name": "titlePrefix",
                    "defaultValue": "\"Rotomdex - \"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Attack",
            "id": "class-Attack-d4cbe2de320702b88ee85311f0269dcb63a5a8080d57ac4f40ba9963a264914901d8d2e0c9ab7079fbde4dc349daf9e42d06a86669fc1bc4335a5b667d98ffa4",
            "file": "src/app/pages/cards/card/card.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { UserCard } from '@app/pages/collection';\r\nimport { SelectOption, SelectOptionGroup } from '@app/controls';\r\nimport '@app/helpers/string.extensions';\r\nimport { ItemsFilter } from '@app/layout';\r\nimport { Icons } from '@app/models';\r\nimport { Expansion } from '@app/pages/expansions';\r\nimport { Pokemon } from '@app/pages/pokemons/pokemon/pokemon';\r\n\r\nexport const DEFAULT_IMAGE = '/assets/back.jpg';\r\n\r\nexport class Weakness {\r\n  type: string;\r\n  value: string;\r\n}\r\n\r\nexport class Attack {\r\n  cost: string[] = [];\r\n  name: string;\r\n  text: string;\r\n  damage: number;\r\n  convertedEnergyCost: number;\r\n}\r\n\r\nexport class Card {\r\n  id: number;\r\n  name: string;\r\n  slug: string;\r\n  pokemon: Pokemon;\r\n  expansion: Expansion;\r\n  number: string;\r\n  rarity: string;\r\n  image: string;\r\n  image_high_res?: string;\r\n  super_type: string;\r\n  sub_type?: string;\r\n  hp?: number;\r\n  retreat_cost: string[] = [];\r\n  weaknesses: Weakness[] = [];\r\n  attacks: Attack[] = [];\r\n  artist: string;\r\n  is_shiny: boolean;\r\n  is_promo: boolean;\r\n  is_full_art: boolean;\r\n  is_gold: boolean;\r\n  has_first_edition: boolean;\r\n  has_shadowless: boolean;\r\n  has_reverse_holo: boolean;\r\n  types: string[] = [];\r\n  last_prices: CardLastPrices;\r\n  user_cards: UserCard[] = [];\r\n\r\n  route: string;\r\n  tempId: number;\r\n\r\n  getCardNumber(): string {\r\n    // IS number\r\n    if (!isNaN(+this.number)) {\r\n      const x = `${this.number}`;\r\n      const y = `${this.expansion.total_cards}`;\r\n      const pad = '000';\r\n      const xFormatted = pad.substring(0, pad.length - x.length) + x;\r\n      const yFormatted = pad.substring(0, pad.length - y.length) + y;\r\n      return `${xFormatted}/${yFormatted}`;\r\n    }\r\n    // NOT number (promo)\r\n    else {\r\n      return this.number;\r\n    }\r\n  }\r\n\r\n  constructor(init?: Partial<Card>) {\r\n    Object.assign(this, init);\r\n\r\n    // Route\r\n    this.route = '/cards/' + this.slug;\r\n\r\n    // Initalize expansion\r\n    if (init?.expansion) this.expansion = new Expansion(init.expansion);\r\n\r\n    // Initalize pokemon\r\n    if (init?.pokemon) this.pokemon = new Pokemon(init.pokemon);\r\n  }\r\n}\r\n\r\nexport class CardLastPrices {\r\n  card_id: number;\r\n  condition: string;\r\n  created_at: Date;\r\n  direct_price: string;\r\n  high_price: number;\r\n  id: number;\r\n  low_price: number;\r\n  market_price: number;\r\n  mid_price: number;\r\n  source: string;\r\n  updated_at: Date;\r\n  variation: string;\r\n\r\n  constructor(init?: Partial<CardLastPrices>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport class CardCount {\r\n  get count(): number {\r\n    return this.cards.length;\r\n  }\r\n  cards: Card[] = [];\r\n  constructor(init?: Partial<CardCount>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport function SetSortByCards(itemFilter: ItemsFilter) {\r\n  itemFilter.selectSortBy.optionGroups[0] = new SelectOptionGroup({\r\n    label: 'Sort By',\r\n    options: [\r\n      new SelectOption({\r\n        text: 'Number',\r\n        value: 'number',\r\n      }),\r\n      new SelectOption({\r\n        text: 'Name',\r\n        value: 'name',\r\n      }),\r\n      // new SelectOption({\r\n      // \ttext: 'Price',\r\n      // \tvalue: 'price',\r\n      // }),\r\n      new SelectOption({\r\n        text: 'Release Date',\r\n        value: 'release_date',\r\n      }),\r\n      // new SelectOption({\r\n      // \ttext: 'Rarity',\r\n      // \tvalue: 'rarity',\r\n      // }),\r\n    ],\r\n  });\r\n  itemFilter.selectSortBy.value = 'number';\r\n}\r\n",
            "properties": [
                {
                    "name": "convertedEnergyCost",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "cost",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "damage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Button",
            "id": "class-Button-5027406685c932385523c77f5c1f172efbc73fa1498673f52766fe863619aef8d3adb50cc325a4c6de3774c33589c683075c33026d964e1419dfaf094c98f497",
            "file": "src/app/controls/button/button.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Size } from '@app/models/size';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\n\r\nexport enum ButtonType {\r\n  button = 'button',\r\n  submit = 'submit',\r\n}\r\n\r\nexport class Button {\r\n  text: string;\r\n  icon: IconProp;\r\n  symbol: string;\r\n  href: string;\r\n  route: string;\r\n  disabled: boolean;\r\n  classes: string;\r\n  width: string;\r\n  type: ButtonType = ButtonType.button;\r\n  price: number;\r\n  size: Size;\r\n\r\n  public click: () => void;\r\n\r\n  public constructor(init?: Partial<Button>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Button>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 22,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Button>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "click",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "href",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconProp",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Size",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "symbol",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "type",
                    "defaultValue": "ButtonType.button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonType",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Cache",
            "id": "class-Cache-298200c5a730246e476a0d218af21af25a1a800adf17eea7bbfa83161835bdd6ba1d6dc6b1fb6d54693c0c48e44fd5ab8abdad2b11dc80e373f8a001c5997512",
            "file": "src/app/helpers/cache.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Card, Expansion, Pokemon, PokemonVariant, Series } from '@app/pages';\r\n\r\nexport abstract class Cache {\r\n  static expansions: Series[];\r\n  static expansion: { [key: string]: Expansion } = {};\r\n  static card: { [key: string]: Card } = {};\r\n  static pokemon: { [key: string]: Pokemon } = {};\r\n  static pokemonVariant: { [key: string]: PokemonVariant } = {};\r\n\r\n  static clear(type: string, key: string) {\r\n    (this as any)[type][key] = null;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "card",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "expansion",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "expansions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Series[]",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "pokemon",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "pokemonVariant",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clear",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Card",
            "id": "class-Card-d4cbe2de320702b88ee85311f0269dcb63a5a8080d57ac4f40ba9963a264914901d8d2e0c9ab7079fbde4dc349daf9e42d06a86669fc1bc4335a5b667d98ffa4",
            "file": "src/app/pages/cards/card/card.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { UserCard } from '@app/pages/collection';\r\nimport { SelectOption, SelectOptionGroup } from '@app/controls';\r\nimport '@app/helpers/string.extensions';\r\nimport { ItemsFilter } from '@app/layout';\r\nimport { Icons } from '@app/models';\r\nimport { Expansion } from '@app/pages/expansions';\r\nimport { Pokemon } from '@app/pages/pokemons/pokemon/pokemon';\r\n\r\nexport const DEFAULT_IMAGE = '/assets/back.jpg';\r\n\r\nexport class Weakness {\r\n  type: string;\r\n  value: string;\r\n}\r\n\r\nexport class Attack {\r\n  cost: string[] = [];\r\n  name: string;\r\n  text: string;\r\n  damage: number;\r\n  convertedEnergyCost: number;\r\n}\r\n\r\nexport class Card {\r\n  id: number;\r\n  name: string;\r\n  slug: string;\r\n  pokemon: Pokemon;\r\n  expansion: Expansion;\r\n  number: string;\r\n  rarity: string;\r\n  image: string;\r\n  image_high_res?: string;\r\n  super_type: string;\r\n  sub_type?: string;\r\n  hp?: number;\r\n  retreat_cost: string[] = [];\r\n  weaknesses: Weakness[] = [];\r\n  attacks: Attack[] = [];\r\n  artist: string;\r\n  is_shiny: boolean;\r\n  is_promo: boolean;\r\n  is_full_art: boolean;\r\n  is_gold: boolean;\r\n  has_first_edition: boolean;\r\n  has_shadowless: boolean;\r\n  has_reverse_holo: boolean;\r\n  types: string[] = [];\r\n  last_prices: CardLastPrices;\r\n  user_cards: UserCard[] = [];\r\n\r\n  route: string;\r\n  tempId: number;\r\n\r\n  getCardNumber(): string {\r\n    // IS number\r\n    if (!isNaN(+this.number)) {\r\n      const x = `${this.number}`;\r\n      const y = `${this.expansion.total_cards}`;\r\n      const pad = '000';\r\n      const xFormatted = pad.substring(0, pad.length - x.length) + x;\r\n      const yFormatted = pad.substring(0, pad.length - y.length) + y;\r\n      return `${xFormatted}/${yFormatted}`;\r\n    }\r\n    // NOT number (promo)\r\n    else {\r\n      return this.number;\r\n    }\r\n  }\r\n\r\n  constructor(init?: Partial<Card>) {\r\n    Object.assign(this, init);\r\n\r\n    // Route\r\n    this.route = '/cards/' + this.slug;\r\n\r\n    // Initalize expansion\r\n    if (init?.expansion) this.expansion = new Expansion(init.expansion);\r\n\r\n    // Initalize pokemon\r\n    if (init?.pokemon) this.pokemon = new Pokemon(init.pokemon);\r\n  }\r\n}\r\n\r\nexport class CardLastPrices {\r\n  card_id: number;\r\n  condition: string;\r\n  created_at: Date;\r\n  direct_price: string;\r\n  high_price: number;\r\n  id: number;\r\n  low_price: number;\r\n  market_price: number;\r\n  mid_price: number;\r\n  source: string;\r\n  updated_at: Date;\r\n  variation: string;\r\n\r\n  constructor(init?: Partial<CardLastPrices>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport class CardCount {\r\n  get count(): number {\r\n    return this.cards.length;\r\n  }\r\n  cards: Card[] = [];\r\n  constructor(init?: Partial<CardCount>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport function SetSortByCards(itemFilter: ItemsFilter) {\r\n  itemFilter.selectSortBy.optionGroups[0] = new SelectOptionGroup({\r\n    label: 'Sort By',\r\n    options: [\r\n      new SelectOption({\r\n        text: 'Number',\r\n        value: 'number',\r\n      }),\r\n      new SelectOption({\r\n        text: 'Name',\r\n        value: 'name',\r\n      }),\r\n      // new SelectOption({\r\n      // \ttext: 'Price',\r\n      // \tvalue: 'price',\r\n      // }),\r\n      new SelectOption({\r\n        text: 'Release Date',\r\n        value: 'release_date',\r\n      }),\r\n      // new SelectOption({\r\n      // \ttext: 'Rarity',\r\n      // \tvalue: 'rarity',\r\n      // }),\r\n    ],\r\n  });\r\n  itemFilter.selectSortBy.value = 'number';\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Card>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 69,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Card>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "artist",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "attacks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Attack[]",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "expansion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Expansion",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "has_first_edition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "has_reverse_holo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "has_shadowless",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "hp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "image_high_res",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "is_full_art",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "is_gold",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "is_promo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "is_shiny",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "last_prices",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardLastPrices",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "pokemon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pokemon",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "rarity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "retreat_cost",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "slug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "sub_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "super_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "tempId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "types",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "user_cards",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserCard[]",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "weaknesses",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Weakness[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methods": [
                {
                    "name": "getCardNumber",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CardCount",
            "id": "class-CardCount-d4cbe2de320702b88ee85311f0269dcb63a5a8080d57ac4f40ba9963a264914901d8d2e0c9ab7079fbde4dc349daf9e42d06a86669fc1bc4335a5b667d98ffa4",
            "file": "src/app/pages/cards/card/card.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { UserCard } from '@app/pages/collection';\r\nimport { SelectOption, SelectOptionGroup } from '@app/controls';\r\nimport '@app/helpers/string.extensions';\r\nimport { ItemsFilter } from '@app/layout';\r\nimport { Icons } from '@app/models';\r\nimport { Expansion } from '@app/pages/expansions';\r\nimport { Pokemon } from '@app/pages/pokemons/pokemon/pokemon';\r\n\r\nexport const DEFAULT_IMAGE = '/assets/back.jpg';\r\n\r\nexport class Weakness {\r\n  type: string;\r\n  value: string;\r\n}\r\n\r\nexport class Attack {\r\n  cost: string[] = [];\r\n  name: string;\r\n  text: string;\r\n  damage: number;\r\n  convertedEnergyCost: number;\r\n}\r\n\r\nexport class Card {\r\n  id: number;\r\n  name: string;\r\n  slug: string;\r\n  pokemon: Pokemon;\r\n  expansion: Expansion;\r\n  number: string;\r\n  rarity: string;\r\n  image: string;\r\n  image_high_res?: string;\r\n  super_type: string;\r\n  sub_type?: string;\r\n  hp?: number;\r\n  retreat_cost: string[] = [];\r\n  weaknesses: Weakness[] = [];\r\n  attacks: Attack[] = [];\r\n  artist: string;\r\n  is_shiny: boolean;\r\n  is_promo: boolean;\r\n  is_full_art: boolean;\r\n  is_gold: boolean;\r\n  has_first_edition: boolean;\r\n  has_shadowless: boolean;\r\n  has_reverse_holo: boolean;\r\n  types: string[] = [];\r\n  last_prices: CardLastPrices;\r\n  user_cards: UserCard[] = [];\r\n\r\n  route: string;\r\n  tempId: number;\r\n\r\n  getCardNumber(): string {\r\n    // IS number\r\n    if (!isNaN(+this.number)) {\r\n      const x = `${this.number}`;\r\n      const y = `${this.expansion.total_cards}`;\r\n      const pad = '000';\r\n      const xFormatted = pad.substring(0, pad.length - x.length) + x;\r\n      const yFormatted = pad.substring(0, pad.length - y.length) + y;\r\n      return `${xFormatted}/${yFormatted}`;\r\n    }\r\n    // NOT number (promo)\r\n    else {\r\n      return this.number;\r\n    }\r\n  }\r\n\r\n  constructor(init?: Partial<Card>) {\r\n    Object.assign(this, init);\r\n\r\n    // Route\r\n    this.route = '/cards/' + this.slug;\r\n\r\n    // Initalize expansion\r\n    if (init?.expansion) this.expansion = new Expansion(init.expansion);\r\n\r\n    // Initalize pokemon\r\n    if (init?.pokemon) this.pokemon = new Pokemon(init.pokemon);\r\n  }\r\n}\r\n\r\nexport class CardLastPrices {\r\n  card_id: number;\r\n  condition: string;\r\n  created_at: Date;\r\n  direct_price: string;\r\n  high_price: number;\r\n  id: number;\r\n  low_price: number;\r\n  market_price: number;\r\n  mid_price: number;\r\n  source: string;\r\n  updated_at: Date;\r\n  variation: string;\r\n\r\n  constructor(init?: Partial<CardLastPrices>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport class CardCount {\r\n  get count(): number {\r\n    return this.cards.length;\r\n  }\r\n  cards: Card[] = [];\r\n  constructor(init?: Partial<CardCount>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport function SetSortByCards(itemFilter: ItemsFilter) {\r\n  itemFilter.selectSortBy.optionGroups[0] = new SelectOptionGroup({\r\n    label: 'Sort By',\r\n    options: [\r\n      new SelectOption({\r\n        text: 'Number',\r\n        value: 'number',\r\n      }),\r\n      new SelectOption({\r\n        text: 'Name',\r\n        value: 'name',\r\n      }),\r\n      // new SelectOption({\r\n      // \ttext: 'Price',\r\n      // \tvalue: 'price',\r\n      // }),\r\n      new SelectOption({\r\n        text: 'Release Date',\r\n        value: 'release_date',\r\n      }),\r\n      // new SelectOption({\r\n      // \ttext: 'Rarity',\r\n      // \tvalue: 'rarity',\r\n      // }),\r\n    ],\r\n  });\r\n  itemFilter.selectSortBy.value = 'number';\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<CardCount>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 108,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<CardCount>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "cards",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card[]",
                    "optional": false,
                    "description": "",
                    "line": 108
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "accessors": {
                "count": {
                    "name": "count",
                    "getSignature": {
                        "name": "count",
                        "type": "number",
                        "returnType": "number",
                        "line": 105
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CardLastPrices",
            "id": "class-CardLastPrices-d4cbe2de320702b88ee85311f0269dcb63a5a8080d57ac4f40ba9963a264914901d8d2e0c9ab7079fbde4dc349daf9e42d06a86669fc1bc4335a5b667d98ffa4",
            "file": "src/app/pages/cards/card/card.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { UserCard } from '@app/pages/collection';\r\nimport { SelectOption, SelectOptionGroup } from '@app/controls';\r\nimport '@app/helpers/string.extensions';\r\nimport { ItemsFilter } from '@app/layout';\r\nimport { Icons } from '@app/models';\r\nimport { Expansion } from '@app/pages/expansions';\r\nimport { Pokemon } from '@app/pages/pokemons/pokemon/pokemon';\r\n\r\nexport const DEFAULT_IMAGE = '/assets/back.jpg';\r\n\r\nexport class Weakness {\r\n  type: string;\r\n  value: string;\r\n}\r\n\r\nexport class Attack {\r\n  cost: string[] = [];\r\n  name: string;\r\n  text: string;\r\n  damage: number;\r\n  convertedEnergyCost: number;\r\n}\r\n\r\nexport class Card {\r\n  id: number;\r\n  name: string;\r\n  slug: string;\r\n  pokemon: Pokemon;\r\n  expansion: Expansion;\r\n  number: string;\r\n  rarity: string;\r\n  image: string;\r\n  image_high_res?: string;\r\n  super_type: string;\r\n  sub_type?: string;\r\n  hp?: number;\r\n  retreat_cost: string[] = [];\r\n  weaknesses: Weakness[] = [];\r\n  attacks: Attack[] = [];\r\n  artist: string;\r\n  is_shiny: boolean;\r\n  is_promo: boolean;\r\n  is_full_art: boolean;\r\n  is_gold: boolean;\r\n  has_first_edition: boolean;\r\n  has_shadowless: boolean;\r\n  has_reverse_holo: boolean;\r\n  types: string[] = [];\r\n  last_prices: CardLastPrices;\r\n  user_cards: UserCard[] = [];\r\n\r\n  route: string;\r\n  tempId: number;\r\n\r\n  getCardNumber(): string {\r\n    // IS number\r\n    if (!isNaN(+this.number)) {\r\n      const x = `${this.number}`;\r\n      const y = `${this.expansion.total_cards}`;\r\n      const pad = '000';\r\n      const xFormatted = pad.substring(0, pad.length - x.length) + x;\r\n      const yFormatted = pad.substring(0, pad.length - y.length) + y;\r\n      return `${xFormatted}/${yFormatted}`;\r\n    }\r\n    // NOT number (promo)\r\n    else {\r\n      return this.number;\r\n    }\r\n  }\r\n\r\n  constructor(init?: Partial<Card>) {\r\n    Object.assign(this, init);\r\n\r\n    // Route\r\n    this.route = '/cards/' + this.slug;\r\n\r\n    // Initalize expansion\r\n    if (init?.expansion) this.expansion = new Expansion(init.expansion);\r\n\r\n    // Initalize pokemon\r\n    if (init?.pokemon) this.pokemon = new Pokemon(init.pokemon);\r\n  }\r\n}\r\n\r\nexport class CardLastPrices {\r\n  card_id: number;\r\n  condition: string;\r\n  created_at: Date;\r\n  direct_price: string;\r\n  high_price: number;\r\n  id: number;\r\n  low_price: number;\r\n  market_price: number;\r\n  mid_price: number;\r\n  source: string;\r\n  updated_at: Date;\r\n  variation: string;\r\n\r\n  constructor(init?: Partial<CardLastPrices>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport class CardCount {\r\n  get count(): number {\r\n    return this.cards.length;\r\n  }\r\n  cards: Card[] = [];\r\n  constructor(init?: Partial<CardCount>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport function SetSortByCards(itemFilter: ItemsFilter) {\r\n  itemFilter.selectSortBy.optionGroups[0] = new SelectOptionGroup({\r\n    label: 'Sort By',\r\n    options: [\r\n      new SelectOption({\r\n        text: 'Number',\r\n        value: 'number',\r\n      }),\r\n      new SelectOption({\r\n        text: 'Name',\r\n        value: 'name',\r\n      }),\r\n      // new SelectOption({\r\n      // \ttext: 'Price',\r\n      // \tvalue: 'price',\r\n      // }),\r\n      new SelectOption({\r\n        text: 'Release Date',\r\n        value: 'release_date',\r\n      }),\r\n      // new SelectOption({\r\n      // \ttext: 'Rarity',\r\n      // \tvalue: 'rarity',\r\n      // }),\r\n    ],\r\n  });\r\n  itemFilter.selectSortBy.value = 'number';\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<CardLastPrices>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 97,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<CardLastPrices>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "card_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "condition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "created_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "direct_price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "high_price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "low_price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "market_price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "mid_price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "source",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "updated_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "variation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 97
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Cards",
            "id": "class-Cards-d51fa1f113ba035837439ad8b9e2fb5ba192439645296de38b9e0a7f296528d0fcc81be3a433030e2a175ffc0da9148b44e3b4ecd7b532ae45f2c04ed731363f",
            "file": "src/app/pages/cards/cards.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Items } from '@app/layout/main/items/items';\r\n\r\nexport class Cards {\r\n\titems: Items = new Items();\r\n\r\n\thidePaging: boolean = false;\r\n\ttotalCards: number;\r\n\tart: boolean;\r\n\tisDefault: boolean = false;\r\n\tgetCardsOnInit: boolean = true;\r\n\r\n    constructor(init?:Partial<Cards>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Cards>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Cards>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "art",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "getCardsOnInit",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "hidePaging",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "isDefault",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "items",
                    "defaultValue": "new Items()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Items",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "totalCards",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Checkbox",
            "id": "class-Checkbox-aecfb15e9cf268dfe986df92c290da69c971f0513cf383b64116149d86d7a160095a9b0a74507d03ff61a0609cb9d5a5fd1e747f86a62436b87310faac79a3cb",
            "file": "src/app/controls/checkbox/checkbox.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Size } from '@app/models/size';\r\n\r\nexport class Checkbox {\r\n\tid?: string;\r\n\ttext?: string;\r\n\tsize: Size = Size.medium;\r\n\tdisabled: boolean = false;\r\n\tchecked: boolean = false;\r\n\r\n    public constructor(init?:Partial<Checkbox>) {\r\n        Object.assign(this, init);\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Checkbox>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 8,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Checkbox>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "size",
                    "defaultValue": "Size.medium",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Size",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Collection",
            "id": "class-Collection-6b176b2e976072d11367d6d165b29ed5ba1abd7cd2f639b12cf48920f48a8aa5f62d04ba0bd431d4bb012a66fd5cdaebf28686a3a220b6443bc1cb578fc56d56",
            "file": "src/app/pages/collection/collection.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Collection {}\r\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DialogConfig",
            "id": "class-DialogConfig-41a7e38c46dc013c7ba8aca5f93e7a8b9022ddcd3c9b28f9026b3b8bc16fbd51114e42bf0593f6e474cc73147ef2cf2c8cd24fd2762daef8a88adf034c4985a6",
            "file": "src/app/controls/dialog/dialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Form } from './../form/form';\r\nimport { Button } from '../button';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { Injector, Type, InjectionToken, InjectFlags } from '@angular/core';\r\n\r\nexport class DialogRef {\r\n  close(result?: any): void {\r\n    this._afterClosed.next(result);\r\n  }\r\n  private readonly _afterClosed = new Subject<any>();\r\n  afterClosed: Observable<any> = this._afterClosed.asObservable();\r\n}\r\n\r\nexport class DialogInjector implements Injector {\r\n  get<T>(\r\n    token: Type<T> | InjectionToken<T>,\r\n    notFoundValue?: T,\r\n    flags?: InjectFlags\r\n  ): T;\r\n  get(token: any, notFoundValue?: any): any;\r\n  get(token: any, notFoundValue?: any, flags?: any) {\r\n    const value = this.additionalTokens.get(token);\r\n    if (value) return value;\r\n    return this.injector.get<any>(token, notFoundValue);\r\n  }\r\n  constructor(\r\n    private injector: Injector,\r\n    private additionalTokens: WeakMap<any, any>\r\n  ) {}\r\n}\r\n\r\nexport class DialogConfig {\r\n  title: string;\r\n  active: boolean;\r\n  buttons: Button[] = [];\r\n  data?: any;\r\n\r\n  public constructor(init?: Partial<DialogConfig>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<DialogConfig>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 36,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<DialogConfig>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "buttons",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DialogInjector",
            "id": "class-DialogInjector-41a7e38c46dc013c7ba8aca5f93e7a8b9022ddcd3c9b28f9026b3b8bc16fbd51114e42bf0593f6e474cc73147ef2cf2c8cd24fd2762daef8a88adf034c4985a6",
            "file": "src/app/controls/dialog/dialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Form } from './../form/form';\r\nimport { Button } from '../button';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { Injector, Type, InjectionToken, InjectFlags } from '@angular/core';\r\n\r\nexport class DialogRef {\r\n  close(result?: any): void {\r\n    this._afterClosed.next(result);\r\n  }\r\n  private readonly _afterClosed = new Subject<any>();\r\n  afterClosed: Observable<any> = this._afterClosed.asObservable();\r\n}\r\n\r\nexport class DialogInjector implements Injector {\r\n  get<T>(\r\n    token: Type<T> | InjectionToken<T>,\r\n    notFoundValue?: T,\r\n    flags?: InjectFlags\r\n  ): T;\r\n  get(token: any, notFoundValue?: any): any;\r\n  get(token: any, notFoundValue?: any, flags?: any) {\r\n    const value = this.additionalTokens.get(token);\r\n    if (value) return value;\r\n    return this.injector.get<any>(token, notFoundValue);\r\n  }\r\n  constructor(\r\n    private injector: Injector,\r\n    private additionalTokens: WeakMap<any, any>\r\n  ) {}\r\n}\r\n\r\nexport class DialogConfig {\r\n  title: string;\r\n  active: boolean;\r\n  buttons: Button[] = [];\r\n  data?: any;\r\n\r\n  public constructor(init?: Partial<DialogConfig>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "additionalTokens",
                        "type": "WeakMap<any | any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "additionalTokens",
                        "type": "WeakMap<any | any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "token",
                            "type": "Type<T> | InjectionToken<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "notFoundValue",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "flags",
                            "type": "InjectFlags",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "Type<T> | InjectionToken<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "notFoundValue",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "flags",
                            "type": "InjectFlags",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "token",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "notFoundValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "notFoundValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "token",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "notFoundValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "flags",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "notFoundValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "flags",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Injector"
            ]
        },
        {
            "name": "DialogRef",
            "id": "class-DialogRef-41a7e38c46dc013c7ba8aca5f93e7a8b9022ddcd3c9b28f9026b3b8bc16fbd51114e42bf0593f6e474cc73147ef2cf2c8cd24fd2762daef8a88adf034c4985a6",
            "file": "src/app/controls/dialog/dialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Form } from './../form/form';\r\nimport { Button } from '../button';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { Injector, Type, InjectionToken, InjectFlags } from '@angular/core';\r\n\r\nexport class DialogRef {\r\n  close(result?: any): void {\r\n    this._afterClosed.next(result);\r\n  }\r\n  private readonly _afterClosed = new Subject<any>();\r\n  afterClosed: Observable<any> = this._afterClosed.asObservable();\r\n}\r\n\r\nexport class DialogInjector implements Injector {\r\n  get<T>(\r\n    token: Type<T> | InjectionToken<T>,\r\n    notFoundValue?: T,\r\n    flags?: InjectFlags\r\n  ): T;\r\n  get(token: any, notFoundValue?: any): any;\r\n  get(token: any, notFoundValue?: any, flags?: any) {\r\n    const value = this.additionalTokens.get(token);\r\n    if (value) return value;\r\n    return this.injector.get<any>(token, notFoundValue);\r\n  }\r\n  constructor(\r\n    private injector: Injector,\r\n    private additionalTokens: WeakMap<any, any>\r\n  ) {}\r\n}\r\n\r\nexport class DialogConfig {\r\n  title: string;\r\n  active: boolean;\r\n  buttons: Button[] = [];\r\n  data?: any;\r\n\r\n  public constructor(init?: Partial<DialogConfig>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "_afterClosed",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "afterClosed",
                    "defaultValue": "this._afterClosed.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "result",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "result",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Editor",
            "id": "class-Editor-f0ee6b7ce9f1b5db05dbd7e1c82f5349fb41a4f2bbe2a9193e09e6ee1e24d3b290f72f1babd62e441fe5852db22e93a4e8cd528d0ef219480df747a554f3ea93",
            "file": "src/app/controls/editor/editor.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Editor {\r\n\tlabel: string;\r\n\tvalue: string = \"\";\r\n\r\n    constructor(init?:Partial<Editor>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Editor>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Editor>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Empty",
            "id": "class-Empty-63f35972e1c6d1c79116f145cb14ed099cbf0d67dacbe9505b156835292f64fb85bd1ddfd8943d51056d02ab3958518cbea75b425f80861e83aa0516ba1ff39d",
            "file": "src/app/controls/empty/empty.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport { Button } from '../button';\r\n\r\nexport class Empty {\r\n  text: string;\r\n  icon: IconProp;\r\n  image: string;\r\n  button: Button;\r\n\r\n  constructor(init?: Partial<Empty>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Empty>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Empty>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconProp",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Environment",
            "id": "class-Environment-8a912ed2550fbf8818d1bdeb5bc351fece224a69417328ea553c10ae2c2f8a38d221bea45833359f7ddc84096136aa375a443097b5513db49e88fdd929134862",
            "file": "src/environments/environment.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "class Environment {\n  production: boolean;\n  api: string;\n  images: string;\n  constructor(init?: Partial<Environment>) {\n    Object.assign(this, init);\n  }\n}\n\nexport const environment = new Environment({\n  production: false,\n  api: 'https://api.rotomdex.app/api/',\n  images: 'https://images.rotomdex.app/',\n});\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Environment>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Environment>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "api",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "images",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "production",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EvolutionChain",
            "id": "class-EvolutionChain-bd1c947df328a2ab859d6aac706bc8a32409e6526e1e629ffd0df63f118593b756cf61b3e155fab62c205bfd4884e064cfecc0fec45b86a7326da4f3ded4c18e",
            "file": "src/app/pages/pokemons/pokemon/pokemon.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Select, SelectOption, SelectOptionGroup } from '@app/controls';\r\n\r\nexport class EvolutionChain {\r\n  id: number;\r\n  name: string;\r\n  national_dex_number: number;\r\n  sprite: string;\r\n  slug: string;\r\n}\r\n\r\nexport class PokemonGeneration {\r\n  id: number;\r\n  name: string;\r\n  region: string;\r\n  constructor(init?: Partial<PokemonGeneration>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport class Pokemon {\r\n  id: number;\r\n  name: string;\r\n  generation: PokemonGeneration;\r\n  national_dex_number: number;\r\n  order: number;\r\n  is_baby: boolean;\r\n  is_legendary: boolean;\r\n  is_mythical: boolean;\r\n  color: string;\r\n  shape: string;\r\n  flavor_texts: string;\r\n  evolves_from_pokemon: number;\r\n  image: string;\r\n  slug: string;\r\n  variants: PokemonVariant[] = [];\r\n  variant: PokemonVariant;\r\n  sprites: PokemonSprites;\r\n  types: string[] = [];\r\n  height: number;\r\n  weight: number;\r\n  evolution_chain: EvolutionChain[] = [];\r\n\r\n  route: string;\r\n\r\n  constructor(init?: Partial<Pokemon>) {\r\n    Object.assign(this, init);\r\n\r\n    // Route\r\n    this.route = `/pokemon/${this.slug}`;\r\n\r\n    // Initalize variants\r\n    if (init?.variants) {\r\n      this.variants = init.variants?.map(\r\n        (variant: any) => new PokemonVariant(variant)\r\n      );\r\n    }\r\n    if (init?.variant) {\r\n      this.variant = new PokemonVariant(this.variant);\r\n      this.variant.pokemon = this;\r\n    }\r\n  }\r\n}\r\n\r\nexport class PokemonVariant {\r\n  progress: number = 80;\r\n  total_cards: number = 100;\r\n  id: number;\r\n  pokemon: Pokemon;\r\n  name: string;\r\n  slug: string;\r\n  is_default: boolean;\r\n  sprites: PokemonSprites;\r\n  height: number;\r\n  weight: number;\r\n  types: string[] = [];\r\n  previous_pokemon: string;\r\n  next_pokemon: string;\r\n  other_variants: PokemonVariant[] = [];\r\n\r\n  route: string;\r\n\r\n  constructor(init?: Partial<PokemonVariant>) {\r\n    Object.assign(this, init);\r\n\r\n    // Route\r\n    if (!this.slug && this.name)\r\n      this.slug = this.name.toLowerCase().replace(' ', '-');\r\n    this.route = `/pokemon/${this.slug}`;\r\n\r\n    // Init sprites\r\n    this.sprites = new PokemonSprites(init?.sprites);\r\n\r\n    if (init?.other_variants)\r\n      this.other_variants = init.other_variants.map(\r\n        (variant) => new PokemonVariant(variant)\r\n      );\r\n  }\r\n}\r\n\r\nexport class PokemonSprites {\r\n  default?: string;\r\n  official?: string;\r\n  shiny?: string;\r\n  icon?: string;\r\n  animated?: string;\r\n\r\n  constructor(init?: Partial<PokemonSprites>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport function SetSortByPokemon(select: Select) {\r\n  select.optionGroups[0] = new SelectOptionGroup({\r\n    label: 'Sort By',\r\n    options: [\r\n      new SelectOption({\r\n        text: 'Number',\r\n        value: 'pokemon.order',\r\n      }),\r\n      new SelectOption({\r\n        text: 'Name',\r\n        value: 'pokemon_variants.name',\r\n      }),\r\n      new SelectOption({\r\n        text: 'Weight',\r\n        value: 'pokemon_variants.weight',\r\n      }),\r\n      new SelectOption({\r\n        text: 'Height',\r\n        value: 'pokemon_variants.height',\r\n      }),\r\n    ],\r\n  });\r\n  select.value = 'pokemon.order';\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "national_dex_number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "slug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "sprite",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Expansion",
            "id": "class-Expansion-97a9c38bb401934b5e1fe8e472b1c23d51e345a152cc48ed893e6957beff49b55d5800176ad3ba44eb59eb09e678e4aef5d5e779b583278f5d1392ddc1499bf0",
            "file": "src/app/pages/expansions/expansion/expansion.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Select, SelectOption, SelectOptionGroup } from '@app/controls';\r\nimport { ItemsFilter, ItemsFooter } from '@app/layout/main';\r\nimport { Card } from '@app/pages/cards';\r\n\r\nexport class Expansion {\r\n  id: number;\r\n  name: string;\r\n  code: string;\r\n  ptcgo_code?: string;\r\n  series: Series;\r\n  standard_legal: boolean;\r\n  expanded_legal: boolean;\r\n  total_cards: number;\r\n  release_date: Date;\r\n  symbol: string;\r\n  logo: string;\r\n  progress: number = 17;\r\n\r\n  route: string;\r\n  cards: Card[] = [];\r\n\r\n  constructor(init?: Partial<Expansion>) {\r\n    Object.assign(this, init);\r\n\r\n    // Route\r\n    this.route = `/expansions/${this.code}`;\r\n\r\n    // Init cards\r\n    if (init?.cards) this.cards = init.cards.map((card: any) => new Card(card));\r\n  }\r\n}\r\n\r\nexport class Series {\r\n  id: number;\r\n  name: string;\r\n  expansions: Expansion[] = [];\r\n\r\n  constructor(init?: Partial<Series>) {\r\n    Object.assign(this, init);\r\n\r\n    // Init expanions\r\n    if (init?.expansions)\r\n      this.expansions = init.expansions.map(\r\n        (expansion: any) => new Expansion(expansion)\r\n      );\r\n  }\r\n}\r\n\r\nexport function SetSortByExpansions(itemFilter: ItemsFilter) {\r\n  itemFilter.selectSortBy.optionGroups[0] = new SelectOptionGroup({\r\n    label: 'Sort By',\r\n    options: [\r\n      new SelectOption({\r\n        text: 'Release Date',\r\n        value: 'expansion.release_date',\r\n      }),\r\n    ],\r\n  });\r\n  itemFilter.selectSortBy.value = 'expansion.release_date';\r\n}\r\n\r\nexport function SetSortByExpansion(itemFilter: ItemsFilter) {\r\n  itemFilter.selectSortBy.optionGroups[0] = new SelectOptionGroup({\r\n    label: 'Sort By',\r\n    options: [\r\n      new SelectOption({\r\n        text: 'Number',\r\n        value: 'number',\r\n      }),\r\n      new SelectOption({\r\n        text: 'Name',\r\n        value: 'name',\r\n      }),\r\n    ],\r\n  });\r\n  itemFilter.selectSortBy.value = 'number';\r\n}\r\n\r\nexport function SetPageSize(itemFooter: ItemsFooter) {\r\n  itemFooter.selectPageSize.value = itemFooter.pageSize.toString();\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Expansion>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Expansion>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "cards",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "expanded_legal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "logo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "progress",
                    "defaultValue": "17",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "ptcgo_code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "release_date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Series",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "standard_legal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "symbol",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "total_cards",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Featured",
            "id": "class-Featured-6ea62c4e475b851c5195cdf3a56c691febd050b0cc59e1d3b97141439075055d0e2423cfccf1eba814c24860c7903824fb6311a116294418514a36e9b4b90391",
            "file": "src/app/pages/home/featured.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { PokemonVariant } from './../pokemons/pokemon/pokemon';\r\nimport { Expansion } from './../expansions/expansion/expansion';\r\nimport { Card } from './../cards/card/card';\r\n\r\nexport class Featured {\r\n  cards: Card[] = [];\r\n  expansions: Expansion[] = [];\r\n  pokemon: PokemonVariant[] = [];\r\n\r\n  constructor(init?: Partial<Featured>) {\r\n    Object.assign(this, init);\r\n    if (init?.cards) this.cards = init.cards.map((card) => new Card(card));\r\n    if (init?.expansions)\r\n      this.expansions = init.expansions.map(\r\n        (expansion) => new Expansion(expansion)\r\n      );\r\n    if (init?.pokemon)\r\n      this.pokemon = init.pokemon.map((pokemon) => new PokemonVariant(pokemon));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Featured>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Featured>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "cards",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "expansions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Expansion[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "pokemon",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PokemonVariant[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Form",
            "id": "class-Form-b8fec25c110991b5aec68365071c06872d476f7961a469bc5b9b85e77c7912008b219e4cba6707ce065a132f8fe51cb147d1b979fccb6a89c0f771da03e0a14c",
            "file": "src/app/controls/form/form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { FormControlGroup } from './form-group/form-group';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\nexport class Form {\r\n  title: string;\r\n  groups: FormControlGroup[];\r\n  formGroup: FormGroup;\r\n\r\n  constructor(init?: Partial<Form>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Form>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Form>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "groups",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControlGroup[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FormControl",
            "id": "class-FormControl-ef85492b7ba514adc4ee321df1821f8613686c0df631bd919898ab83e51f9620b4c2d59f8089c96d1ffff8f4038e4258c02103859bc896c6e9088bf08c820477",
            "file": "src/app/controls/form/form-group/form-control/form-control.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class FormControl {\r\n  control: any;\r\n  classes: string;\r\n  formControlName: string;\r\n\r\n  constructor(init?: Partial<FormControl>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<FormControl>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<FormControl>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "formControlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FormControlGroup",
            "id": "class-FormControlGroup-c6e442b18fbc96e25368733b3ada87d41508c3e41014916410fe5bec8f27951d5fe044316574903fb24f18564777341370a69397a589dc71b02bc5c93c90b9f1",
            "file": "src/app/controls/form/form-group/form-group.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { FormControl } from './form-control/form-control';\r\n\r\nexport class FormControlGroup {\r\n  title: string;\r\n  subtitle: string;\r\n  controls: FormControl[];\r\n\r\n  constructor(init?: Partial<FormControlGroup>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<FormControlGroup>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<FormControlGroup>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "controls",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "subtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ItemGroup",
            "id": "class-ItemGroup-65e33e0c52b69ddf548375900306d115327bbb72e0d5de7d7bc9f4853c365c29a60021819a932318335b7762116392a199c875ffbf6b252c006b82673c112aed",
            "file": "src/app/layout/main/items/items-groups/item-group.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ItemGroup {\r\n\tname: string;\r\n\tprogress?: number;\r\n\ttotal_cards?: number;\r\n\titems: any[] = [];\r\n\tconstructor(init?:Partial<ItemGroup>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<ItemGroup>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<ItemGroup>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "progress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "total_cards",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Items",
            "id": "class-Items-f1910e3812549c76fef06a8e97329eb36b05279024ea47b331ae97be16cbcc73a0225db292e446ecfa1caa41b3c6707471820eec71b0e7bf62ebf6bd08013c46",
            "file": "src/app/layout/main/items/items.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ItemsHeader } from './items-header/items-header';\r\nimport { ItemsFooter } from './items-footer/items-footer';\r\nimport { ItemsFilter, ItemDisplayType } from './items-filter/items-filter';\r\nimport { Button } from '@app/controls/button/button';\r\nimport { ItemGroup } from './items-groups/item-group';\r\nimport { Icons } from '@app/models';\r\n\r\nexport class Items {\r\n\tshowHeader: boolean = true;\r\n\tshowFilters: boolean = true;\r\n\tshowFooter: boolean = true;\r\n\theader: ItemsHeader = new ItemsHeader();\r\n\tfilter: ItemsFilter = new ItemsFilter();\r\n\tfooter: ItemsFooter = new ItemsFooter();\r\n\r\n\titemClasses: string;\r\n\r\n\titemDisplayType: ItemDisplayType = ItemDisplayType.grid;\r\n\titemGroups: ItemGroup[] = [];\r\n\tgetItems: (_this: any) => void;\r\n\r\n\t_this: any;\r\n\r\n\tbuttonNoResults: Button;\r\n\tnoResults: string = \"No items found\";\r\n\tnoResultsIcon: string = Icons.archive;\r\n\tnoResultsImage: string;\r\n\r\n    constructor(init?:Partial<Items>) {\r\n\t\tObject.assign(this, init);\r\n\t\tthis.header.getItems = this.getItems;\r\n\t\tthis.footer.getItems = this.getItems;\r\n\t\tthis.header._this = this._this;\r\n\t\tthis.footer._this = this._this;\r\n\t}\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Items>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Items>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_this",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "buttonNoResults",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "filter",
                    "defaultValue": "new ItemsFilter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemsFilter",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "footer",
                    "defaultValue": "new ItemsFooter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemsFooter",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "getItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "header",
                    "defaultValue": "new ItemsHeader()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemsHeader",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "itemClasses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "itemDisplayType",
                    "defaultValue": "ItemDisplayType.grid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemDisplayType",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "itemGroups",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemGroup[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "noResults",
                    "defaultValue": "\"No items found\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "noResultsIcon",
                    "defaultValue": "Icons.archive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "noResultsImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "showFilters",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "showFooter",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "showHeader",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ItemsFilter",
            "id": "class-ItemsFilter-c3869ddd9cbf2edc4269b542255afa71adc1126da2c429c7f9b5a502753a0013b4350100cbf05164e16628807cf8dd956965741ea0f8b23e8e6c5932e4484fcf",
            "file": "src/app/layout/main/items/items-filter/items-filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Textbox  } from '@app/controls/textbox';\r\nimport { Select, SelectOptionGroup, SelectOption } from '@app/controls/select';\r\nimport { Menu, MenuItem } from '@app/controls/menu';\r\nimport { Icons } from '@app/models/icons';\r\n\r\nexport enum ItemDisplayType {\r\n\tgrid = \"Grid\",\r\n\tlist = \"List\",\r\n}\r\n\r\nexport class ItemsFilter {\r\n\r\n\t// Values\r\n\tdisplayMode: ItemDisplayType = ItemDisplayType.grid;\r\n\tshowGridDisplayMode: boolean = true;\r\n\tshowListDisplayMode: boolean = true;\r\n\tshowSimpleDisplayMode: boolean = false;\r\n\tshowVisualDisplayMode: boolean = false;\r\n\tshowSort: boolean = true;\r\n\r\n\t// Controls\r\n\ttextboxSearch: Textbox;\r\n\tselectSortBy: Select;\r\n\tselectSortDirection: Select;\r\n\tmenuDisplayMode: Menu;\r\n\tmenuItemGridDisplayMode: MenuItem = new MenuItem();\r\n\tmenuItemListDisplayMode: MenuItem = new MenuItem();\r\n\tmenuItemSimpleDisplayMode: MenuItem = new MenuItem();\r\n\tmenuItemVisualDisplayMode: MenuItem = new MenuItem();\r\n\r\n    constructor(init?:Partial<ItemsFilter>) {\r\n\t\tObject.assign(this, init);\r\n\r\n\t\t// Search\r\n\t\tthis.textboxSearch = new Textbox({\r\n\t\t\ticon: Icons.search,\r\n\t\t\tplaceholder: \"Search items...\",\r\n\t\t\tclearable: true,\r\n\t\t\tautoComplete: false\r\n\t\t});\r\n\r\n\t\t// Sort by\r\n\t\tthis.selectSortBy = new Select({\r\n\t\t\tclasses: \"square-right\",\r\n\t\t\toptionGroups: [\r\n\t\t\t\tnew SelectOptionGroup({\r\n\t\t\t\t\tlabel: \"Sort By\",\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t});\r\n\r\n\t\t// Sort direction\r\n\t\tthis.selectSortDirection = new Select({\r\n\t\t\tclasses: \"square-left\",\r\n\t\t\tvalue: \"asc\",\r\n\t\t\toptionGroups: [\r\n\t\t\t\tnew SelectOptionGroup({\r\n\t\t\t\t\tlabel: \"Sort Direction\",\r\n\t\t\t\t\toptions: [\r\n\t\t\t\t\t\tnew SelectOption({\r\n\t\t\t\t\t\t\ttext: \"Asc\",\r\n\t\t\t\t\t\t\tvalue: \"asc\"\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tnew SelectOption({\r\n\t\t\t\t\t\t\ttext: \"Desc\",\r\n\t\t\t\t\t\t\tvalue: \"desc\"\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n\r\n\r\n\tsetDisplayMode(type: ItemDisplayType) {\r\n\t\tthis.displayMode = type;\r\n\t\tthis.menuItemGridDisplayMode.active = false;\r\n\t\tthis.menuItemListDisplayMode.active = false;\r\n\t\tthis.menuItemSimpleDisplayMode.active = false;\r\n\t\tthis.menuItemVisualDisplayMode.active = false;\r\n\t\tswitch (type) {\r\n\t\t\tcase ItemDisplayType.grid: {\r\n\t\t\t\tthis.menuItemGridDisplayMode.active = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase ItemDisplayType.list: {\r\n\t\t\t\tthis.menuItemListDisplayMode.active = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<ItemsFilter>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<ItemsFilter>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "displayMode",
                    "defaultValue": "ItemDisplayType.grid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemDisplayType",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "menuDisplayMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Menu",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "menuItemGridDisplayMode",
                    "defaultValue": "new MenuItem()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "menuItemListDisplayMode",
                    "defaultValue": "new MenuItem()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "menuItemSimpleDisplayMode",
                    "defaultValue": "new MenuItem()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "menuItemVisualDisplayMode",
                    "defaultValue": "new MenuItem()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "selectSortBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Select",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "selectSortDirection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Select",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "showGridDisplayMode",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "showListDisplayMode",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "showSimpleDisplayMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "showSort",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "showVisualDisplayMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "textboxSearch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methods": [
                {
                    "name": "setDisplayMode",
                    "args": [
                        {
                            "name": "type",
                            "type": "ItemDisplayType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "ItemDisplayType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ItemsFooter",
            "id": "class-ItemsFooter-18a9d789ae3de801a56ddc311abb0462da4df780c3c5d764a805a42a79859df53d855d035388c94b27f7367c8e78009d0742b18d397dbac4e3e9dac9b244f365",
            "file": "src/app/layout/main/items/items-footer/items-footer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Select } from '@app/controls/select';\r\nimport { Button } from '@app/controls/button';\r\nimport { Textbox } from '@app/controls/textbox';\r\n\r\nexport class ItemsFooter {\r\n\t// Values\r\n\tpage: number = 1;\r\n\tpageSize: number = 24;\r\n\ttotalPages: number;\r\n\ttotalItems: number;\r\n\r\n\t// Controls\r\n\tselectPageSize: Select = new Select();\r\n\tbuttonPrev: Button = new Button({\r\n\t\tclasses: 'square-right',\r\n\t});\r\n\tbuttonNext: Button = new Button({\r\n\t\tclasses: 'square-left',\r\n\t});\r\n\ttextboxPage: Textbox = new Textbox({\r\n\t\tclasses: 'square',\r\n\t});\r\n\r\n\t_this: any;\r\n\tgetItems: (_this: any) => void;\r\n\r\n\tconstructor(init?: Partial<ItemsFooter>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<ItemsFooter>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<ItemsFooter>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_this",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "buttonNext",
                    "defaultValue": "new Button({\r\n\t\tclasses: 'square-left',\r\n\t})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "buttonPrev",
                    "defaultValue": "new Button({\r\n\t\tclasses: 'square-right',\r\n\t})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "getItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "page",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "pageSize",
                    "defaultValue": "24",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "selectPageSize",
                    "defaultValue": "new Select()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Select",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "textboxPage",
                    "defaultValue": "new Textbox({\r\n\t\tclasses: 'square',\r\n\t})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "totalItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "totalPages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ItemsHeader",
            "id": "class-ItemsHeader-b356d41ebdd2644fe5404dc24849821e88d6f7628ea0ff13115b3fa46af5d455587be392da8e9051b827be59e69263c7c42bf19d3d1b48566752eaa0ef070911",
            "file": "src/app/layout/main/items/items-header/items-header.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Menu } from '@app/controls/menu';\r\nimport { Tag } from '@app/controls/tag';\r\nimport { Icons } from '@app/models/icons';\r\nimport { Button } from '@app/controls/button';\r\nimport { Toggle } from '@app/controls/toggle';\r\nimport { ProgressBar } from '@app/controls/progress-bar/progress-bar';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\n\r\nexport class ItemsHeader {\r\n  title: string;\r\n  titleRoute: string;\r\n  subtitle: string;\r\n  tags: Tag[] = [];\r\n  symbol: string;\r\n  symbolRarity: string;\r\n  icon: IconProp;\r\n  price: number;\r\n  menu: Menu;\r\n  button: Button;\r\n  toggle: Toggle;\r\n  progressBar: ProgressBar;\r\n\r\n  _this: any;\r\n  getItems: (_this: any) => void;\r\n\r\n  constructor(init?: Partial<ItemsHeader>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<ItemsHeader>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<ItemsHeader>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_this",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "getItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconProp",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Menu",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "progressBar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProgressBar",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "subtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "symbol",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "symbolRarity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "tags",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tag[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "titleRoute",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "toggle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Toggle",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Menu",
            "id": "class-Menu-efa66d6729d5cdf7fa640b8552083af4426abd7dad0b74766a0fef5d7d9a38d79fec16aa521bfc50ea8dbf3401f08f9dd1d24ebf49dd73705387d05d0de20c63",
            "file": "src/app/controls/menu/menu.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Size } from '@app/models/size';\r\nimport { Textbox } from '../textbox';\r\nimport { Button } from '../button';\r\nimport { Icons } from '@app/models';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\n\r\nexport class Menu {\r\n  items: MenuItem[] = [];\r\n  unfilteredItems: MenuItem[] = [];\r\n  horizontal: boolean = false;\r\n  round: boolean = true;\r\n  tabs: boolean = false;\r\n  classes?: string;\r\n  size: Size = Size.medium;\r\n  minHeight?: string;\r\n  minWidth?: string;\r\n  maxHeight?: string;\r\n  maxWidth?: string;\r\n  borders: boolean = false;\r\n  clearActiveClickOutside: boolean = true;\r\n  textboxSearch: Textbox;\r\n  search: boolean;\r\n  dark: boolean;\r\n\r\n  constructor(init?: Partial<Menu>) {\r\n    Object.assign(this, init);\r\n    this.setupControls();\r\n  }\r\n\r\n  setupControls() {\r\n    this.textboxSearch = new Textbox({\r\n      icon: Icons.search,\r\n      clearable: true,\r\n      placeholder: 'Search...',\r\n      keydownEnter: (value) => {\r\n        this.searchItems(value);\r\n      },\r\n      clickIcon: (value) => {\r\n        this.searchItems(value);\r\n      },\r\n    });\r\n  }\r\n\r\n  searchItems(query: string) {\r\n    if (query.length) {\r\n      if (!this.unfilteredItems.length) {\r\n        this.unfilteredItems = this.items;\r\n      }\r\n      this.items = this.items.filter((menuItem: MenuItem) => {\r\n        return (\r\n          menuItem &&\r\n          menuItem.text &&\r\n          menuItem.text.toLowerCase().includes(query.toLowerCase())\r\n        );\r\n      });\r\n    } else {\r\n      this.items = this.unfilteredItems;\r\n    }\r\n  }\r\n\r\n  clearActive() {\r\n    if (this.items.length) {\r\n      this.items.forEach((item) => {\r\n        item.active = false;\r\n        if (item.menu && item.menu.items.length) {\r\n          item.menu.clearActive();\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport class MenuItem {\r\n  text?: string;\r\n  route?: string;\r\n  href?: string;\r\n  icon?: IconProp;\r\n  active: boolean = false;\r\n  menu?: Menu;\r\n  price?: number;\r\n  symbol?: string;\r\n  classes?: string;\r\n  classesLink?: string;\r\n  textbox?: Textbox;\r\n  button?: Button;\r\n  disabled: boolean;\r\n  separator: boolean = false;\r\n  target?: string;\r\n  exactMatch: boolean = false;\r\n\r\n  public click: (event: any) => void;\r\n\r\n  public constructor(init?: Partial<MenuItem>) {\r\n    Object.assign(this, init);\r\n    if (this.href) {\r\n      this.target = '_blank';\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Menu>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Menu>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "borders",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "clearActiveClickOutside",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "dark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "horizontal",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "maxHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "maxWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "minHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "minWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "round",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "search",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "size",
                    "defaultValue": "Size.medium",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Size",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "tabs",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "textboxSearch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "unfilteredItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "clearActive",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "searchItems",
                    "args": [
                        {
                            "name": "query",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setupControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MenuItem",
            "id": "class-MenuItem-efa66d6729d5cdf7fa640b8552083af4426abd7dad0b74766a0fef5d7d9a38d79fec16aa521bfc50ea8dbf3401f08f9dd1d24ebf49dd73705387d05d0de20c63",
            "file": "src/app/controls/menu/menu.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Size } from '@app/models/size';\r\nimport { Textbox } from '../textbox';\r\nimport { Button } from '../button';\r\nimport { Icons } from '@app/models';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\n\r\nexport class Menu {\r\n  items: MenuItem[] = [];\r\n  unfilteredItems: MenuItem[] = [];\r\n  horizontal: boolean = false;\r\n  round: boolean = true;\r\n  tabs: boolean = false;\r\n  classes?: string;\r\n  size: Size = Size.medium;\r\n  minHeight?: string;\r\n  minWidth?: string;\r\n  maxHeight?: string;\r\n  maxWidth?: string;\r\n  borders: boolean = false;\r\n  clearActiveClickOutside: boolean = true;\r\n  textboxSearch: Textbox;\r\n  search: boolean;\r\n  dark: boolean;\r\n\r\n  constructor(init?: Partial<Menu>) {\r\n    Object.assign(this, init);\r\n    this.setupControls();\r\n  }\r\n\r\n  setupControls() {\r\n    this.textboxSearch = new Textbox({\r\n      icon: Icons.search,\r\n      clearable: true,\r\n      placeholder: 'Search...',\r\n      keydownEnter: (value) => {\r\n        this.searchItems(value);\r\n      },\r\n      clickIcon: (value) => {\r\n        this.searchItems(value);\r\n      },\r\n    });\r\n  }\r\n\r\n  searchItems(query: string) {\r\n    if (query.length) {\r\n      if (!this.unfilteredItems.length) {\r\n        this.unfilteredItems = this.items;\r\n      }\r\n      this.items = this.items.filter((menuItem: MenuItem) => {\r\n        return (\r\n          menuItem &&\r\n          menuItem.text &&\r\n          menuItem.text.toLowerCase().includes(query.toLowerCase())\r\n        );\r\n      });\r\n    } else {\r\n      this.items = this.unfilteredItems;\r\n    }\r\n  }\r\n\r\n  clearActive() {\r\n    if (this.items.length) {\r\n      this.items.forEach((item) => {\r\n        item.active = false;\r\n        if (item.menu && item.menu.items.length) {\r\n          item.menu.clearActive();\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport class MenuItem {\r\n  text?: string;\r\n  route?: string;\r\n  href?: string;\r\n  icon?: IconProp;\r\n  active: boolean = false;\r\n  menu?: Menu;\r\n  price?: number;\r\n  symbol?: string;\r\n  classes?: string;\r\n  classesLink?: string;\r\n  textbox?: Textbox;\r\n  button?: Button;\r\n  disabled: boolean;\r\n  separator: boolean = false;\r\n  target?: string;\r\n  exactMatch: boolean = false;\r\n\r\n  public click: (event: any) => void;\r\n\r\n  public constructor(init?: Partial<MenuItem>) {\r\n    Object.assign(this, init);\r\n    if (this.href) {\r\n      this.target = '_blank';\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<MenuItem>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 91,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<MenuItem>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "active",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": true,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "classesLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "click",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "exactMatch",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "href",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconProp",
                    "optional": true,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Menu",
                    "optional": true,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "separator",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "symbol",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "textbox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": true,
                    "description": "",
                    "line": 84
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Notification",
            "id": "class-Notification-da30b321d7b98a02349dc1e2d23cca4a95b1b798e99fff1e9c45acb0cba729468ef32da150ffd61ee2fdd4f62d89a5c797d48809c1dcb43f7dc481f21a16850b",
            "file": "src/app/controls/notifications/notification.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Icons } from '@app/models/icons';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport { AlertType } from '../alert/alert';\r\n\r\nexport class Notification {\r\n  id: number;\r\n  message: string;\r\n  alertType: AlertType;\r\n  icon: IconProp;\r\n  hidden: boolean;\r\n  duration?: number; // Null duration = dismiss required\r\n  destroy: () => void;\r\n  click = () => {};\r\n\r\n  public constructor(init?: Partial<Notification>) {\r\n    Object.assign(this, init);\r\n    this.setupDefaults();\r\n  }\r\n\r\n  setupDefaults() {\r\n    const defaultDuration = 3500;\r\n    switch (this.alertType) {\r\n      case AlertType.success: {\r\n        if (!this.duration) {\r\n          this.duration = defaultDuration;\r\n        }\r\n        this.icon = Icons.check;\r\n        this.click = () => {\r\n          this.hide();\r\n        };\r\n        break;\r\n      }\r\n      case AlertType.info: {\r\n        this.icon = Icons.info;\r\n        break;\r\n      }\r\n      case AlertType.warning: {\r\n        if (!this.duration) {\r\n          this.duration = defaultDuration;\r\n        }\r\n        this.icon = Icons.warning;\r\n        this.click = () => {\r\n          this.hide();\r\n        };\r\n        this.icon = Icons.warning;\r\n        break;\r\n      }\r\n      case AlertType.error: {\r\n        this.icon = Icons.error;\r\n        break;\r\n      }\r\n    }\r\n    if (this.duration) {\r\n      this.startTimer();\r\n    }\r\n  }\r\n\r\n  startTimer() {\r\n    setTimeout(() => {\r\n      this.hide();\r\n    }, this.duration);\r\n  }\r\n\r\n  hide() {\r\n    this.hidden = true;\r\n    setTimeout(() => {\r\n      if (this.destroy) {\r\n        this.destroy();\r\n      }\r\n    }, 1000);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Notification>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 13,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Notification>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "alertType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AlertType",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "click",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "destroy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "duration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconProp",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupDefaults",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "startTimer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Pokemon",
            "id": "class-Pokemon-bd1c947df328a2ab859d6aac706bc8a32409e6526e1e629ffd0df63f118593b756cf61b3e155fab62c205bfd4884e064cfecc0fec45b86a7326da4f3ded4c18e",
            "file": "src/app/pages/pokemons/pokemon/pokemon.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Select, SelectOption, SelectOptionGroup } from '@app/controls';\r\n\r\nexport class EvolutionChain {\r\n  id: number;\r\n  name: string;\r\n  national_dex_number: number;\r\n  sprite: string;\r\n  slug: string;\r\n}\r\n\r\nexport class PokemonGeneration {\r\n  id: number;\r\n  name: string;\r\n  region: string;\r\n  constructor(init?: Partial<PokemonGeneration>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport class Pokemon {\r\n  id: number;\r\n  name: string;\r\n  generation: PokemonGeneration;\r\n  national_dex_number: number;\r\n  order: number;\r\n  is_baby: boolean;\r\n  is_legendary: boolean;\r\n  is_mythical: boolean;\r\n  color: string;\r\n  shape: string;\r\n  flavor_texts: string;\r\n  evolves_from_pokemon: number;\r\n  image: string;\r\n  slug: string;\r\n  variants: PokemonVariant[] = [];\r\n  variant: PokemonVariant;\r\n  sprites: PokemonSprites;\r\n  types: string[] = [];\r\n  height: number;\r\n  weight: number;\r\n  evolution_chain: EvolutionChain[] = [];\r\n\r\n  route: string;\r\n\r\n  constructor(init?: Partial<Pokemon>) {\r\n    Object.assign(this, init);\r\n\r\n    // Route\r\n    this.route = `/pokemon/${this.slug}`;\r\n\r\n    // Initalize variants\r\n    if (init?.variants) {\r\n      this.variants = init.variants?.map(\r\n        (variant: any) => new PokemonVariant(variant)\r\n      );\r\n    }\r\n    if (init?.variant) {\r\n      this.variant = new PokemonVariant(this.variant);\r\n      this.variant.pokemon = this;\r\n    }\r\n  }\r\n}\r\n\r\nexport class PokemonVariant {\r\n  progress: number = 80;\r\n  total_cards: number = 100;\r\n  id: number;\r\n  pokemon: Pokemon;\r\n  name: string;\r\n  slug: string;\r\n  is_default: boolean;\r\n  sprites: PokemonSprites;\r\n  height: number;\r\n  weight: number;\r\n  types: string[] = [];\r\n  previous_pokemon: string;\r\n  next_pokemon: string;\r\n  other_variants: PokemonVariant[] = [];\r\n\r\n  route: string;\r\n\r\n  constructor(init?: Partial<PokemonVariant>) {\r\n    Object.assign(this, init);\r\n\r\n    // Route\r\n    if (!this.slug && this.name)\r\n      this.slug = this.name.toLowerCase().replace(' ', '-');\r\n    this.route = `/pokemon/${this.slug}`;\r\n\r\n    // Init sprites\r\n    this.sprites = new PokemonSprites(init?.sprites);\r\n\r\n    if (init?.other_variants)\r\n      this.other_variants = init.other_variants.map(\r\n        (variant) => new PokemonVariant(variant)\r\n      );\r\n  }\r\n}\r\n\r\nexport class PokemonSprites {\r\n  default?: string;\r\n  official?: string;\r\n  shiny?: string;\r\n  icon?: string;\r\n  animated?: string;\r\n\r\n  constructor(init?: Partial<PokemonSprites>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport function SetSortByPokemon(select: Select) {\r\n  select.optionGroups[0] = new SelectOptionGroup({\r\n    label: 'Sort By',\r\n    options: [\r\n      new SelectOption({\r\n        text: 'Number',\r\n        value: 'pokemon.order',\r\n      }),\r\n      new SelectOption({\r\n        text: 'Name',\r\n        value: 'pokemon_variants.name',\r\n      }),\r\n      new SelectOption({\r\n        text: 'Weight',\r\n        value: 'pokemon_variants.weight',\r\n      }),\r\n      new SelectOption({\r\n        text: 'Height',\r\n        value: 'pokemon_variants.height',\r\n      }),\r\n    ],\r\n  });\r\n  select.value = 'pokemon.order';\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Pokemon>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Pokemon>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "evolution_chain",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EvolutionChain[]",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "evolves_from_pokemon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "flavor_texts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "generation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PokemonGeneration",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "is_baby",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "is_legendary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "is_mythical",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "national_dex_number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "shape",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "slug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "sprites",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PokemonSprites",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "types",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PokemonVariant",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "variants",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PokemonVariant[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "weight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PokemonGeneration",
            "id": "class-PokemonGeneration-bd1c947df328a2ab859d6aac706bc8a32409e6526e1e629ffd0df63f118593b756cf61b3e155fab62c205bfd4884e064cfecc0fec45b86a7326da4f3ded4c18e",
            "file": "src/app/pages/pokemons/pokemon/pokemon.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Select, SelectOption, SelectOptionGroup } from '@app/controls';\r\n\r\nexport class EvolutionChain {\r\n  id: number;\r\n  name: string;\r\n  national_dex_number: number;\r\n  sprite: string;\r\n  slug: string;\r\n}\r\n\r\nexport class PokemonGeneration {\r\n  id: number;\r\n  name: string;\r\n  region: string;\r\n  constructor(init?: Partial<PokemonGeneration>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport class Pokemon {\r\n  id: number;\r\n  name: string;\r\n  generation: PokemonGeneration;\r\n  national_dex_number: number;\r\n  order: number;\r\n  is_baby: boolean;\r\n  is_legendary: boolean;\r\n  is_mythical: boolean;\r\n  color: string;\r\n  shape: string;\r\n  flavor_texts: string;\r\n  evolves_from_pokemon: number;\r\n  image: string;\r\n  slug: string;\r\n  variants: PokemonVariant[] = [];\r\n  variant: PokemonVariant;\r\n  sprites: PokemonSprites;\r\n  types: string[] = [];\r\n  height: number;\r\n  weight: number;\r\n  evolution_chain: EvolutionChain[] = [];\r\n\r\n  route: string;\r\n\r\n  constructor(init?: Partial<Pokemon>) {\r\n    Object.assign(this, init);\r\n\r\n    // Route\r\n    this.route = `/pokemon/${this.slug}`;\r\n\r\n    // Initalize variants\r\n    if (init?.variants) {\r\n      this.variants = init.variants?.map(\r\n        (variant: any) => new PokemonVariant(variant)\r\n      );\r\n    }\r\n    if (init?.variant) {\r\n      this.variant = new PokemonVariant(this.variant);\r\n      this.variant.pokemon = this;\r\n    }\r\n  }\r\n}\r\n\r\nexport class PokemonVariant {\r\n  progress: number = 80;\r\n  total_cards: number = 100;\r\n  id: number;\r\n  pokemon: Pokemon;\r\n  name: string;\r\n  slug: string;\r\n  is_default: boolean;\r\n  sprites: PokemonSprites;\r\n  height: number;\r\n  weight: number;\r\n  types: string[] = [];\r\n  previous_pokemon: string;\r\n  next_pokemon: string;\r\n  other_variants: PokemonVariant[] = [];\r\n\r\n  route: string;\r\n\r\n  constructor(init?: Partial<PokemonVariant>) {\r\n    Object.assign(this, init);\r\n\r\n    // Route\r\n    if (!this.slug && this.name)\r\n      this.slug = this.name.toLowerCase().replace(' ', '-');\r\n    this.route = `/pokemon/${this.slug}`;\r\n\r\n    // Init sprites\r\n    this.sprites = new PokemonSprites(init?.sprites);\r\n\r\n    if (init?.other_variants)\r\n      this.other_variants = init.other_variants.map(\r\n        (variant) => new PokemonVariant(variant)\r\n      );\r\n  }\r\n}\r\n\r\nexport class PokemonSprites {\r\n  default?: string;\r\n  official?: string;\r\n  shiny?: string;\r\n  icon?: string;\r\n  animated?: string;\r\n\r\n  constructor(init?: Partial<PokemonSprites>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport function SetSortByPokemon(select: Select) {\r\n  select.optionGroups[0] = new SelectOptionGroup({\r\n    label: 'Sort By',\r\n    options: [\r\n      new SelectOption({\r\n        text: 'Number',\r\n        value: 'pokemon.order',\r\n      }),\r\n      new SelectOption({\r\n        text: 'Name',\r\n        value: 'pokemon_variants.name',\r\n      }),\r\n      new SelectOption({\r\n        text: 'Weight',\r\n        value: 'pokemon_variants.weight',\r\n      }),\r\n      new SelectOption({\r\n        text: 'Height',\r\n        value: 'pokemon_variants.height',\r\n      }),\r\n    ],\r\n  });\r\n  select.value = 'pokemon.order';\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<PokemonGeneration>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<PokemonGeneration>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "region",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PokemonSprites",
            "id": "class-PokemonSprites-bd1c947df328a2ab859d6aac706bc8a32409e6526e1e629ffd0df63f118593b756cf61b3e155fab62c205bfd4884e064cfecc0fec45b86a7326da4f3ded4c18e",
            "file": "src/app/pages/pokemons/pokemon/pokemon.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Select, SelectOption, SelectOptionGroup } from '@app/controls';\r\n\r\nexport class EvolutionChain {\r\n  id: number;\r\n  name: string;\r\n  national_dex_number: number;\r\n  sprite: string;\r\n  slug: string;\r\n}\r\n\r\nexport class PokemonGeneration {\r\n  id: number;\r\n  name: string;\r\n  region: string;\r\n  constructor(init?: Partial<PokemonGeneration>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport class Pokemon {\r\n  id: number;\r\n  name: string;\r\n  generation: PokemonGeneration;\r\n  national_dex_number: number;\r\n  order: number;\r\n  is_baby: boolean;\r\n  is_legendary: boolean;\r\n  is_mythical: boolean;\r\n  color: string;\r\n  shape: string;\r\n  flavor_texts: string;\r\n  evolves_from_pokemon: number;\r\n  image: string;\r\n  slug: string;\r\n  variants: PokemonVariant[] = [];\r\n  variant: PokemonVariant;\r\n  sprites: PokemonSprites;\r\n  types: string[] = [];\r\n  height: number;\r\n  weight: number;\r\n  evolution_chain: EvolutionChain[] = [];\r\n\r\n  route: string;\r\n\r\n  constructor(init?: Partial<Pokemon>) {\r\n    Object.assign(this, init);\r\n\r\n    // Route\r\n    this.route = `/pokemon/${this.slug}`;\r\n\r\n    // Initalize variants\r\n    if (init?.variants) {\r\n      this.variants = init.variants?.map(\r\n        (variant: any) => new PokemonVariant(variant)\r\n      );\r\n    }\r\n    if (init?.variant) {\r\n      this.variant = new PokemonVariant(this.variant);\r\n      this.variant.pokemon = this;\r\n    }\r\n  }\r\n}\r\n\r\nexport class PokemonVariant {\r\n  progress: number = 80;\r\n  total_cards: number = 100;\r\n  id: number;\r\n  pokemon: Pokemon;\r\n  name: string;\r\n  slug: string;\r\n  is_default: boolean;\r\n  sprites: PokemonSprites;\r\n  height: number;\r\n  weight: number;\r\n  types: string[] = [];\r\n  previous_pokemon: string;\r\n  next_pokemon: string;\r\n  other_variants: PokemonVariant[] = [];\r\n\r\n  route: string;\r\n\r\n  constructor(init?: Partial<PokemonVariant>) {\r\n    Object.assign(this, init);\r\n\r\n    // Route\r\n    if (!this.slug && this.name)\r\n      this.slug = this.name.toLowerCase().replace(' ', '-');\r\n    this.route = `/pokemon/${this.slug}`;\r\n\r\n    // Init sprites\r\n    this.sprites = new PokemonSprites(init?.sprites);\r\n\r\n    if (init?.other_variants)\r\n      this.other_variants = init.other_variants.map(\r\n        (variant) => new PokemonVariant(variant)\r\n      );\r\n  }\r\n}\r\n\r\nexport class PokemonSprites {\r\n  default?: string;\r\n  official?: string;\r\n  shiny?: string;\r\n  icon?: string;\r\n  animated?: string;\r\n\r\n  constructor(init?: Partial<PokemonSprites>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport function SetSortByPokemon(select: Select) {\r\n  select.optionGroups[0] = new SelectOptionGroup({\r\n    label: 'Sort By',\r\n    options: [\r\n      new SelectOption({\r\n        text: 'Number',\r\n        value: 'pokemon.order',\r\n      }),\r\n      new SelectOption({\r\n        text: 'Name',\r\n        value: 'pokemon_variants.name',\r\n      }),\r\n      new SelectOption({\r\n        text: 'Weight',\r\n        value: 'pokemon_variants.weight',\r\n      }),\r\n      new SelectOption({\r\n        text: 'Height',\r\n        value: 'pokemon_variants.height',\r\n      }),\r\n    ],\r\n  });\r\n  select.value = 'pokemon.order';\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<PokemonSprites>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 105,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<PokemonSprites>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "animated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 105
                },
                {
                    "name": "default",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "official",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 102
                },
                {
                    "name": "shiny",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 103
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PokemonVariant",
            "id": "class-PokemonVariant-bd1c947df328a2ab859d6aac706bc8a32409e6526e1e629ffd0df63f118593b756cf61b3e155fab62c205bfd4884e064cfecc0fec45b86a7326da4f3ded4c18e",
            "file": "src/app/pages/pokemons/pokemon/pokemon.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Select, SelectOption, SelectOptionGroup } from '@app/controls';\r\n\r\nexport class EvolutionChain {\r\n  id: number;\r\n  name: string;\r\n  national_dex_number: number;\r\n  sprite: string;\r\n  slug: string;\r\n}\r\n\r\nexport class PokemonGeneration {\r\n  id: number;\r\n  name: string;\r\n  region: string;\r\n  constructor(init?: Partial<PokemonGeneration>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport class Pokemon {\r\n  id: number;\r\n  name: string;\r\n  generation: PokemonGeneration;\r\n  national_dex_number: number;\r\n  order: number;\r\n  is_baby: boolean;\r\n  is_legendary: boolean;\r\n  is_mythical: boolean;\r\n  color: string;\r\n  shape: string;\r\n  flavor_texts: string;\r\n  evolves_from_pokemon: number;\r\n  image: string;\r\n  slug: string;\r\n  variants: PokemonVariant[] = [];\r\n  variant: PokemonVariant;\r\n  sprites: PokemonSprites;\r\n  types: string[] = [];\r\n  height: number;\r\n  weight: number;\r\n  evolution_chain: EvolutionChain[] = [];\r\n\r\n  route: string;\r\n\r\n  constructor(init?: Partial<Pokemon>) {\r\n    Object.assign(this, init);\r\n\r\n    // Route\r\n    this.route = `/pokemon/${this.slug}`;\r\n\r\n    // Initalize variants\r\n    if (init?.variants) {\r\n      this.variants = init.variants?.map(\r\n        (variant: any) => new PokemonVariant(variant)\r\n      );\r\n    }\r\n    if (init?.variant) {\r\n      this.variant = new PokemonVariant(this.variant);\r\n      this.variant.pokemon = this;\r\n    }\r\n  }\r\n}\r\n\r\nexport class PokemonVariant {\r\n  progress: number = 80;\r\n  total_cards: number = 100;\r\n  id: number;\r\n  pokemon: Pokemon;\r\n  name: string;\r\n  slug: string;\r\n  is_default: boolean;\r\n  sprites: PokemonSprites;\r\n  height: number;\r\n  weight: number;\r\n  types: string[] = [];\r\n  previous_pokemon: string;\r\n  next_pokemon: string;\r\n  other_variants: PokemonVariant[] = [];\r\n\r\n  route: string;\r\n\r\n  constructor(init?: Partial<PokemonVariant>) {\r\n    Object.assign(this, init);\r\n\r\n    // Route\r\n    if (!this.slug && this.name)\r\n      this.slug = this.name.toLowerCase().replace(' ', '-');\r\n    this.route = `/pokemon/${this.slug}`;\r\n\r\n    // Init sprites\r\n    this.sprites = new PokemonSprites(init?.sprites);\r\n\r\n    if (init?.other_variants)\r\n      this.other_variants = init.other_variants.map(\r\n        (variant) => new PokemonVariant(variant)\r\n      );\r\n  }\r\n}\r\n\r\nexport class PokemonSprites {\r\n  default?: string;\r\n  official?: string;\r\n  shiny?: string;\r\n  icon?: string;\r\n  animated?: string;\r\n\r\n  constructor(init?: Partial<PokemonSprites>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport function SetSortByPokemon(select: Select) {\r\n  select.optionGroups[0] = new SelectOptionGroup({\r\n    label: 'Sort By',\r\n    options: [\r\n      new SelectOption({\r\n        text: 'Number',\r\n        value: 'pokemon.order',\r\n      }),\r\n      new SelectOption({\r\n        text: 'Name',\r\n        value: 'pokemon_variants.name',\r\n      }),\r\n      new SelectOption({\r\n        text: 'Weight',\r\n        value: 'pokemon_variants.weight',\r\n      }),\r\n      new SelectOption({\r\n        text: 'Height',\r\n        value: 'pokemon_variants.height',\r\n      }),\r\n    ],\r\n  });\r\n  select.value = 'pokemon.order';\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<PokemonVariant>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 80,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<PokemonVariant>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "is_default",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "next_pokemon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "other_variants",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PokemonVariant[]",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "pokemon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pokemon",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "previous_pokemon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "progress",
                    "defaultValue": "80",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "slug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "sprites",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PokemonSprites",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "total_cards",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "types",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "weight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 74
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProgressBar",
            "id": "class-ProgressBar-f3bee24235bad8b1a779bcc598847396c58bbb65dc81978e14e1f57d0cdf2d5ed7ffc55c1644e05e4a9adebe0aefae6c930cfb7adc41d1c6e76b1771b9c5e936",
            "file": "src/app/controls/progress-bar/progress-bar.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ProgressBar {\r\n\ttotal: number;\r\n\tvalue: number;\r\n\r\n    constructor(init?:Partial<ProgressBar>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<ProgressBar>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<ProgressBar>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Scanner",
            "id": "class-Scanner-3135842f8a19f057400f6e50b6d64c11b2b7a5d252520e8305d59bec33b05753a197fd763b28a235aa75171b90f207f8b7f09b6843e2bf83d8dca5a2d9b4d6f7",
            "file": "src/app/pages/scanner/scanner.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ScanType } from '@app/pages/scanner/scanner.service';\r\n\r\nexport class Scanner {\r\n  type: ScanType;\r\n}\r\n",
            "properties": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScanType",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ScannerCard",
            "id": "class-ScannerCard-20ea032bed8e9714a92fe11870eff4193621d01df599b9de724481bf51d5ec0a86ce1d148a3fa1f3e2d3fd3798e0103382e9232212655115686e5bab4e17a009",
            "file": "src/app/pages/scanner/scanner-lists/scanner-list/scanner-card.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Card } from '@app/pages/cards/card/card';\r\n\r\nexport class ScannerCard extends Card {\r\n\tscan_id: number;\r\n}",
            "properties": [
                {
                    "name": "scan_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "artist",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "attacks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Attack[]",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "expansion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Expansion",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "has_first_edition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "has_reverse_holo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "has_shadowless",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "hp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 36,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "image_high_res",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 33,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "is_full_art",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "is_gold",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "is_promo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "is_shiny",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "last_prices",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardLastPrices",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "pokemon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pokemon",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "rarity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "retreat_cost",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "slug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "sub_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "super_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "tempId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "types",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "user_cards",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserCard[]",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "inheritance": {
                        "file": "Card"
                    }
                },
                {
                    "name": "weaknesses",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Weakness[]",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "inheritance": {
                        "file": "Card"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getCardNumber",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "Card"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "Card",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ScannerList",
            "id": "class-ScannerList-c79ea7fc0c585060eaa395150da0c40bfe47777faaa9ad851cf5b44d485a19cd3fef3844db0b077386094e025fbbe317d490516d5489ffc3839ad38b9de6ae98",
            "file": "src/app/pages/scanner/scanner-lists/scanner-list/scanner-list.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Card } from '@app/pages/cards';\r\n\r\nexport class ScannerList {\r\n\tcards: Card[] = [];\r\n\tdate_create: Date;\r\n\r\n    constructor(init?:Partial<ScannerList>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<ScannerList>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<ScannerList>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "cards",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "date_create",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Select",
            "id": "class-Select-2097f0275cc879c06a1ae100171cdb46db2cf475b418602e5cd62b393a90939ba02970508f3a850c9c8e302e723e9f1390b60823464f8e1fde812fc89aebb769",
            "file": "src/app/controls/select/select.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport { Size } from '@app/models';\r\n\r\nexport class Select {\r\n  label: string;\r\n  value: string;\r\n  values: string[] = [];\r\n  options: SelectOption[] = [];\r\n  optionsVisible: SelectOption[] = [];\r\n  optionGroups: SelectOptionGroup[] = [];\r\n  optionGroupsVisible: SelectOptionGroup[] = [];\r\n  classes: string;\r\n  dark: boolean;\r\n  multiple: boolean;\r\n  advancedSelect: boolean = false;\r\n  placeholder: string = 'Select option';\r\n  open: boolean;\r\n  searchValue: string;\r\n  size: Size;\r\n  change: (value: string) => void;\r\n\r\n  getSelectedOptions = () => {\r\n    const selectedOptions = this.options.filter((option) => option.selected);\r\n    const selectedOptionGroupOptions = this.optionGroups\r\n      .filter(\r\n        (optionGroup) =>\r\n          optionGroup.options.filter((option) => option.selected).length\r\n      )\r\n      .map((optionGroup) => {\r\n        const selectedGroup = optionGroup.options.filter(\r\n          (option) => option.selected\r\n        );\r\n        return selectedGroup && selectedGroup[0];\r\n      });\r\n    return [...selectedOptions, ...selectedOptionGroupOptions];\r\n  };\r\n\r\n  getUnselectedOptions = () =>\r\n    this.options.filter(\r\n      (option) =>\r\n        !option.selected &&\r\n        (!this.searchValue ||\r\n          this.searchValue.length <= 0 ||\r\n          option.text\r\n            .toLocaleLowerCase()\r\n            .includes(this.searchValue.toLocaleLowerCase()))\r\n    );\r\n\r\n  public constructor(init?: Partial<Select>) {\r\n    Object.assign(this, init);\r\n    this.optionGroupsVisible = this.optionGroups;\r\n    this.optionsVisible = this.options;\r\n  }\r\n}\r\n\r\nexport class SelectOption {\r\n  text: string;\r\n  value: string;\r\n  selected: boolean;\r\n  icon: IconProp;\r\n\r\n  public constructor(init?: Partial<SelectOption>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport class SelectOptionGroup {\r\n  label: string;\r\n  options: SelectOption[] = [];\r\n\r\n  public constructor(init?: Partial<SelectOptionGroup>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Select>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 47,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Select>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "advancedSelect",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "change",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "dark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "getSelectedOptions",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "getUnselectedOptions",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "multiple",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "open",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "optionGroups",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectOptionGroup[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "optionGroupsVisible",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectOptionGroup[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectOption[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "optionsVisible",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectOption[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "placeholder",
                    "defaultValue": "'Select option'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "searchValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Size",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "values",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SelectOption",
            "id": "class-SelectOption-2097f0275cc879c06a1ae100171cdb46db2cf475b418602e5cd62b393a90939ba02970508f3a850c9c8e302e723e9f1390b60823464f8e1fde812fc89aebb769",
            "file": "src/app/controls/select/select.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport { Size } from '@app/models';\r\n\r\nexport class Select {\r\n  label: string;\r\n  value: string;\r\n  values: string[] = [];\r\n  options: SelectOption[] = [];\r\n  optionsVisible: SelectOption[] = [];\r\n  optionGroups: SelectOptionGroup[] = [];\r\n  optionGroupsVisible: SelectOptionGroup[] = [];\r\n  classes: string;\r\n  dark: boolean;\r\n  multiple: boolean;\r\n  advancedSelect: boolean = false;\r\n  placeholder: string = 'Select option';\r\n  open: boolean;\r\n  searchValue: string;\r\n  size: Size;\r\n  change: (value: string) => void;\r\n\r\n  getSelectedOptions = () => {\r\n    const selectedOptions = this.options.filter((option) => option.selected);\r\n    const selectedOptionGroupOptions = this.optionGroups\r\n      .filter(\r\n        (optionGroup) =>\r\n          optionGroup.options.filter((option) => option.selected).length\r\n      )\r\n      .map((optionGroup) => {\r\n        const selectedGroup = optionGroup.options.filter(\r\n          (option) => option.selected\r\n        );\r\n        return selectedGroup && selectedGroup[0];\r\n      });\r\n    return [...selectedOptions, ...selectedOptionGroupOptions];\r\n  };\r\n\r\n  getUnselectedOptions = () =>\r\n    this.options.filter(\r\n      (option) =>\r\n        !option.selected &&\r\n        (!this.searchValue ||\r\n          this.searchValue.length <= 0 ||\r\n          option.text\r\n            .toLocaleLowerCase()\r\n            .includes(this.searchValue.toLocaleLowerCase()))\r\n    );\r\n\r\n  public constructor(init?: Partial<Select>) {\r\n    Object.assign(this, init);\r\n    this.optionGroupsVisible = this.optionGroups;\r\n    this.optionsVisible = this.options;\r\n  }\r\n}\r\n\r\nexport class SelectOption {\r\n  text: string;\r\n  value: string;\r\n  selected: boolean;\r\n  icon: IconProp;\r\n\r\n  public constructor(init?: Partial<SelectOption>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport class SelectOptionGroup {\r\n  label: string;\r\n  options: SelectOption[] = [];\r\n\r\n  public constructor(init?: Partial<SelectOptionGroup>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<SelectOption>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 60,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<SelectOption>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconProp",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SelectOptionGroup",
            "id": "class-SelectOptionGroup-2097f0275cc879c06a1ae100171cdb46db2cf475b418602e5cd62b393a90939ba02970508f3a850c9c8e302e723e9f1390b60823464f8e1fde812fc89aebb769",
            "file": "src/app/controls/select/select.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport { Size } from '@app/models';\r\n\r\nexport class Select {\r\n  label: string;\r\n  value: string;\r\n  values: string[] = [];\r\n  options: SelectOption[] = [];\r\n  optionsVisible: SelectOption[] = [];\r\n  optionGroups: SelectOptionGroup[] = [];\r\n  optionGroupsVisible: SelectOptionGroup[] = [];\r\n  classes: string;\r\n  dark: boolean;\r\n  multiple: boolean;\r\n  advancedSelect: boolean = false;\r\n  placeholder: string = 'Select option';\r\n  open: boolean;\r\n  searchValue: string;\r\n  size: Size;\r\n  change: (value: string) => void;\r\n\r\n  getSelectedOptions = () => {\r\n    const selectedOptions = this.options.filter((option) => option.selected);\r\n    const selectedOptionGroupOptions = this.optionGroups\r\n      .filter(\r\n        (optionGroup) =>\r\n          optionGroup.options.filter((option) => option.selected).length\r\n      )\r\n      .map((optionGroup) => {\r\n        const selectedGroup = optionGroup.options.filter(\r\n          (option) => option.selected\r\n        );\r\n        return selectedGroup && selectedGroup[0];\r\n      });\r\n    return [...selectedOptions, ...selectedOptionGroupOptions];\r\n  };\r\n\r\n  getUnselectedOptions = () =>\r\n    this.options.filter(\r\n      (option) =>\r\n        !option.selected &&\r\n        (!this.searchValue ||\r\n          this.searchValue.length <= 0 ||\r\n          option.text\r\n            .toLocaleLowerCase()\r\n            .includes(this.searchValue.toLocaleLowerCase()))\r\n    );\r\n\r\n  public constructor(init?: Partial<Select>) {\r\n    Object.assign(this, init);\r\n    this.optionGroupsVisible = this.optionGroups;\r\n    this.optionsVisible = this.options;\r\n  }\r\n}\r\n\r\nexport class SelectOption {\r\n  text: string;\r\n  value: string;\r\n  selected: boolean;\r\n  icon: IconProp;\r\n\r\n  public constructor(init?: Partial<SelectOption>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport class SelectOptionGroup {\r\n  label: string;\r\n  options: SelectOption[] = [];\r\n\r\n  public constructor(init?: Partial<SelectOptionGroup>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<SelectOptionGroup>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 69,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<SelectOptionGroup>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectOption[]",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Series",
            "id": "class-Series-97a9c38bb401934b5e1fe8e472b1c23d51e345a152cc48ed893e6957beff49b55d5800176ad3ba44eb59eb09e678e4aef5d5e779b583278f5d1392ddc1499bf0",
            "file": "src/app/pages/expansions/expansion/expansion.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Select, SelectOption, SelectOptionGroup } from '@app/controls';\r\nimport { ItemsFilter, ItemsFooter } from '@app/layout/main';\r\nimport { Card } from '@app/pages/cards';\r\n\r\nexport class Expansion {\r\n  id: number;\r\n  name: string;\r\n  code: string;\r\n  ptcgo_code?: string;\r\n  series: Series;\r\n  standard_legal: boolean;\r\n  expanded_legal: boolean;\r\n  total_cards: number;\r\n  release_date: Date;\r\n  symbol: string;\r\n  logo: string;\r\n  progress: number = 17;\r\n\r\n  route: string;\r\n  cards: Card[] = [];\r\n\r\n  constructor(init?: Partial<Expansion>) {\r\n    Object.assign(this, init);\r\n\r\n    // Route\r\n    this.route = `/expansions/${this.code}`;\r\n\r\n    // Init cards\r\n    if (init?.cards) this.cards = init.cards.map((card: any) => new Card(card));\r\n  }\r\n}\r\n\r\nexport class Series {\r\n  id: number;\r\n  name: string;\r\n  expansions: Expansion[] = [];\r\n\r\n  constructor(init?: Partial<Series>) {\r\n    Object.assign(this, init);\r\n\r\n    // Init expanions\r\n    if (init?.expansions)\r\n      this.expansions = init.expansions.map(\r\n        (expansion: any) => new Expansion(expansion)\r\n      );\r\n  }\r\n}\r\n\r\nexport function SetSortByExpansions(itemFilter: ItemsFilter) {\r\n  itemFilter.selectSortBy.optionGroups[0] = new SelectOptionGroup({\r\n    label: 'Sort By',\r\n    options: [\r\n      new SelectOption({\r\n        text: 'Release Date',\r\n        value: 'expansion.release_date',\r\n      }),\r\n    ],\r\n  });\r\n  itemFilter.selectSortBy.value = 'expansion.release_date';\r\n}\r\n\r\nexport function SetSortByExpansion(itemFilter: ItemsFilter) {\r\n  itemFilter.selectSortBy.optionGroups[0] = new SelectOptionGroup({\r\n    label: 'Sort By',\r\n    options: [\r\n      new SelectOption({\r\n        text: 'Number',\r\n        value: 'number',\r\n      }),\r\n      new SelectOption({\r\n        text: 'Name',\r\n        value: 'name',\r\n      }),\r\n    ],\r\n  });\r\n  itemFilter.selectSortBy.value = 'number';\r\n}\r\n\r\nexport function SetPageSize(itemFooter: ItemsFooter) {\r\n  itemFooter.selectPageSize.value = itemFooter.pageSize.toString();\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Series>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Series>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "expansions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Expansion[]",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Tag",
            "id": "class-Tag-df2157dc34039522211e91b3d07167bb0379164a724959cf422711928cd3c6c3bcf60e1bacfbe6da8e95f57b8bd0b7213cf885f28c1b8d3732812a6e0cebdc30",
            "file": "src/app/controls/tag/tag.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IconProp } from '@fortawesome/fontawesome-svg-core';\r\n\r\nexport class Tag {\r\n  text: string;\r\n  classes: string = '';\r\n  route: string;\r\n  icon: IconProp;\r\n\r\n  public constructor(init?: Partial<Tag>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Tag>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 7,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Tag>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "classes",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconProp",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Textarea",
            "id": "class-Textarea-aa8618ab4109b87a7696d2d7991e04f294008d280e14eae1533881e207692194aee80efb528bfad90870de9b263e4f5f834140565317b008513d355e5731fcd0",
            "file": "src/app/controls/textarea/textarea.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Textarea {\r\n\tvalue: string;\r\n\tlabel: string;\r\n\tplaceholder: string;\r\n\twidth: number;\r\n\tclasses: string;\r\n\tdisabled: boolean;\r\n\r\n\tkeydownEnter: (value: string) => void;\r\n\tchange: (value: string) => void;\r\n\r\n\tpublic constructor(init?: Partial<Textarea>) {\r\n\t\tObject.assign(this, init);\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Textarea>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 10,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Textarea>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "change",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "keydownEnter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Textbox",
            "id": "class-Textbox-4634a7d41cea1c997f927e05a46bfb4748b6f3ebb505614fb88b2aa804277e0fd0e1489744750ccdc1ece6a25869ee0b0609570c8ebd7c26019cb8b57162a375",
            "file": "src/app/controls/textbox/textbox.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IconProp } from '@fortawesome/fontawesome-svg-core';\r\nimport { Size } from './../../models/size';\r\n\r\nexport class Textbox {\r\n  value: string = '';\r\n  label: string;\r\n  type: string = 'text';\r\n  valid: boolean;\r\n  min: number;\r\n  max: number;\r\n  integer: boolean;\r\n  icon: IconProp;\r\n  placeholder: string;\r\n  width: number;\r\n  classes: string;\r\n  wrapperClasses: string;\r\n  disabled: boolean;\r\n  readOnly: boolean;\r\n  clearable: boolean;\r\n  colorPicker: boolean;\r\n  autoComplete: boolean;\r\n  dark: boolean;\r\n  size: Size;\r\n  formControlName: string;\r\n\r\n  keyup: (value: string) => void;\r\n  keydown: (value: string) => void;\r\n  keydownEnter: (value: string) => void;\r\n  clickIcon: (value: string) => void;\r\n  change: (value: string) => void;\r\n\r\n  clickClear: () => void;\r\n  clear = () => {\r\n    this.value = '';\r\n  };\r\n\r\n  public constructor(init?: Partial<Textbox>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Textbox>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 35,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Textbox>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "autoComplete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "change",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "clear",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "clearable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "clickClear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "clickIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "colorPicker",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "dark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "formControlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconProp",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "integer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "keydown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "keydownEnter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "keyup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "readOnly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Size",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "valid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "wrapperClasses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Toggle",
            "id": "class-Toggle-7b889f4495649b0c2faaa8219229379dee1cc385c9bcbc29c3b52e8fae8098bc56546d1caed4dc3eeb9f8e2d7857d151f2fa4f9227e4974339800a0e1fd1d772",
            "file": "src/app/controls/toggle/toggle.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Toggle {\r\n\tchecked: boolean = false;\r\n\ttext: string;\r\n\ttextChecked: string;\r\n\tlabel: string;\r\n\tdisabled: boolean;\r\n\r\n    public constructor(init?:Partial<Toggle>) {\r\n\t\tObject.assign(this, init);\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<Toggle>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 6,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<Toggle>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "textChecked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TypeTag",
            "id": "class-TypeTag-680d3c163465d2a1ef2ff8eb4f8df13c27193ccc49f48784da6b3f16a8a8a3717a9f3a199209a37594392e5b2c92476aa0c346d63e4954ac856f9291908bfc64",
            "file": "src/app/controls/type-tag/type-tag.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class TypeTag {\r\n\ttext: string;\r\n\ttype: string = '';\r\n\troute: string;\r\n\r\n\tpublic constructor(init?: Partial<TypeTag>) {\r\n\t\tObject.assign(this, init);\r\n\t\tthis.route = this.type && `/pokemon/type/${this.type.toLowerCase()}`;\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<TypeTag>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 4,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<TypeTag>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "type",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateUserCard",
            "id": "class-UpdateUserCard-1b074dba5032b82480b12097eeed91a9f1d1e495e817d8b17e4c65ce528aaede0a66c6e588229885363cb9dd3a1cd358f0e7cffb513ee5b86f239efe2de9ff30",
            "file": "src/app/pages/collection/user-cards/user-cards.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { LoaderService } from './../../../controls/loader/loader.service';\r\nimport { APIGetPaged, APIResponse, buildUrl } from '@app/models';\r\nimport { ResCards, Card } from '@app/pages';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { UserCard } from './user-card';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\nexport class UpdateUserCard {\r\n  user_card_id: number;\r\n  condition: string;\r\n  graded_by: string;\r\n  printing: string;\r\n  notes: string;\r\n  constructor(init?: Partial<UpdateUserCard>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport class AddUserCard {\r\n  card_id: number;\r\n  card_group_id?: number;\r\n  condition: string;\r\n  graded_by: string;\r\n  printing: string;\r\n  notes: string;\r\n  date_obtained: Date;\r\n  purchase_price: number;\r\n  constructor(init?: Partial<AddUserCard>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserCardsService {\r\n  constructor(private http: HttpClient, private loaderService: LoaderService) {}\r\n\r\n  // Get user cards\r\n  private getUserCardsSubject = new BehaviorSubject<ResCards | null>(null);\r\n  getUserCardsObservable() {\r\n    this.getUserCardsSubject = new BehaviorSubject<ResCards | null>(null);\r\n    return this.getUserCardsSubject.asObservable();\r\n  }\r\n  getUserCards(params: APIGetPaged) {\r\n    this.loaderService.addItemLoading('getUserCards');\r\n    this.http\r\n      .get<APIResponse>(params.buildUrl('user-cards'))\r\n      .subscribe((res) => {\r\n        this.getUserCardsSubject.next({\r\n          cards: res.data.map((userCard: any) => new Card(userCard.card)),\r\n          total_pages: res.meta.last_page,\r\n          total_results: res.meta.total,\r\n        });\r\n        this.loaderService.clearItemLoading('getUserCards');\r\n      });\r\n  }\r\n\r\n  // Get card user cards\r\n  private getCardUserCardsSubject = new BehaviorSubject<UserCard[] | null>(\r\n    null\r\n  );\r\n  getCardUserCardsObservable() {\r\n    this.getCardUserCardsSubject = new BehaviorSubject<UserCard[] | null>(null);\r\n    return this.getCardUserCardsSubject.asObservable();\r\n  }\r\n  getCardUserCards(slug: string) {\r\n    this.loaderService.addItemLoading('getUserCardsCard');\r\n    this.http\r\n      .get<APIResponse>(buildUrl('user-cards/' + slug))\r\n      .subscribe((res) => {\r\n        this.getCardUserCardsSubject.next(\r\n          res.data.map((userCard: any) => new UserCard(userCard))\r\n        );\r\n        this.loaderService.clearItemLoading('getUserCardsCard');\r\n      });\r\n  }\r\n\r\n  // Add user card\r\n  private addUserCardSubject = new BehaviorSubject<UserCard | null>(null);\r\n  addUserCardObservable() {\r\n    this.addUserCardSubject = new BehaviorSubject<UserCard | null>(null);\r\n    return this.addUserCardSubject.asObservable();\r\n  }\r\n  addUserCard(userCard: UserCard) {\r\n    this.loaderService.addItemLoading('addUserCard');\r\n    this.http\r\n      .post<APIResponse>(buildUrl('user-cards/create'), userCard)\r\n      .subscribe((res) => {\r\n        if (res.success) this.addUserCardSubject.next(userCard);\r\n        this.loaderService.clearItemLoading('addUserCard');\r\n      });\r\n  }\r\n\r\n  // Remove user card\r\n  removeUserCard(user_card_id: number) {\r\n    return this.http.post<APIResponse>(buildUrl('user-cards/delete'), {\r\n      user_card_id,\r\n    });\r\n  }\r\n\r\n  // Update user card\r\n  updateUserCard(userCard: UserCard) {\r\n    return this.http.post<APIResponse>(buildUrl('user-cards/update'), userCard);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<UpdateUserCard>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<UpdateUserCard>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "condition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "graded_by",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "notes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "printing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "user_card_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "User",
            "id": "class-User-3f70ad74e200b23313b8c1c3ccc2693c7f9ab56946cebd960cdaf830ee73acf768ad12ef0a5e6395ffec4c7e3d1d198a1ae32bdb5c11990c3bab2dac95aa45a7",
            "file": "src/app/pages/user/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class User {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  email_verified_at?: Date;\r\n  email_verify_token: string;\r\n  created_at: Date;\r\n  updated_at: Date;\r\n  full_name?: string;\r\n  image?: string;\r\n  bio?: string;\r\n  reputation: number;\r\n  patreon_id?: number;\r\n  patreon_status?: string;\r\n  patreon_tier?: string;\r\n\r\n  // Authentication\r\n  token?: string;\r\n  expires_at?: Date;\r\n\r\n  public constructor(init?: Partial<User>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<User>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 19,
                "modifierKind": [
                    123
                ],
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<User>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "bio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "created_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "email_verified_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "email_verify_token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "expires_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "full_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "patreon_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "patreon_status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "patreon_tier",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "reputation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "updated_at",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UserCard",
            "id": "class-UserCard-7aeb67d83b376c6cda3f040ff43837293cf5258db95f37ed31b45c7b7e6b5439f7f6113be000434752a7baad7e646e1a20fa76565510d0a899a1bbcdb23b4c8f",
            "file": "src/app/pages/collection/user-cards/user-card/user-card.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Card } from './../../../cards/card/card';\r\nimport { Condition } from '@app/models';\r\nexport class UserCard {\r\n  id: number;\r\n  user_card_id: number;\r\n  card_id: number;\r\n  card_group_id?: number;\r\n  condition: string = Condition.Mint;\r\n  graded_by: string;\r\n  printing: string;\r\n  notes: string;\r\n  date_obtained: Date;\r\n  purchase_price: Number;\r\n\r\n  constructor(init?: Partial<UserCard>) {\r\n    Object.assign(this, init);\r\n    this.user_card_id = this.id;\r\n  }\r\n}\r\nexport class UserCardGroup {\r\n  name: string;\r\n  icon: string;\r\n  type: string;\r\n  cards: Card[] = [];\r\n  count: number = 0;\r\n  id: number;\r\n  public: boolean;\r\n  description: string;\r\n  constructor(init?: Partial<UserCardGroup>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<UserCard>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<UserCard>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "card_group_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "card_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "condition",
                    "defaultValue": "Condition.Mint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "date_obtained",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "graded_by",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "notes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "printing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "purchase_price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "user_card_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UserCardGroup",
            "id": "class-UserCardGroup-7aeb67d83b376c6cda3f040ff43837293cf5258db95f37ed31b45c7b7e6b5439f7f6113be000434752a7baad7e646e1a20fa76565510d0a899a1bbcdb23b4c8f",
            "file": "src/app/pages/collection/user-cards/user-card/user-card.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Card } from './../../../cards/card/card';\r\nimport { Condition } from '@app/models';\r\nexport class UserCard {\r\n  id: number;\r\n  user_card_id: number;\r\n  card_id: number;\r\n  card_group_id?: number;\r\n  condition: string = Condition.Mint;\r\n  graded_by: string;\r\n  printing: string;\r\n  notes: string;\r\n  date_obtained: Date;\r\n  purchase_price: Number;\r\n\r\n  constructor(init?: Partial<UserCard>) {\r\n    Object.assign(this, init);\r\n    this.user_card_id = this.id;\r\n  }\r\n}\r\nexport class UserCardGroup {\r\n  name: string;\r\n  icon: string;\r\n  type: string;\r\n  cards: Card[] = [];\r\n  count: number = 0;\r\n  id: number;\r\n  public: boolean;\r\n  description: string;\r\n  constructor(init?: Partial<UserCardGroup>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "init",
                        "type": "Partial<UserCardGroup>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "init",
                        "type": "Partial<UserCardGroup>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "cards",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "count",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "public",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Weakness",
            "id": "class-Weakness-d4cbe2de320702b88ee85311f0269dcb63a5a8080d57ac4f40ba9963a264914901d8d2e0c9ab7079fbde4dc349daf9e42d06a86669fc1bc4335a5b667d98ffa4",
            "file": "src/app/pages/cards/card/card.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { UserCard } from '@app/pages/collection';\r\nimport { SelectOption, SelectOptionGroup } from '@app/controls';\r\nimport '@app/helpers/string.extensions';\r\nimport { ItemsFilter } from '@app/layout';\r\nimport { Icons } from '@app/models';\r\nimport { Expansion } from '@app/pages/expansions';\r\nimport { Pokemon } from '@app/pages/pokemons/pokemon/pokemon';\r\n\r\nexport const DEFAULT_IMAGE = '/assets/back.jpg';\r\n\r\nexport class Weakness {\r\n  type: string;\r\n  value: string;\r\n}\r\n\r\nexport class Attack {\r\n  cost: string[] = [];\r\n  name: string;\r\n  text: string;\r\n  damage: number;\r\n  convertedEnergyCost: number;\r\n}\r\n\r\nexport class Card {\r\n  id: number;\r\n  name: string;\r\n  slug: string;\r\n  pokemon: Pokemon;\r\n  expansion: Expansion;\r\n  number: string;\r\n  rarity: string;\r\n  image: string;\r\n  image_high_res?: string;\r\n  super_type: string;\r\n  sub_type?: string;\r\n  hp?: number;\r\n  retreat_cost: string[] = [];\r\n  weaknesses: Weakness[] = [];\r\n  attacks: Attack[] = [];\r\n  artist: string;\r\n  is_shiny: boolean;\r\n  is_promo: boolean;\r\n  is_full_art: boolean;\r\n  is_gold: boolean;\r\n  has_first_edition: boolean;\r\n  has_shadowless: boolean;\r\n  has_reverse_holo: boolean;\r\n  types: string[] = [];\r\n  last_prices: CardLastPrices;\r\n  user_cards: UserCard[] = [];\r\n\r\n  route: string;\r\n  tempId: number;\r\n\r\n  getCardNumber(): string {\r\n    // IS number\r\n    if (!isNaN(+this.number)) {\r\n      const x = `${this.number}`;\r\n      const y = `${this.expansion.total_cards}`;\r\n      const pad = '000';\r\n      const xFormatted = pad.substring(0, pad.length - x.length) + x;\r\n      const yFormatted = pad.substring(0, pad.length - y.length) + y;\r\n      return `${xFormatted}/${yFormatted}`;\r\n    }\r\n    // NOT number (promo)\r\n    else {\r\n      return this.number;\r\n    }\r\n  }\r\n\r\n  constructor(init?: Partial<Card>) {\r\n    Object.assign(this, init);\r\n\r\n    // Route\r\n    this.route = '/cards/' + this.slug;\r\n\r\n    // Initalize expansion\r\n    if (init?.expansion) this.expansion = new Expansion(init.expansion);\r\n\r\n    // Initalize pokemon\r\n    if (init?.pokemon) this.pokemon = new Pokemon(init.pokemon);\r\n  }\r\n}\r\n\r\nexport class CardLastPrices {\r\n  card_id: number;\r\n  condition: string;\r\n  created_at: Date;\r\n  direct_price: string;\r\n  high_price: number;\r\n  id: number;\r\n  low_price: number;\r\n  market_price: number;\r\n  mid_price: number;\r\n  source: string;\r\n  updated_at: Date;\r\n  variation: string;\r\n\r\n  constructor(init?: Partial<CardLastPrices>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport class CardCount {\r\n  get count(): number {\r\n    return this.cards.length;\r\n  }\r\n  cards: Card[] = [];\r\n  constructor(init?: Partial<CardCount>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport function SetSortByCards(itemFilter: ItemsFilter) {\r\n  itemFilter.selectSortBy.optionGroups[0] = new SelectOptionGroup({\r\n    label: 'Sort By',\r\n    options: [\r\n      new SelectOption({\r\n        text: 'Number',\r\n        value: 'number',\r\n      }),\r\n      new SelectOption({\r\n        text: 'Name',\r\n        value: 'name',\r\n      }),\r\n      // new SelectOption({\r\n      // \ttext: 'Price',\r\n      // \tvalue: 'price',\r\n      // }),\r\n      new SelectOption({\r\n        text: 'Release Date',\r\n        value: 'release_date',\r\n      }),\r\n      // new SelectOption({\r\n      // \ttext: 'Rarity',\r\n      // \tvalue: 'rarity',\r\n      // }),\r\n    ],\r\n  });\r\n  itemFilter.selectSortBy.value = 'number';\r\n}\r\n",
            "properties": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "ClickOutsideDirective",
            "id": "directive-ClickOutsideDirective-c8d2308c32bb8f91b04814a72366f62574913deab0fbf154abf25dd5e1e76468991cb05037f8389642203e9795dc8cf7783100f8e55e72b0eabf7552fd14c369",
            "file": "src/app/helpers/clickOutside.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostListener,\r\n  Output,\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[clickOutside]',\r\n})\r\nexport class ClickOutsideDirective {\r\n  @Output() clickOutside = new EventEmitter<void>();\r\n  constructor(private elementRef: ElementRef) {}\r\n  @HostListener('document:click', ['$event.target'])\r\n  public onClick(target: any) {\r\n    const clickedInside = this.elementRef.nativeElement.contains(target);\r\n    if (!clickedInside) {\r\n      this.clickOutside.emit();\r\n    }\r\n  }\r\n}\r\n",
            "selector": "[clickOutside]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "clickOutside",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "target",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event.target"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "target",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event.target']"
                        }
                    ],
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "InsertionDirective",
            "id": "directive-InsertionDirective-94cff9e06aa04ed5c963926c0e808d3c87b8787f5628680092e64ce9200ebdf68ec21c702d6ad4c63b3c4eb3c23bb3518b3d24e00999daa841f26cf0161e3260",
            "file": "src/app/controls/dialog/insertion.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ViewContainerRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appInsertion]',\r\n})\r\nexport class InsertionDirective {\r\n  constructor(public viewContainerRef: ViewContainerRef) {}\r\n}\r\n",
            "selector": "[appInsertion]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "viewContainerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AlertComponent",
            "id": "component-AlertComponent-5966c044cd54821cbfd0c8f129f8975f6f0592e64c8d1b2b8078b8030bd949efec489c4dbfc236757bde481bed65461049403eb8d86a82c37b9c0a2dd2a96bc2",
            "file": "src/app/controls/alert/alert.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "alert",
            "styleUrls": [
                "./alert.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "alert.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "alert",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Alert",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { Alert } from './alert';\r\n\r\n@Component({\r\n  selector: 'alert',\r\n  templateUrl: 'alert.component.html',\r\n  styleUrls: ['./alert.component.scss'],\r\n})\r\nexport class AlertComponent implements OnInit {\r\n  @Input() alert: Alert;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n.alert {\r\n\tpadding: $spacing ($spacing * 2);\r\n\tborder: $border;\r\n\tborder-radius: $border-radius-small;\r\n\tbackground: rgba($grey, 0.5);\r\n\tbox-shadow: $shadow-sheen;\r\n\tcolor: rgba(black, 0.6);\r\n}\r\n",
                    "styleUrl": "./alert.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\r\n\tclass=\"alert {{alert.type}}\"\r\n\t[innerHtml]=\"alert.message\">\r\n</div>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-f743d845b36fad7d6d474f7f3ac9f138a96b101321b21a7adb3711bfe6cadb2d7521e43bf1db7a544920f853d54a813e779fee2f4bca754d9ed3a89d27fe9648",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "menuItemTools",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "showMenu",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "showScrollToTop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "theme",
                    "defaultValue": "'dark'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "transparentHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPopState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:popstate', ['$event']"
                        }
                    ]
                },
                {
                    "name": "onWindowScroll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:scroll', undefined"
                        }
                    ]
                },
                {
                    "name": "scrollToTop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:popstate",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72
                },
                {
                    "name": "window:scroll",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectorRef,\r\n  Component,\r\n  HostListener,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { NavigationEnd, Router, RoutesRecognized } from '@angular/router';\r\nimport { DialogService } from '@app/controls/dialog';\r\nimport { MenuItem } from '@app/controls/menu';\r\nimport { LoaderService } from './controls';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent implements OnInit {\r\n  theme: string = 'dark';\r\n  showMenu: boolean = true;\r\n  loading: boolean = false;\r\n  menuItemTools: MenuItem;\r\n  transparentHeader: boolean;\r\n  showScrollToTop: boolean;\r\n\r\n  constructor(\r\n    private cdRef: ChangeDetectorRef,\r\n    private router: Router,\r\n    private loaderService: LoaderService,\r\n    private dialogService: DialogService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    // Loader\r\n    this.loaderService.loading.asObservable().subscribe((loading: boolean) => {\r\n      if (this.loading != loading) {\r\n        this.loading = loading;\r\n        this.cdRef.detectChanges();\r\n      }\r\n    });\r\n\r\n    // Scroll to top\r\n    this.router.events.subscribe((event) => {\r\n      if (!(event instanceof NavigationEnd)) {\r\n        return;\r\n      }\r\n      this.scrollToTop();\r\n    });\r\n\r\n    // Transparent header\r\n    this.router.events.subscribe((data) => {\r\n      if (data instanceof RoutesRecognized) {\r\n        this.transparentHeader = data?.state?.root?.firstChild?.data[\r\n          'transparentHeader'\r\n        ] as boolean;\r\n      }\r\n    });\r\n\r\n    // Theme\r\n    let body = document.getElementsByTagName('body')[0];\r\n    body.classList.add('theme');\r\n    body.classList.add('dark');\r\n  }\r\n\r\n  @HostListener('window:scroll', [])\r\n  onWindowScroll() {\r\n    this.showScrollToTop =\r\n      document.body.scrollTop > 20 || document.documentElement.scrollTop > 20;\r\n  }\r\n\r\n  // Close all dialogs when url history/state changes (back button)\r\n  @HostListener('window:popstate', ['$event'])\r\n  onPopState() {\r\n    this.dialogService.closeAll();\r\n  }\r\n\r\n  scrollToTop() {\r\n    window.scrollTo(0, 0);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n:host {\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex: 1 0 0;\r\n  z-index: 1;\r\n  position: relative;\r\n}\r\n\r\n#menu {\r\n  width: 100%;\r\n  border-bottom: $border;\r\n  background: $menu-bg;\r\n  a {\r\n    color: white;\r\n  }\r\n}\r\n\r\n#main {\r\n  background-color: $main-bg;\r\n  flex: 1;\r\n  position: relative;\r\n  z-index: 1;\r\n  @media (max-width: $screen-medium) {\r\n    padding-top: $header-height;\r\n  }\r\n}\r\n\r\n.scrollTop {\r\n  border-radius: 999px;\r\n  padding: $spacing * 2.5;\r\n  width: 64px;\r\n  height: 64px;\r\n  position: fixed;\r\n  bottom: 32px;\r\n  right: 32px;\r\n  background: $secondary-color;\r\n  color: white;\r\n  box-shadow: $shadow;\r\n  cursor: pointer;\r\n  z-index: 10;\r\n  &:hover {\r\n    box-shadow: $shadow-large;\r\n  }\r\n  @media (max-width: $screen-medium) {\r\n    bottom: 100px;\r\n  }\r\n}\r\n\r\nloader ::ng-deep .overlay {\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  position: fixed;\r\n  z-index: 999;\r\n  display: block;\r\n}\r\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- Header -->\r\n<app-header [transparent]=\"transparentHeader\"></app-header>\r\n\r\n<!-- Notifications -->\r\n<notifications></notifications>\r\n\r\n<!-- Main -->\r\n<main id=\"main\" [class.padding-top-none]=\"transparentHeader\">\r\n  <router-outlet></router-outlet>\r\n</main>\r\n\r\n<!-- Footer -->\r\n<app-footer></app-footer>\r\n\r\n<!-- Loader -->\r\n<loader [active]=\"loading\"></loader>\r\n\r\n<!-- Scroll top -->\r\n<a class=\"scrollTop\" *ngIf=\"showScrollToTop\" (click)=\"scrollToTop()\">\r\n  <fa-icon icon=\"arrow-up\"></fa-icon>\r\n</a>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-699ed51313ce2a587e0118242e3bdae8ad31beac54eb9e09acb92608e6cde9cbde6be9e41a275b7c0de757b46e4830130d9b86df00ad1c6848d912fed71e71ca",
            "file": "src/app/controls/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Button",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, ViewEncapsulation } from '@angular/core';\r\nimport { Button } from './button';\r\n\r\n@Component({\r\n  selector: 'app-button',\r\n  templateUrl: './button.component.html',\r\n  styleUrls: ['./button.component.scss'],\r\n})\r\nexport class ButtonComponent implements OnInit {\r\n  @Input() button: Button;\r\n  @Input() disabled: boolean;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n.button {\r\n  padding: 11px 16px;\r\n  line-height: 16px;\r\n  border: 1px solid darken($primary-color, 10%);\r\n  border-radius: 999px;\r\n  background: $primary-color;\r\n  color: white;\r\n  display: flex;\r\n  align-items: center;\r\n  transition: $transition;\r\n  position: relative;\r\n  cursor: pointer;\r\n  overflow: hidden;\r\n  font-size: $font-size;\r\n  outline: 0;\r\n  white-space: nowrap;\r\n  box-shadow: $shadow-sheen;\r\n  justify-content: center;\r\n\r\n  &.small {\r\n    padding: 2px 8px;\r\n    font-size: 12px;\r\n    line-height: 1;\r\n    .symbol + .text {\r\n      margin-left: 4px;\r\n    }\r\n  }\r\n  .text {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n\r\n  &.secondary {\r\n    background: $secondary-color;\r\n    border-color: darken($secondary-color, 10%);\r\n  }\r\n\r\n  // Icon\r\n  .icon {\r\n    fa-icon {\r\n      width: 16px !important;\r\n      height: 16px !important;\r\n    }\r\n    + .text {\r\n      margin-left: $spacing;\r\n    }\r\n  }\r\n\r\n  // Symbol\r\n  .symbol {\r\n    display: flex;\r\n    img {\r\n      height: 16px;\r\n      filter: invert(1);\r\n    }\r\n    + .text {\r\n      margin-left: $spacing;\r\n    }\r\n  }\r\n\r\n  // States\r\n  &:focus {\r\n    box-shadow: $shadow-focus;\r\n  }\r\n  &:hover {\r\n    background: mix(white, $primary-color, 10%);\r\n    box-shadow: $shadow-sheen, $shadow-focus;\r\n    &.secondary {\r\n      background: mix(white, $secondary-color, 10%);\r\n    }\r\n  }\r\n  &:active {\r\n    box-shadow: $shadow-sheen, $shadow-focus, $shadow-focus-inset;\r\n  }\r\n}\r\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button\r\n\t*ngIf=\"button\"\r\n\tclass=\"button {{ button.classes }} {{ button.size }}\"\r\n\t[type]=\"button.type\"\r\n\t[style.width]=\"button.width\"\r\n\t[disabled]=\"button.disabled || disabled ? true : null\"\r\n\t[routerLink]=\"button.route\"\r\n\t(click)=\"button.click ? button.click() : null\"\r\n>\r\n\t<span class=\"icon\" *ngIf=\"button.icon\">\r\n\t\t<fa-icon [icon]=\"button.icon\"></fa-icon>\r\n\t</span>\r\n\r\n\t<span class=\"symbol\" *ngIf=\"button.symbol\">\r\n\t\t<img [src]=\"button.symbol\" />\r\n\t</span>\r\n\r\n\t<span class=\"text\" *ngIf=\"button.text\" [innerHTML]=\"button.text\"> </span>\r\n\r\n\t<span class=\"money-tag\" *ngIf=\"button.price\">\r\n\t\t{{ button.price | currency }}\r\n\t</span>\r\n</button>\r\n"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-41933cf41edde797187c68ac874f06142bc7f140452e712f3fbb2e552f88dedf82d90fead997fd51c4110a222eda3cdb8b75196c1126fc9c400c95bd460b9013",
            "file": "src/app/pages/cards/card/card.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "card",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "Card | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonEbay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "buttonTCGPlayer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "cardImageHover",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "expansionCards",
                    "defaultValue": "new Items()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Items",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "relatedCards",
                    "defaultValue": "new Items()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Items",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "showRelated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "tagArtist",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tag",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "tagNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tag",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "tagRarity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tag",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "userCards",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserCard[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "createDialogCardImage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getExpansionCards",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 232,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getRelatedCards",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTypeImage",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleRoute",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 205,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AppSettings } from '@app/app';\r\nimport {\r\n  Button,\r\n  DialogConfig,\r\n  DialogService,\r\n  LoaderService,\r\n  Tag,\r\n} from '@app/controls';\r\nimport '@app/helpers/string.extensions';\r\nimport { ItemGroup, Items } from '@app/layout/main';\r\nimport { APIGetPaged } from '@app/models';\r\nimport { Icons, Symbols } from '@app/models/icons';\r\nimport { UserCard, UserCardsService } from '@app/pages/collection';\r\nimport { ExpansionService } from '@app/pages/expansions/expansion/expansion.service';\r\nimport { PokemonService } from '@app/pages/pokemons';\r\nimport { Card, SetSortByCards } from './card';\r\nimport { CardImageDialogComponent } from './card-image-dialog.component';\r\nimport { CardService } from './card.service';\r\n\r\n@Component({\r\n  selector: 'card',\r\n  templateUrl: './card.component.html',\r\n  styleUrls: ['./card.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class CardComponent implements OnInit {\r\n  @Input() card: Card | null;\r\n  userCards: UserCard[] = [];\r\n  relatedCards: Items = new Items();\r\n  expansionCards: Items = new Items();\r\n  cardImageHover: boolean = false;\r\n  tagRarity: Tag;\r\n  tagArtist: Tag;\r\n  tagNumber: Tag;\r\n  buttonTCGPlayer: Button;\r\n  buttonEbay: Button;\r\n  showRelated: boolean;\r\n\r\n  constructor(\r\n    private titleService: Title,\r\n    private loaderService: LoaderService,\r\n    private cardService: CardService,\r\n    private route: ActivatedRoute,\r\n    private expansionService: ExpansionService,\r\n    private dialogService: DialogService,\r\n    private pokemonService: PokemonService,\r\n    private userCardsService: UserCardsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.setupControls();\r\n    this.setupSubscriptions();\r\n    this.handleRoute();\r\n  }\r\n\r\n  resetControls() {\r\n    this.card = null;\r\n  }\r\n\r\n  setupControls() {\r\n    this.resetControls();\r\n\r\n    // Related cards\r\n    this.relatedCards.footer.pageSize = 12;\r\n    this.relatedCards.noResultsImage = Symbols.cards;\r\n    this.relatedCards.noResults = 'No related cards found';\r\n    this.relatedCards.itemClasses = 'width-2 medium-3 small-6';\r\n    this.relatedCards.showFilters = false;\r\n    this.relatedCards.showFooter = false;\r\n    SetSortByCards(this.relatedCards.filter);\r\n\r\n    // Expansion cards\r\n    this.expansionCards.footer.pageSize = 12;\r\n    this.expansionCards.noResultsImage = Symbols.cards;\r\n    this.expansionCards.itemClasses = 'width-2 medium-3 small-6';\r\n    this.expansionCards.showFilters = false;\r\n    this.expansionCards.showFooter = false;\r\n    SetSortByCards(this.expansionCards.filter);\r\n\r\n    // Buttons\r\n    this.buttonTCGPlayer = new Button({\r\n      icon: Icons.externalLink,\r\n      text: 'Buy on TCGPlayer',\r\n      classes: 'small width-12',\r\n    });\r\n    this.buttonEbay = new Button({\r\n      icon: Icons.externalLink,\r\n      text: 'Buy on eBay',\r\n      classes: 'small width-12',\r\n    });\r\n  }\r\n\r\n  getTypeImage(type: string) {\r\n    return `/assets/symbols/${type.toLowerCase()}.svg`;\r\n  }\r\n\r\n  createDialogCardImage() {\r\n    if (this.card) {\r\n      this.dialogService.open(\r\n        CardImageDialogComponent,\r\n        new DialogConfig({\r\n          title: `${this.card.name} - ${this.card.expansion.name}`,\r\n          data: {\r\n            image: this.card.image_high_res,\r\n          },\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  setupSubscriptions() {\r\n    // Response get card\r\n    this.cardService.getCardObservable().subscribe((card) => {\r\n      if (card) {\r\n        this.titleService.setTitle(AppSettings.titlePrefix + card.name);\r\n\r\n        // Data\r\n        this.card = card;\r\n\r\n        if (this.card.pokemon) {\r\n          this.relatedCards.header.title = `${this.card.pokemon.variant.name} Cards`;\r\n          this.relatedCards.header.titleRoute = this.card.pokemon.route;\r\n          this.relatedCards.noResults = `No ${this.card.pokemon.variant.name} cards found`;\r\n        }\r\n\r\n        // Rarity\r\n        if (this.card.expansion.name.toLowerCase().includes('promo')) {\r\n          this.tagRarity = new Tag({\r\n            text: 'Promo',\r\n            classes: 'promo card-rarity',\r\n          });\r\n        } else if (this.card.rarity) {\r\n          this.tagRarity = new Tag({\r\n            text: this.card.rarity,\r\n            classes:\r\n              'card-rarity ' + this.card.rarity.toLowerCase().replace(' ', '-'),\r\n          });\r\n        }\r\n\r\n        // Artist\r\n        if (this.card.artist) {\r\n          this.tagArtist = new Tag({\r\n            text: this.card.artist,\r\n            icon: Icons.paintBrush,\r\n          });\r\n        }\r\n\r\n        this.tagNumber = new Tag({\r\n          text: this.card.getCardNumber(),\r\n        });\r\n\r\n        // Get related/expansion cards\r\n        this.getRelatedCards();\r\n        this.getExpansionCards();\r\n\r\n        // Expansion name\r\n        this.expansionCards.header.title = `${this.card.expansion.name} Cards`;\r\n        this.expansionCards.noResults =\r\n          'No ' + this.card.expansion.name + ' cards found';\r\n        this.expansionCards.header.titleRoute = this.card.expansion.route;\r\n\r\n        // Prices\r\n        if (this.card.last_prices) {\r\n          this.buttonTCGPlayer.price = this.card.last_prices.market_price;\r\n          this.buttonEbay.price = this.card.last_prices.market_price;\r\n        }\r\n      }\r\n    });\r\n\r\n    // Response get user cards\r\n    this.userCardsService\r\n      .getCardUserCardsObservable()\r\n      .subscribe((userCards) => {\r\n        if (userCards) {\r\n          this.userCards = userCards;\r\n        }\r\n      });\r\n\r\n    // Response get related cards\r\n    this.pokemonService.getPokemonVariantCardsObservable().subscribe((res) => {\r\n      if (res) {\r\n        this.relatedCards.itemGroups = [\r\n          new ItemGroup({\r\n            items: res.cards,\r\n          }),\r\n        ];\r\n      }\r\n    });\r\n\r\n    // Response get expansion cards\r\n    this.expansionService.getExpansionCardsObservable().subscribe((res) => {\r\n      if (res) {\r\n        this.expansionCards.itemGroups = [\r\n          new ItemGroup({\r\n            items: res.cards,\r\n          }),\r\n        ];\r\n      }\r\n    });\r\n  }\r\n\r\n  handleRoute() {\r\n    // Param - card slug\r\n    this.route.params.subscribe((params) => {\r\n      const slug = params['slug'];\r\n      // Get card\r\n      this.cardService.getCard(slug);\r\n      // Get user cards\r\n      this.userCardsService.getCardUserCards(slug);\r\n    });\r\n  }\r\n\r\n  getRelatedCards() {\r\n    if (this.card && this.card.pokemon) {\r\n      this.showRelated = true;\r\n      this.pokemonService.getPokemonVariantCards(\r\n        new APIGetPaged({\r\n          page: this.relatedCards.footer.page,\r\n          slug: this.card.pokemon.variant.slug,\r\n          page_size: this.relatedCards.footer.pageSize,\r\n          sort_by: this.relatedCards.filter.selectSortBy.value,\r\n          sort_direction: this.relatedCards.filter.selectSortDirection.value,\r\n          query: this.relatedCards.filter.textboxSearch.value,\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  getExpansionCards() {\r\n    if (this.card) {\r\n      this.expansionService.getExpansionCards(\r\n        new APIGetPaged({\r\n          code: this.card.expansion.code,\r\n          page: this.expansionCards.footer.page,\r\n          page_size: this.expansionCards.footer.pageSize,\r\n          query: this.expansionCards.filter.textboxSearch.value,\r\n          sort_by: this.expansionCards.filter.selectSortBy.value,\r\n          sort_direction: this.expansionCards.filter.selectSortDirection.value,\r\n        })\r\n      );\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\", \"scaffold/typography\", \"custom\";\r\n\r\n.card-detail {\r\n\tposition: relative;\r\n\toverflow: hidden;\r\n\tbackground: linear-gradient(\r\n\t\tto right,\r\n\t\tdarken(white, 20%),\r\n\t\tdarken(mix(white, black, 80%), 20%)\r\n\t);\r\n\t&:after {\r\n\t\tcontent: \"\";\r\n\t\tbox-shadow: $shadow-inset-large;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\tright: 0;\r\n\t\tbottom: 0;\r\n\t\tposition: absolute;\r\n\t\tz-index: 2;\r\n\t\tpointer-events: none;\r\n\t}\r\n\t.panel:after {\r\n\t\t@media (max-width: $screen-medium) {\r\n\t\t\tborder-left: 0;\r\n\t\t\tborder-right: 0;\r\n\t\t}\r\n\t}\r\n\t> .pokeball {\r\n\t\tposition: absolute;\r\n\t\tleft: 50%;\r\n\t\ttop: 50%;\r\n\t\ttransform: translate(-50%, -50%);\r\n\t\twidth: 1000px;\r\n\t\topacity: 0.1;\r\n\t\tz-index: 1;\r\n\t\tpointer-events: none;\r\n\t\tmax-width: 120%;\r\n\t}\r\n\t@media (max-width: $screen-medium) {\r\n\t\tpadding-left: 0;\r\n\t\tpadding-right: 0;\r\n\t\tpadding-bottom: 0;\r\n\t}\r\n\t@each $type, $color in $poke-types {\r\n\t\t&.#{$type} {\r\n\t\t\tbackground: linear-gradient(\r\n\t\t\t\tto right,\r\n\t\t\t\tdarken($color, 20%),\r\n\t\t\t\tdarken(mix($color, black, 80%), 20%)\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\t.card-image-wrapper {\r\n\t\tz-index: 2;\r\n\t\t&.active {\r\n\t\t\t.img-card-image {\r\n\t\t\t\topacity: 0;\r\n\t\t\t}\r\n\t\t\t.card-image-inner {\r\n\t\t\t\t&:after {\r\n\t\t\t\t\tdisplay: none;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t.img-card-image {\r\n\t\t\tmax-width: 240px;\r\n\t\t\tcursor: zoom-in;\r\n\t\t\tdisplay: block;\r\n\t\t\topacity: 1;\r\n\t\t\t&:hover {\r\n\t\t\t\tbox-shadow: $shadow-focus;\r\n\t\t\t}\r\n\t\t\t@media (max-height: $screen-small + 40px) {\r\n\t\t\t\topacity: 1 !important;\r\n\t\t\t\tcursor: default;\r\n\t\t\t}\r\n\t\t\t@media (max-width: $screen-medium) {\r\n\t\t\t\tmargin-left: auto;\r\n\t\t\t\tmargin-right: auto;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n.card-energies {\r\n\t.card-energy {\r\n\t\twidth: 24px;\r\n\t\theight: 24px;\r\n\t\tmargin-top: 1px;\r\n\t\tborder-radius: 50%;\r\n\t\ttransition: $transition;\r\n\t\tcursor: pointer;\r\n\t\tposition: relative;\r\n\t\tdisplay: block;\r\n\t\t&:hover {\r\n\t\t\tbox-shadow: $shadow-focus, $shadow-sheen;\r\n\t\t\tborder-color: $primary-color;\r\n\t\t}\r\n\t\t.card-energy-inner {\r\n\t\t\twidth: 24px;\r\n\t\t\theight: 24px;\r\n\t\t\tborder-radius: 50%;\r\n\t\t\tbox-shadow: $shadow-sheen;\r\n\t\t}\r\n\t\t@each $type, $color in $poke-types {\r\n\t\t\t&.#{$type} {\r\n\t\t\t\tbackground: $color;\r\n\t\t\t}\r\n\t\t}\r\n\t\t&:before {\r\n\t\t\tcontent: \"\";\r\n\t\t\tborder-radius: 50%;\r\n\t\t\twidth: 100%;\r\n\t\t\theight: 100%;\r\n\t\t\tbox-shadow: $shadow-sheen;\r\n\t\t\tz-index: 10;\r\n\t\t\tposition: absolute;\r\n\t\t\tborder: $border;\r\n\t\t\ttop: 0;\r\n\t\t\tleft: 0;\r\n\t\t}\r\n\t}\r\n\timg {\r\n\t\twidth: 24px;\r\n\t\theight: 24px;\r\n\t\tdisplay: block;\r\n\t\tborder-radius: 50%;\r\n\t\tbox-shadow: $shadow;\r\n\t}\r\n}\r\n.artist-link {\r\n\tcolor: white;\r\n}\r\n",
                    "styleUrl": "./card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cardService",
                        "type": "CardService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "expansionService",
                        "type": "ExpansionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pokemonService",
                        "type": "PokemonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userCardsService",
                        "type": "UserCardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cardService",
                        "type": "CardService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "expansionService",
                        "type": "ExpansionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pokemonService",
                        "type": "PokemonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userCardsService",
                        "type": "UserCardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"card\">\r\n  <!-- Card -->\r\n  <article\r\n    class=\"card-detail {{\r\n      card.types.length ? card.types[0].toLowerCase() : ''\r\n    }} flex z-2 padding-y-4 padding-x-2 relative flex-wrap flex-start\"\r\n    *ngIf=\"card\"\r\n  >\r\n    <!-- Pokeball -->\r\n    <img class=\"pokeball\" src=\"/assets/pokeball.png\" />\r\n\r\n    <div class=\"max flex width-12 z-3 relative\">\r\n      <div class=\"flex padded-2 box justify-center small-vertical\">\r\n        <!-- Card image -->\r\n        <div class=\"relative z-2 flex justify-center\">\r\n          <figure class=\"card-image-wrapper\" [class.active]=\"cardImageHover\">\r\n            <div class=\"card-image link\">\r\n              <img\r\n                src=\"{{ card.image }}\"\r\n                class=\"img-card-image border-radius-card shadow transition\"\r\n                (click)=\"createDialogCardImage()\"\r\n              />\r\n              <img src=\"{{ this.card.image_high_res }}\" style=\"display: none\" />\r\n            </div>\r\n          </figure>\r\n        </div>\r\n\r\n        <div class=\"relative z-1 flex medium-12 justify-center\">\r\n          <div class=\"panel medium-12 medium-square\" style=\"min-width: 320px\">\r\n            <div class=\"flex padded-small vertical\">\r\n              <!-- Card header -->\r\n              <div class=\"card-header\">\r\n                <div class=\"flex flex-center flex-nowrap padded\">\r\n                  <div class=\"card-name ellipsis box\">\r\n                    <h2>{{ card.name }}</h2>\r\n                  </div>\r\n                  <div\r\n                    class=\"flex padded flex-center flex-nowrap\"\r\n                    *ngIf=\"card.hp\"\r\n                  >\r\n                    <div class=\"card-hp bold h2\">\r\n                      <span class=\"subheading\">HP</span>{{ card.hp }}\r\n                    </div>\r\n                    <div class=\"card-energies flex flex-nowrap padded\">\r\n                      <div *ngFor=\"let type of card.types\">\r\n                        <a\r\n                          class=\"card-energy {{ type.toLowerCase() }}\"\r\n                          [routerLink]=\"\r\n                            '/cards/types/' +\r\n                            type.toLowerCase().replace(' ', '-')\r\n                          \"\r\n                        >\r\n                          <div class=\"card-energy-inner\">\r\n                            <img [src]=\"getTypeImage(type)\" />\r\n                          </div>\r\n                        </a>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"flex padded-small flex-nowrap\">\r\n                <div class=\"min-6\" *ngIf=\"card.pokemon\">\r\n                  <!-- Pokemon -->\r\n                  <pokemon-item-grid\r\n                    size=\"small\"\r\n                    [pokemonVariant]=\"card.pokemon.variant\"\r\n                  >\r\n                  </pokemon-item-grid>\r\n                </div>\r\n                <div class=\"min-6\">\r\n                  <!-- Expansion -->\r\n                  <expansion-item-grid\r\n                    size=\"small\"\r\n                    [expansion]=\"card.expansion\"\r\n                  >\r\n                  </expansion-item-grid>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"width-12\" *ngIf=\"false\">\r\n                <div class=\"flex padded-small\">\r\n                  <!-- TCG Player -->\r\n                  <div\r\n                    class=\"width-12 medium-6 small-12\"\r\n                    *ngIf=\"buttonTCGPlayer\"\r\n                  >\r\n                    <app-button [button]=\"buttonTCGPlayer\"></app-button>\r\n                  </div>\r\n\r\n                  <!-- TCG Player -->\r\n                  <div class=\"width-12 medium-6 small-12\" *ngIf=\"buttonEbay\">\r\n                    <app-button [button]=\"buttonEbay\"></app-button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div\r\n                class=\"card-rarity flex flex-center padded-small\"\r\n                *ngIf=\"tagRarity\"\r\n              >\r\n                <!-- Rarity -->\r\n                <div>\r\n                  <a\r\n                    [routerLink]=\"\r\n                      card.rarity &&\r\n                      '/cards/rarity/' +\r\n                        card.rarity.toLowerCase().replace(' ', '-')\r\n                    \"\r\n                  >\r\n                    <tag [tag]=\"tagRarity\"></tag>\r\n                  </a>\r\n                </div>\r\n\r\n                <!-- Number -->\r\n                <div class=\"subheading\">\r\n                  <tag [tag]=\"tagNumber\"></tag>\r\n                </div>\r\n\r\n                <!-- Artist -->\r\n                <div>\r\n                  <a\r\n                    class=\"artist-link\"\r\n                    [routerLink]=\"\r\n                      '/cards/artists/' +\r\n                      card.artist.toLowerCase().replace(' ', '-')\r\n                    \"\r\n                  >\r\n                    <tag [tag]=\"tagArtist\"></tag>\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </article>\r\n\r\n  <div class=\"relative z-1\">\r\n    <!-- User Cards -->\r\n    <div *ngIf=\"userCards\">\r\n      <user-cards [card_id]=\"card.id\" [userCards]=\"userCards\"> </user-cards>\r\n    </div>\r\n\r\n    <!-- Related -->\r\n    <div *ngIf=\"showRelated\">\r\n      <items\r\n        [items]=\"relatedCards\"\r\n        (outputGetItems)=\"getRelatedCards()\"\r\n        (outputDisplayModeChanged)=\"getRelatedCards()\"\r\n      >\r\n      </items>\r\n    </div>\r\n\r\n    <!-- Expansion -->\r\n    <div>\r\n      <items\r\n        [items]=\"expansionCards\"\r\n        (outputGetItems)=\"getExpansionCards()\"\r\n        (outputDisplayModeChanged)=\"getExpansionCards()\"\r\n      >\r\n      </items>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "CardImageDialogComponent",
            "id": "component-CardImageDialogComponent-54cd1eb0fb265fa715b71c32254ed84e16dff4cb1f274bcfd10ad3a9d09c60310578a83a0c7c58f7f12bbea2526ac7593a4b05060558501eb9455961bdde3dfa",
            "file": "src/app/pages/cards/card/card-image-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "card-image-dialog",
            "styleUrls": [],
            "styles": [],
            "template": "<img src=\"{{ config.data.image }}\" />",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogConfig",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogRef",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { DialogConfig, DialogRef } from '@app/controls/dialog';\r\nimport { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'card-image-dialog',\r\n  template: `<img src=\"{{ config.data.image }}\" />`,\r\n})\r\nexport class CardImageDialogComponent {\r\n  constructor(public config: DialogConfig, public dialog: DialogRef) {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "DialogConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "DialogRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "DialogConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "DialogRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "CardItemGridComponent",
            "id": "component-CardItemGridComponent-65904717c513af047fca9eeafc7d076df0b662f72134eed5ec609819aedfcc928402a18c7b0ec0f8e782d2eefd7e0e46d5e4f7b75c8ceb52e31f140b22dc48ac",
            "file": "src/app/pages/cards/card-item/card-item-grid/card-item-grid.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "card-item-grid",
            "styleUrls": [
                "./card-item-grid.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "card-item-grid.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "card",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Card",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "imageLoading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "textbox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "values",
                    "defaultValue": "['0', '0', '0', '1', '2', '3']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLoad",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { Textbox } from '@app/controls';\r\nimport { Card } from '../../card/card';\r\n\r\n@Component({\r\n  selector: 'card-item-grid',\r\n  templateUrl: 'card-item-grid.component.html',\r\n  styleUrls: ['./card-item-grid.component.scss'],\r\n})\r\nexport class CardItemGridComponent implements OnInit {\r\n  @Input() card: Card;\r\n  imageLoading: boolean = true;\r\n  textbox: Textbox;\r\n  values = ['0', '0', '0', '1', '2', '3'];\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    this.textbox = new Textbox({\r\n      type: 'number',\r\n      wrapperClasses: 'small',\r\n      value: this.values[Math.floor(Math.random() * this.values.length)],\r\n      min: 0,\r\n    });\r\n  }\r\n\r\n  onLoad() {\r\n    this.imageLoading = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n:host {\r\n  width: 100%;\r\n}\r\n\r\n.card-grid {\r\n  display: block;\r\n  transition: $transition;\r\n  border-radius: $border-radius-small;\r\n  flex: 1 0 0;\r\n  background: linear-gradient(transparent 50%, $menu-bg 51%);\r\n  cursor: pointer;\r\n  &:active {\r\n    border-color: $primary-color !important;\r\n    box-shadow: $shadow-focus !important;\r\n    outline: 0 !important;\r\n  }\r\n  &:hover {\r\n    box-shadow: $shadow-focus, $shadow-large;\r\n  }\r\n  .card-image-wrapper {\r\n    width: 100%;\r\n    position: relative;\r\n    &:after {\r\n      display: none;\r\n    }\r\n    .card-image {\r\n      width: 100%;\r\n      box-shadow: $shadow;\r\n      overflow: hidden;\r\n      border-radius: $border-radius-card;\r\n      position: relative;\r\n      z-index: 2;\r\n      &:before {\r\n        content: \"\";\r\n        width: 100%;\r\n        display: block;\r\n        padding-bottom: 100% * $card-ratio;\r\n        background: darken(white, 50%);\r\n        border-radius: $border-radius-card;\r\n      }\r\n      img {\r\n        display: block;\r\n        width: 100%;\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%, -50%);\r\n      }\r\n      .money-tag {\r\n        position: absolute;\r\n        bottom: 0;\r\n        left: 0;\r\n        margin: $spacing;\r\n        box-shadow: $shadow;\r\n      }\r\n      .collection {\r\n        position: absolute;\r\n        bottom: 0;\r\n        right: 0;\r\n        margin: $spacing;\r\n        background: lighten(black, 5%);\r\n        border-radius: $border-radius;\r\n        box-shadow: $shadow;\r\n        width: 44px;\r\n      }\r\n    }\r\n    > app-menu {\r\n      position: absolute;\r\n      left: $spacing;\r\n      bottom: $spacing;\r\n    }\r\n  }\r\n  .card-information {\r\n    width: 100%;\r\n    padding: ($spacing * 2.5) $spacing $spacing $spacing;\r\n    margin-top: -$spacing * 2;\r\n    border-bottom-left-radius: $border-radius-small;\r\n    border-bottom-right-radius: $border-radius-small;\r\n    bottom: 0;\r\n    background: rgba($menu-bg, 0.9);\r\n    display: flex;\r\n    flex-direction: column;\r\n    color: white;\r\n    line-height: 1;\r\n    position: relative;\r\n    z-index: 1;\r\n    &:after {\r\n      content: \"\";\r\n      border-radius: $border-radius-small;\r\n      width: 100%;\r\n      height: 100%;\r\n      box-shadow: $shadow-sheen;\r\n      z-index: 10;\r\n      position: absolute;\r\n      border: $border;\r\n      top: 0;\r\n      left: 0;\r\n    }\r\n    .card-name {\r\n      // Fix ellipsis overflow\r\n      padding-bottom: 4px;\r\n      margin-bottom: -4px;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./card-item-grid.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<a class=\"card-grid\" [routerLink]=\"card.route ? card.route : []\">\r\n  <div class=\"card-image-wrapper\" *ngIf=\"card.image\">\r\n    <div class=\"card-image\">\r\n      <loader [active]=\"imageLoading\"></loader>\r\n      <img src=\"{{ card.image }}\" [hidden]=\"imageLoading\" (load)=\"onLoad()\" />\r\n      <div\r\n        class=\"money-tag\"\r\n        *ngIf=\"false && card.last_prices && card.last_prices.market_price\"\r\n      >\r\n        {{ card.last_prices.market_price | currency }}\r\n      </div>\r\n      <div class=\"collection\">\r\n        <textbox [textbox]=\"textbox\"></textbox>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"card-information ellipsis\">\r\n      <div class=\"card-number subheading\">\r\n        {{ card.getCardNumber() }}\r\n      </div>\r\n      <div class=\"card-name ellipsis\">\r\n        {{ card.name }}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</a>\r\n"
        },
        {
            "name": "CardItemListComponent",
            "id": "component-CardItemListComponent-790715daf2ab9389734b8511ed6a0788e759b4c9c2619315a1132d50ade048150a56feb030005b73452ab70d6adbd7b687daedee45da350a1731a7ebbd68a8c0",
            "file": "src/app/pages/cards/card-item/card-item-list/card-item-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "card-item-list",
            "styleUrls": [
                "./card-item-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "card-item-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "card",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Card",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "imageLoading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLoad",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { Card } from '../../card/card';\r\n\r\n@Component({\r\n  selector: 'card-item-list',\r\n  templateUrl: 'card-item-list.component.html',\r\n  styleUrls: ['./card-item-list.component.scss'],\r\n})\r\nexport class CardItemListComponent implements OnInit {\r\n  @Input() card: Card;\r\n  imageLoading: boolean = true;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n\r\n  onLoad() {\r\n    this.imageLoading = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\",\r\n\t\t\"scaffold/typography\";\r\n\r\n.item {\r\n    transition: $transition;\r\n    cursor: pointer;\r\n    &:hover {\r\n\t\tbackground: rgba(black, .05);\r\n    }\r\n    &:active {\r\n\t\tborder-color: $primary-color!important;\r\n\t\tbox-shadow: $shadow-focus !important;\r\n\t\toutline: 0 !important;\r\n    }\r\n    .card-image {\r\n        &.placeholder img {\r\n            transform: translate(-50%, -50%) scale(1.4);    \r\n        }\r\n    }\r\n    @for $i from 1 through 50 {\r\n        &:nth-child(#{50 - $i}) {\r\n            z-index: $i;\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./card-item-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"padding item\">\r\n  <div\r\n    class=\"flex padded flex-center\"\r\n    [routerLink]=\"card.route ? card.route : []\"\r\n  >\r\n    <div style=\"max-width: 64px\">\r\n      <div class=\"card-image\" [class.placeholder]=\"!card.image\">\r\n        <loader *ngIf=\"false\" [active]=\"imageLoading\"></loader>\r\n        <img src=\"{{ card.image }}\" [hidden]=\"imageLoading\" (load)=\"onLoad()\" />\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"box\">\r\n      <div class=\"flex padded flex-center\">\r\n        <div class=\"width-3\">\r\n          <h6>{{ card.name }}</h6>\r\n        </div>\r\n        <div class=\"width-3\">\r\n          {{ card.expansion.name }}\r\n        </div>\r\n        <div class=\"width-2\">\r\n          {{ card.getCardNumber() }}\r\n        </div>\r\n        <div class=\"width-2\">\r\n          {{ card.rarity }}\r\n        </div>\r\n        <!-- <div class=\"width-2\">\r\n\t\t\t\t\t<div class=\"money-tag\" *ngIf=\"card.last_prices\">\r\n\t\t\t\t\t\t{{ card.last_prices.market_price | currency }}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div> -->\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "CardsComponent",
            "id": "component-CardsComponent-13138bcfa5ac1539d94d3ce296d1c9daabaf13760951bf4cd6f755b5f8c00a1a4ff89688072cf5dd127754ad68468226e26bfa919a2777efea5688ab976a843e",
            "file": "src/app/pages/cards/cards.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cards",
            "styleUrls": [
                "./cards.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./cards.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "artist",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "items",
                    "defaultValue": "new Items()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Items",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "rarity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "subtype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "supertype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "_getCards",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCards",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCardsResponse",
                    "args": [
                        {
                            "name": "res",
                            "type": "ResCards | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "res",
                            "type": "ResCards | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFilteredCards",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { CardsService, ResCards } from './cards.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { LoaderService } from '@app/controls';\r\nimport { ItemGroup, Items } from '@app/layout/main';\r\nimport { SetSortByCards } from './card/card';\r\nimport { AppSettings } from '@app/app';\r\nimport '@app/helpers/string.extensions';\r\nimport { APIGetPaged, Symbols } from '@app/models';\r\n\r\n@Component({\r\n  selector: 'cards',\r\n  templateUrl: './cards.component.html',\r\n  styleUrls: ['./cards.component.scss'],\r\n})\r\nexport class CardsComponent implements OnInit {\r\n  items: Items = new Items();\r\n  type: string;\r\n  artist: string;\r\n  supertype: string;\r\n  subtype: string;\r\n  rarity: string;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private titleService: Title,\r\n    private cardsService: CardsService,\r\n    private loaderService: LoaderService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.setupSubscriptions();\r\n    this.setupControls();\r\n  }\r\n\r\n  setupSubscriptions() {\r\n    this.route.params.subscribe((params) => {\r\n      this.type = params['type']?.replace('-', ' ');\r\n      this.artist = params['artist']?.replace('-', ' ');\r\n      this.supertype = params['supertype']?.replace('-', ' ');\r\n      this.subtype = params['subtype']?.replace('-', ' ');\r\n      this.rarity = params['rarity']?.replace('-', ' ');\r\n      if (\r\n        this.type ||\r\n        this.artist ||\r\n        this.supertype ||\r\n        this.subtype ||\r\n        this.rarity\r\n      ) {\r\n      } else {\r\n        this.getCards();\r\n      }\r\n    });\r\n    this.cardsService.getCardsObservable().subscribe((res) => {\r\n      this.getCardsResponse(res);\r\n    });\r\n    this.cardsService.getCardsFilteredObservable().subscribe((res) => {\r\n      this.getCardsResponse(res);\r\n    });\r\n  }\r\n\r\n  getCardsResponse(res: ResCards | null) {\r\n    if (res) {\r\n      this.items.footer.totalPages = res.total_pages;\r\n      this.items.footer.totalItems = res.total_results;\r\n      if (res.cards && res.cards.length) {\r\n        this.items.itemGroups = [\r\n          new ItemGroup({\r\n            items: res.cards,\r\n          }),\r\n        ];\r\n      } else {\r\n        this.items.itemGroups = [];\r\n      }\r\n    }\r\n  }\r\n\r\n  setupControls() {\r\n    this.items;\r\n    this.items.noResults = 'No cards found';\r\n    this.items.noResultsImage = Symbols.cards;\r\n    this.titleService.setTitle(AppSettings.titlePrefix + 'All Cards');\r\n    this.items.showHeader = false;\r\n    this.items.filter.textboxSearch.placeholder = 'Search Cards...';\r\n    this.items.filter.selectSortDirection.value = 'asc';\r\n    SetSortByCards(this.items.filter);\r\n  }\r\n\r\n  _getCards() {\r\n    if (\r\n      this.type ||\r\n      this.artist ||\r\n      this.supertype ||\r\n      this.subtype ||\r\n      this.rarity\r\n    ) {\r\n      this.getFilteredCards();\r\n    } else {\r\n      this.getCards();\r\n    }\r\n  }\r\n\r\n  getCards() {\r\n    this.items.showHeader = false;\r\n    this.cardsService.getCards(\r\n      new APIGetPaged({\r\n        page: this.items.footer.page,\r\n        page_size: this.items.footer.pageSize,\r\n        query: this.items.filter.textboxSearch.value,\r\n        sort_by: this.items.filter.selectSortBy.value,\r\n        sort_direction: this.items.filter.selectSortDirection.value,\r\n      })\r\n    );\r\n  }\r\n\r\n  getFilteredCards() {\r\n    this.cardsService.getCardsFiltered(\r\n      new APIGetPaged({\r\n        page: this.items.footer.page,\r\n        page_size: this.items.footer.pageSize,\r\n        query: this.items.filter.textboxSearch.value,\r\n        sort_by: this.items.filter.selectSortBy.value,\r\n        sort_direction: this.items.filter.selectSortDirection.value,\r\n        type: this.type,\r\n        rarity: this.rarity,\r\n        artist: this.artist,\r\n        subtype: this.subtype,\r\n        supertype: this.supertype,\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./cards.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<items [items]=\"items\" (outputGetItems)=\"_getCards()\"></items>\r\n"
        },
        {
            "name": "ChangePasswordDialogComponent",
            "id": "component-ChangePasswordDialogComponent-03571981efddfb1e883318aee96b9cdceafc6c632cf6dd21ae1dfbc8b4f317af9bf0b43f954e70609885f81ff023cc5bb83d743ef76f002e9619dff0bb1824eb",
            "file": "src/app/pages/user/edit-user/change-password-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "change-password-dialog",
            "styleUrls": [],
            "styles": [],
            "template": "<form class=\"flex vertical padded\">    <div>\n      <textbox [textbox]=\"textboxCurrentPassword\"></textbox>\n    </div>\n    <div>\n      <textbox [textbox]=\"textboxNewPassword\"></textbox>\n    </div>\n    <div>\n      <textbox [textbox]=\"textboxConfirmNewPassword\"></textbox>\n    </div>\n    <div>\n      <app-button [button]=\"buttonSubmit\"></app-button>\n    </div>\n  </form>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonSubmit",
                    "defaultValue": "new Button({\r\n    text: 'Save',\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogConfig",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogRef",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "textboxConfirmNewPassword",
                    "defaultValue": "new Textbox({\r\n    label: 'Confirm New Password',\r\n    type: 'password',\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "textboxCurrentPassword",
                    "defaultValue": "new Textbox({\r\n    label: 'Current Password',\r\n    type: 'password',\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "textboxNewPassword",
                    "defaultValue": "new Textbox({\r\n    label: 'New Password',\r\n    type: 'password',\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { DialogRef } from '@app/controls/dialog';\r\nimport { Component } from '@angular/core';\r\nimport { DialogConfig, Textbox, Button } from '@app/controls';\r\n\r\n@Component({\r\n  selector: 'change-password-dialog',\r\n  template: `<form class=\"flex vertical padded\">\r\n    <div>\r\n      <textbox [textbox]=\"textboxCurrentPassword\"></textbox>\r\n    </div>\r\n    <div>\r\n      <textbox [textbox]=\"textboxNewPassword\"></textbox>\r\n    </div>\r\n    <div>\r\n      <textbox [textbox]=\"textboxConfirmNewPassword\"></textbox>\r\n    </div>\r\n    <div>\r\n      <app-button [button]=\"buttonSubmit\"></app-button>\r\n    </div>\r\n  </form>`,\r\n})\r\nexport class ChangePasswordDialogComponent {\r\n  textboxCurrentPassword: Textbox = new Textbox({\r\n    label: 'Current Password',\r\n    type: 'password',\r\n  });\r\n  textboxNewPassword: Textbox = new Textbox({\r\n    label: 'New Password',\r\n    type: 'password',\r\n  });\r\n  textboxConfirmNewPassword: Textbox = new Textbox({\r\n    label: 'Confirm New Password',\r\n    type: 'password',\r\n  });\r\n  buttonSubmit: Button = new Button({\r\n    text: 'Save',\r\n  });\r\n  constructor(public config: DialogConfig, public dialog: DialogRef) {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "DialogConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "DialogRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "DialogConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "DialogRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-4ecf7cd6007f6f204f52700e8c5b372089d1dec41dd47ebd59a6762df4c65fdca671057a8242a9c75977b8ffaaf85e8d81183a48b85b3eec793e5af5fef6124e",
            "file": "src/app/controls/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => CheckboxComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "checkbox",
            "styleUrls": [
                "./checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checkbox",
                    "defaultValue": "new Checkbox()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "Checkbox",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "click",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "checked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "checked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, forwardRef } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\nimport { Checkbox } from './checkbox';\r\n\r\n@Component({\r\n  selector: 'checkbox',\r\n  templateUrl: './checkbox.component.html',\r\n  styleUrls: ['./checkbox.component.scss'],\r\n\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => CheckboxComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class CheckboxComponent implements ControlValueAccessor {\r\n  constructor() {}\r\n\r\n  click = (e: MouseEvent) => {\r\n    e.stopPropagation();\r\n  };\r\n\r\n  onChange: any = () => {};\r\n  onTouched: any = () => {};\r\n  registerOnChange(fn: any) {\r\n    this.onChange = fn;\r\n  }\r\n  registerOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\r\n  writeValue(checked: boolean) {\r\n    this.value = checked;\r\n  }\r\n  get value() {\r\n    return this.checkbox.checked;\r\n  }\r\n  set value(_value) {\r\n    this.checkbox.checked = _value;\r\n    this.onChange(_value);\r\n    this.onTouched();\r\n  }\r\n\r\n  @Input() checkbox: Checkbox = new Checkbox();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n.checkbox {\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tinput[type=\"checkbox\"] {\r\n\t\tappearance: none;\r\n\t\twidth: 24px;\r\n\t\theight: 24px;\r\n\t\tborder-radius: $border-radius-small;\r\n\t\tbox-shadow: $shadow-inset;\r\n\t\tborder: $border;\r\n\t\tbackground: $input-bg;\r\n\t\tposition: relative;\r\n\t\tmargin: 0;\r\n\t\ttransition: $transition;\r\n\t\tcursor: pointer;\r\n\t\t&:after {\r\n\t\t\tcontent: \"\";\r\n\t\t\twidth: 8px;\r\n\t\t\theight: 14px;\r\n\t\t\tborder-bottom: 3px solid $primary-color;\r\n\t\t\tborder-right: 3px solid $primary-color;\r\n\t\t\tmargin-top: -1px;\r\n\t\t\topacity: 0;\r\n\t\t\tposition: absolute;\r\n\t\t\ttop: 50%;\r\n\t\t\tleft: 50%;\r\n\t\t\ttransform: translate(-50%, -50%) rotate(45deg);\r\n\t\t\ttransition: $transition;\r\n\t\t}\r\n\t\t&:checked {\r\n\t\t\t&:after {\r\n\t\t\t\topacity: 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\t&:focus {\r\n\t\t\tbox-shadow: $shadow-focus-inset, $shadow-focus;\r\n\t\t\tborder-color: $primary-color;\r\n\t\t}\r\n\t}\r\n\tlabel {\r\n\t\tmargin-bottom: 0;\r\n\t\tpadding-left: $spacing;\r\n\t\tcursor: pointer;\r\n\t}\r\n}\r\n",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "_value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 39,
                        "jsdoctags": [
                            {
                                "name": "_value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 36
                    }
                }
            },
            "templateData": "<div class=\"checkbox\" (click)=\"click($event)\">\r\n\t<input [id]=\"checkbox.id\" type=\"checkbox\" [checked]=\"value\" />\r\n\t<label [for]=\"checkbox.id\" *ngIf=\"checkbox.text\" class=\"label\">{{checkbox.text}}</label>\r\n</div>"
        },
        {
            "name": "CollectionComponent",
            "id": "component-CollectionComponent-7a1e5ac66999e03f68451bf42dabc88e9ad65506924cee9bac54666951f35d3b168fd1f3672b5af4fbbc6153c6ffa27ab0ecaa1166fe282deadf478fc00c78ad",
            "file": "src/app/pages/collection/collection.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "collection",
            "styleUrls": [
                "./collection.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "collection.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "items",
                    "defaultValue": "new Items()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Items",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "menuSidebar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Menu",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "progressBar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProgressBar",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "showAddGroup",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "showAll",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "showDashboard",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "symbolCards",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Symbols",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "symbolPokemon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Symbols",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "getCollectionCards",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Menu, MenuItem, ProgressBar } from '@app/controls';\r\nimport { ItemGroup, Items } from '@app/layout';\r\nimport { Icons, Symbols, APIGetPaged } from '@app/models';\r\nimport { AuthenticationService } from '@app/pages/auth';\r\nimport { UserCardsService } from '@app/pages/collection';\r\n\r\n@Component({\r\n  selector: 'collection',\r\n  templateUrl: 'collection.component.html',\r\n  styleUrls: ['./collection.component.scss'],\r\n})\r\nexport class CollectionComponent implements OnInit {\r\n  progressBar: ProgressBar;\r\n  symbolCards: Symbols;\r\n  symbolPokemon: Symbols;\r\n  menuSidebar: Menu;\r\n  items: Items = new Items();\r\n\r\n  constructor(\r\n    private userCardsService: UserCardsService,\r\n    private authenticationService: AuthenticationService,\r\n    private router: Router\r\n  ) {\r\n    if (!this.authenticationService.currentUserValue) {\r\n      this.router.navigateByUrl('/');\r\n    }\r\n  }\r\n\r\n  showDashboard = () => {\r\n    return window.location.pathname === '/collection/dashboard';\r\n  };\r\n  showAddGroup = () => {\r\n    return window.location.pathname === '/collection/add';\r\n  };\r\n  showAll = () => {\r\n    return window.location.pathname === '/collection';\r\n  };\r\n\r\n  ngOnInit() {\r\n    this.setupSubscriptions();\r\n    this.setupControls();\r\n    this.getCollectionCards();\r\n  }\r\n\r\n  setupSubscriptions() {\r\n    this.userCardsService.getUserCardsObservable().subscribe((res: any) => {\r\n      if (res) {\r\n        this.items.footer.totalPages = res.total_pages;\r\n        this.items.footer.totalItems = res.total_results;\r\n        if (res.cards && res.cards.length) {\r\n          this.items.itemGroups = [\r\n            new ItemGroup({\r\n              items: res.cards,\r\n            }),\r\n          ];\r\n        } else {\r\n          this.items.itemGroups = [];\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  setupControls() {\r\n    this.progressBar = new ProgressBar({\r\n      total: 80,\r\n      value: 20,\r\n    });\r\n    this.symbolCards = Symbols.cards;\r\n    this.symbolPokemon = Symbols.pokeball;\r\n\r\n    this.menuSidebar = new Menu({\r\n      round: false,\r\n      items: [\r\n        new MenuItem({\r\n          text: 'Dashboard',\r\n          icon: Icons.dashboard,\r\n          route: '/collection/dashboard',\r\n          exactMatch: true,\r\n        }),\r\n        new MenuItem({\r\n          text: 'Wishlist',\r\n          icon: Icons.star,\r\n          route: '/collection/wishlist',\r\n          exactMatch: true,\r\n        }),\r\n        new MenuItem({\r\n          text: 'All Cards',\r\n          symbol: Symbols.cards,\r\n          route: '/collection',\r\n          exactMatch: true,\r\n        }),\r\n        new MenuItem({\r\n          text: 'Example Binder 1',\r\n          icon: Icons.archive,\r\n          route: '/collection/123',\r\n          exactMatch: true,\r\n        }),\r\n        new MenuItem({\r\n          text: 'Add Group',\r\n          icon: Icons.plus,\r\n          route: '/collection/add',\r\n          exactMatch: true,\r\n        }),\r\n      ],\r\n    });\r\n  }\r\n\r\n  getCollectionCards() {\r\n    this.userCardsService.getUserCards(\r\n      new APIGetPaged({\r\n        page: this.items.footer.page,\r\n        page_size: this.items.footer.pageSize,\r\n        query: this.items.filter.textboxSearch.value,\r\n        sort_by: this.items.filter.selectSortBy.value,\r\n        sort_direction: this.items.filter.selectSortDirection.value,\r\n        user_id: this.authenticationService.currentUserValue?.id,\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".symbol {\r\n\tdisplay: block;\r\n\tfilter: contrast(0) sepia(100%) hue-rotate(164deg) brightness(1) saturate(2);\r\n\twidth: 32px;\r\n}\r\n",
                    "styleUrl": "./collection.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userCardsService",
                        "type": "UserCardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "userCardsService",
                        "type": "UserCardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"flex h-100\">\r\n  <div class=\"input-bg\">\r\n    <app-menu [menu]=\"menuSidebar\"></app-menu>\r\n  </div>\r\n  <div class=\"box\">\r\n    <collection-dashboard *ngIf=\"showDashboard()\"></collection-dashboard>\r\n    <items\r\n      *ngIf=\"showAll()\"\r\n      [items]=\"items\"\r\n      (outputGetItems)=\"getCollectionCards()\"\r\n    ></items>\r\n    <user-card-group\r\n      class=\"padding-4 box\"\r\n      *ngIf=\"showAddGroup()\"\r\n    ></user-card-group>\r\n    <div class=\"max\" *ngIf=\"false\">\r\n      <div class=\"flex padded\">\r\n        <div class=\"width-4 medium-12\">\r\n          <div class=\"panel\">\r\n            <div class=\"flex padded\">\r\n              <div class=\"width-6 flex vertical flex-center\">\r\n                <img class=\"symbol\" [src]=\"symbolCards\" />\r\n                <h4>987<span class=\"subheading\">/40,000</span></h4>\r\n                <div class=\"subheading\">Total Cards</div>\r\n              </div>\r\n              <div class=\"width-6 flex vertical flex-center\">\r\n                <img class=\"symbol\" [src]=\"symbolPokemon\" />\r\n                <h4>300<span class=\"subheading\">/999</span></h4>\r\n                <div class=\"subheading\">Total Pokemon</div>\r\n              </div>\r\n              <div class=\"width-6\">\r\n                <h4>48<span class=\"subheading\">/88</span></h4>\r\n                <div class=\"subheading\">Total Sets</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"width-8 medium-12\">\r\n          <div class=\"panel\">\r\n            <h4>History</h4>\r\n            <p>Graph showing cards added to collection over time.</p>\r\n          </div>\r\n        </div>\r\n        <div class=\"width-6 medium-12\">\r\n          <div class=\"panel\">\r\n            <h4>Expansions</h4>\r\n            <p>Progress collecting each set, sorted by progress.</p>\r\n            <div class=\"flex padded\">\r\n              <div class=\"width-12\">\r\n                <h6>Hidden Fates</h6>\r\n                <progress-bar [progressBar]=\"progressBar\"></progress-bar>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"width-6 medium-12\">\r\n          <div class=\"panel\">\r\n            <h4>Pokemon</h4>\r\n            <p>Progress collecting each pokemon, sorted by progress.</p>\r\n            <div class=\"flex padded\">\r\n              <div class=\"col xlarge-12\">\r\n                <h6>Charizard</h6>\r\n                <progress-bar [progressBar]=\"progressBar\"></progress-bar>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-622d4f8d7da0838358f6076fa5336982b1cb0b403bdd3fc7b63f6c9cee22747a823cd38313b599d89bcff38a441ad0acf97cc4b04a6babc7e893f7789be48136",
            "file": "src/app/pages/collection/dashboard/collection-dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "collection-dashboard",
            "styleUrls": [
                "./collection-dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "collection-dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "emptyComingSoon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Empty",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Icons } from '@app/models';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Empty } from '@app/controls';\r\n\r\n@Component({\r\n  selector: 'collection-dashboard',\r\n  templateUrl: 'collection-dashboard.component.html',\r\n  styleUrls: ['./collection-dashboard.component.scss'],\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n  emptyComingSoon: Empty;\r\n  ngOnInit() {\r\n    this.emptyComingSoon = new Empty({\r\n      text: 'Dashboard Coming Soon...',\r\n      icon: Icons.dashboard,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./collection-dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<empty [empty]=\"emptyComingSoon\"></empty>\r\n"
        },
        {
            "name": "DialogComponent",
            "id": "component-DialogComponent-fab7eff75d64d3e12bcf7918025c0ce1ec2af8eb91eb7105965f4fe32a190d75493996bb4463dc3ccf93f1180b14e3ffb4db87af516a7066e04125210ba6a15d",
            "file": "src/app/controls/dialog/dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_onClose",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121,
                        144
                    ]
                },
                {
                    "name": "childComponentType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Type<any>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "componentRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogConfig",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "insertionPoint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InsertionDirective",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "InsertionDirective"
                        }
                    ]
                },
                {
                    "name": "onClose",
                    "defaultValue": "this._onClose.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "keyUp",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:keyup', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadChildComponent",
                    "args": [
                        {
                            "name": "componentType",
                            "type": "Type<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "componentType",
                            "type": "Type<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCloseClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDialogClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onOverlayClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:keyup",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { InsertionDirective } from './insertion.directive';\r\nimport { Subject } from 'rxjs';\r\nimport {\r\n  Component,\r\n  Type,\r\n  HostListener,\r\n  AfterViewInit,\r\n  OnDestroy,\r\n  ComponentRef,\r\n  ViewChild,\r\n  ComponentFactoryResolver,\r\n  ChangeDetectorRef,\r\n} from '@angular/core';\r\nimport { DialogRef } from './dialog';\r\nimport { DialogConfig } from '.';\r\n\r\n@Component({\r\n  templateUrl: './dialog.component.html',\r\n  styleUrls: ['./dialog.component.scss'],\r\n})\r\nexport class DialogComponent implements AfterViewInit, OnDestroy {\r\n  // Refs\r\n  componentRef: ComponentRef<any>;\r\n  childComponentType: Type<any>;\r\n  @ViewChild(InsertionDirective) insertionPoint: InsertionDirective;\r\n  private readonly _onClose = new Subject<any>();\r\n  public onClose = this._onClose.asObservable();\r\n  public config: DialogConfig;\r\n\r\n  // Close on escape key\r\n  @HostListener('window:keyup', ['$event'])\r\n  keyUp(event: KeyboardEvent) {\r\n    if (event.key === 'Escape') {\r\n      this.dialogRef.close();\r\n    }\r\n  }\r\n\r\n  constructor(\r\n    private componentFactoryResolver: ComponentFactoryResolver,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n    private dialogRef: DialogRef\r\n  ) {}\r\n\r\n  ngAfterViewInit(): void {\r\n    this.loadChildComponent(this.childComponentType);\r\n    this.changeDetectorRef.detectChanges();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.componentRef) this.componentRef.destroy();\r\n  }\r\n\r\n  onOverlayClicked(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onCloseClicked(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onDialogClicked(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n\r\n  loadChildComponent(componentType: Type<any>): void {\r\n    const componentFactory =\r\n      this.componentFactoryResolver.resolveComponentFactory(componentType);\r\n    const viewContainerRef = this.insertionPoint.viewContainerRef;\r\n    viewContainerRef.clear();\r\n    this.componentRef = viewContainerRef.createComponent(componentFactory);\r\n  }\r\n\r\n  close(): void {\r\n    this._onClose.next('');\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n:host {\r\n  position: fixed;\r\n  z-index: 999;\r\n}\r\n\r\n.dialog {\r\n  top: 50%;\r\n  left: 50%;\r\n  position: absolute;\r\n  transform: translate(-50%, -50%);\r\n  min-width: 200px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background: $panel-bg;\r\n  box-shadow: $shadow-large;\r\n  border-radius: $border-radius-small;\r\n  max-width: calc(100% - #{$spacing * 4});\r\n  max-height: calc(100% - #{$spacing * 4});\r\n  overflow: hidden;\r\n  z-index: 999;\r\n  @media (max-width: $screen-small) {\r\n    width: calc(100% - #{$spacing * 4});\r\n  }\r\n  cursor: default;\r\n  .dialog-header {\r\n    padding: $spacing * 2;\r\n    border-bottom: $border;\r\n    .dialog-close {\r\n      position: relative;\r\n      cursor: pointer;\r\n      transition: $transition;\r\n      border-radius: $border-radius-small;\r\n      width: 24px;\r\n      height: 24px;\r\n      &:hover {\r\n        box-shadow: $shadow-focus;\r\n      }\r\n      &:before,\r\n      &:after {\r\n        content: \"\";\r\n        position: absolute;\r\n        width: 16px;\r\n        height: 2px;\r\n        background: $font-color;\r\n        top: 50%;\r\n        left: 50%;\r\n      }\r\n      &:before {\r\n        transform: translate(-50%, -50%) rotate(45deg);\r\n      }\r\n      &:after {\r\n        transform: translate(-50%, -50%) rotate(-45deg);\r\n      }\r\n    }\r\n  }\r\n  .dialog-content {\r\n    padding: $spacing * 2;\r\n    flex: 1;\r\n    overflow-y: auto;\r\n  }\r\n}\r\n",
                    "styleUrl": "./dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "DialogRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "DialogRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"overlay active pointer\" (click)=\"onOverlayClicked()\">\r\n  <div class=\"dialog\" (click)=\"onDialogClicked($event)\">\r\n    <div class=\"dialog-header\">\r\n      <div class=\"flex padded flex-center\">\r\n        <div class=\"box min-0 ellipsis\">\r\n          <div class=\"dialog-title\">\r\n            <h4>{{ config.title }}</h4>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <div class=\"dialog-close\" (click)=\"onCloseClicked()\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"dialog-content\">\r\n      <ng-template appInsertion></ng-template>\r\n    </div>\r\n    <!-- <div class=\"dialog-footer\" *ngIf=\"dialog.buttons.length\">\r\n      <div class=\"flex padded\">\r\n        <div *ngFor=\"let button of dialog.buttons\">\r\n          <app-button [button]=\"button\"></app-button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <loader [active]=\"loading\"></loader> -->\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "EditorComponent",
            "id": "component-EditorComponent-0df567fad527196354a5938a11beb1f41a65a615129fd8838875c216fa51f2a4a4cb9ab892148ea71d56f774d7104e63050675fd03e6d9cc17c30d90a2abb5e8",
            "file": "src/app/controls/editor/editor.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "editor",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "editor.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "editor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Editor",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onReady",
                    "args": [
                        {
                            "name": "editor",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "editor",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\n//import * as ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport { Editor } from './editor';\r\n\r\n@Component({\r\n  selector: 'editor',\r\n  templateUrl: 'editor.component.html',\r\n})\r\nexport class EditorComponent implements OnInit {\r\n  @Input() editor: Editor;\r\n\r\n  //ckEditor = ClassicEditor;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n\r\n  onReady(editor: any) {\r\n    editor.ui\r\n      .getEditableElement()\r\n      .parentElement.insertBefore(\r\n        editor.ui.view.toolbar.element,\r\n        editor.ui.getEditableElement()\r\n      );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<label *ngIf=\"editor.label\" class=\"label\">{{ editor.label }}</label>\r\n<!-- <ckeditor [editor]=\"ckEditor\" [(ngModel)]=\"editor.value\" (ready)=\"onReady($event)\"></ckeditor> -->\r\n"
        },
        {
            "name": "EditUserComponent",
            "id": "component-EditUserComponent-6147025e784abb36d19670a0be97652df22869b7a9a421f08439a355cf9c5690f96b683fae7f6397a8703a4eb2c940351a44da78bdc542b9cc95fdab3b5f6a57",
            "file": "src/app/pages/user/edit-user/edit-user.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "edit-user",
            "styleUrls": [
                "./edit-user.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-user.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonCancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "buttonChangePassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "buttonSubmit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "selectFavoritePokemon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Select",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "selectUserIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Select",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "textboxEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "textboxUsername",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "togglePublic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Toggle",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n  DialogConfig,\r\n  DialogService,\r\n  Select,\r\n  Textbox,\r\n  Toggle,\r\n} from '@app/controls';\r\nimport { Button, ButtonType } from '@app/controls/button';\r\nimport { AuthenticationService } from '@app/pages/auth/auth.service';\r\nimport { ChangePasswordDialogComponent } from './change-password-dialog.component';\r\n\r\n@Component({\r\n  selector: 'edit-user',\r\n  templateUrl: './edit-user.component.html',\r\n  styleUrls: ['./edit-user.component.scss'],\r\n})\r\nexport class EditUserComponent implements OnInit {\r\n  form: FormGroup;\r\n  textboxUsername: Textbox;\r\n  textboxEmail: Textbox;\r\n  togglePublic: Toggle;\r\n  buttonSubmit: Button;\r\n  buttonCancel: Button;\r\n  selectUserIcon: Select;\r\n  selectFavoritePokemon: Select;\r\n  buttonChangePassword: Button;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private authenticationService: AuthenticationService,\r\n    private dialogService: DialogService\r\n  ) {\r\n    if (!this.authenticationService.currentUserValue) {\r\n      this.router.navigateByUrl('/');\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.form = this.formBuilder.group({\r\n      emailControl: [''],\r\n      usernameControl: [''],\r\n      userIconControl: [''],\r\n      favoritePokemonControl: [''],\r\n      publicControl: [''],\r\n    });\r\n    this.textboxEmail = new Textbox({\r\n      label: 'Email',\r\n      type: 'email',\r\n      readOnly: true,\r\n      value: this.authenticationService.currentUserValue?.email,\r\n    });\r\n    this.textboxUsername = new Textbox({\r\n      label: 'Username',\r\n      readOnly: true,\r\n      value: this.authenticationService.currentUserValue?.name,\r\n    });\r\n    this.selectUserIcon = new Select({\r\n      advancedSelect: true,\r\n      multiple: false,\r\n      options: [],\r\n      label: 'Icon',\r\n    });\r\n    this.selectFavoritePokemon = new Select({\r\n      advancedSelect: true,\r\n      multiple: false,\r\n      options: [],\r\n      label: 'Favorite Pokemon',\r\n    });\r\n    this.togglePublic = new Toggle({\r\n      label: 'Visibility',\r\n      text: 'Private',\r\n      textChecked: 'Public',\r\n    });\r\n    this.buttonSubmit = new Button({\r\n      text: 'Save Profile',\r\n      type: ButtonType.submit,\r\n    });\r\n    this.buttonCancel = new Button({\r\n      text: 'Cancel',\r\n      classes: 'secondary',\r\n    });\r\n    this.buttonChangePassword = new Button({\r\n      text: 'Change Password',\r\n      click: () => {\r\n        this.dialogService.open(\r\n          ChangePasswordDialogComponent,\r\n          new DialogConfig({\r\n            title: 'Change Password',\r\n          })\r\n        );\r\n      },\r\n    });\r\n  }\r\n\r\n  submit() {\r\n    if (this.form.invalid) {\r\n      return;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./edit-user.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form\r\n  class=\"padding-8 flex justify-center\"\r\n  [formGroup]=\"form\"\r\n  (ngSubmit)=\"submit()\"\r\n>\r\n  <div class=\"max-100\" style=\"width: 400px\">\r\n    <div class=\"flex vertical padded\">\r\n      <div>\r\n        <h1>Edit Profile</h1>\r\n      </div>\r\n      <div>\r\n        <textbox [textbox]=\"textboxEmail\"></textbox>\r\n      </div>\r\n      <div>\r\n        <textbox [textbox]=\"textboxUsername\"></textbox>\r\n      </div>\r\n      <div>\r\n        <app-select [select]=\"selectFavoritePokemon\"></app-select>\r\n      </div>\r\n      <div>\r\n        <app-select [select]=\"selectUserIcon\"></app-select>\r\n      </div>\r\n      <div>\r\n        <toggle [toggle]=\"togglePublic\"></toggle>\r\n      </div>\r\n      <div>\r\n        <app-button [button]=\"buttonChangePassword\"></app-button>\r\n      </div>\r\n      <div class=\"flex padded\">\r\n        <app-button [button]=\"buttonCancel\"></app-button>\r\n        <app-button [button]=\"buttonSubmit\"></app-button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</form>\r\n"
        },
        {
            "name": "EmptyComponent",
            "id": "component-EmptyComponent-60a83c79e60604d200156a8372eca650759a67ab6970bfdb99f1932f6a206d644ff5a1310c759a25cdd2f55cdcd1335c597e85a2280561a43cfa7413e8b51765",
            "file": "src/app/controls/empty/empty.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "empty",
            "styleUrls": [
                "./empty.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./empty.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "empty",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Empty",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { Empty } from './empty';\r\n\r\n@Component({\r\n  selector: 'empty',\r\n  templateUrl: './empty.component.html',\r\n  styleUrls: ['./empty.component.scss'],\r\n})\r\nexport class EmptyComponent implements OnInit {\r\n  @Input() empty: Empty;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n.empty {\r\n\ttext-align: center;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\talign-items: center;\r\n\tcolor: $font-color;\r\n\tpadding: 64px 16px;\r\n\tfa-icon {\r\n\t\twidth: 128px;\r\n\t\theight: 128px;\r\n\t\topacity: 0.5;\r\n\t\tpadding: $spacing * 2;\r\n\t}\r\n\timg {\r\n\t\twidth: 128px;\r\n\t\theight: 128px;\r\n\t\topacity: 0.4;\r\n\t\tpadding: $spacing;\r\n\t\tfilter: invert(1);\r\n\t}\r\n}\r\n",
                    "styleUrl": "./empty.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- Empty -->\r\n<div class=\"empty\">\r\n  <fa-icon *ngIf=\"!empty.image\" [icon]=\"empty.icon\"> </fa-icon>\r\n  <img *ngIf=\"empty.image\" [src]=\"empty.image\" />\r\n  <p>{{ empty.text }}</p>\r\n  <app-button *ngIf=\"empty.button\" [button]=\"empty.button\"></app-button>\r\n</div>\r\n"
        },
        {
            "name": "ExpansionComponent",
            "id": "component-ExpansionComponent-b071d562db80564b72883db88cfaf2c562a33dcf96fdfb18c74871cefcc40a5167954f350e90713057410b2f3d3ba654508b1fbb4f1f306eb906a02ce89457b8",
            "file": "src/app/pages/expansions/expansion/expansion.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "expansion",
            "styleUrls": [
                "./expansion.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./expansion.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cardsComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CardsComponent",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "CardsComponent"
                        }
                    ]
                },
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "items",
                    "defaultValue": "new Items()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Items",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "getExpansion",
                    "args": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "code",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getExpansionCards",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleParams",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "subscribeExpansion",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "subscribeExpansionCards",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ExpansionService } from '@app/pages/expansions/expansion/expansion.service';\r\nimport { SetPageSize, SetSortByExpansion } from './expansion';\r\nimport { CardsComponent, SetSortByCards } from '@app/pages/cards';\r\nimport { DatePipe } from '@angular/common';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { LoaderService, Menu, MenuItem } from '@app/controls';\r\nimport { ItemGroup, Items } from '@app/layout/main';\r\nimport { AppSettings } from '@app/app';\r\nimport { ProgressBar } from '@app/controls/progress-bar/progress-bar';\r\nimport { APIGetPaged } from '@app/models';\r\n\r\n@Component({\r\n  selector: 'expansion',\r\n  templateUrl: './expansion.component.html',\r\n  styleUrls: ['./expansion.component.scss'],\r\n})\r\nexport class ExpansionComponent implements OnInit {\r\n  @ViewChild(CardsComponent) cardsComponent: CardsComponent;\r\n  items: Items = new Items();\r\n  code: string;\r\n\r\n  constructor(\r\n    private loaderService: LoaderService,\r\n    private titleService: Title,\r\n    private datePipe: DatePipe,\r\n    private expansionService: ExpansionService,\r\n    private route: ActivatedRoute\r\n  ) {}\r\n\r\n  ngOnDestroy() {}\r\n  ngOnInit() {\r\n    this.subscribeExpansion();\r\n    this.subscribeExpansionCards();\r\n    this.setupControls();\r\n    this.handleParams();\r\n    SetSortByExpansion(this.items.filter);\r\n    SetPageSize(this.items.footer);\r\n  }\r\n\r\n  subscribeExpansion() {\r\n    this.expansionService.getExpansionObservable().subscribe((expansion) => {\r\n      if (expansion) {\r\n        this.titleService.setTitle(AppSettings.titlePrefix + expansion.name);\r\n        this.items.header.symbol = expansion.logo;\r\n        this.items.header.progressBar = new ProgressBar({\r\n          value: 12,\r\n          total: expansion.total_cards,\r\n        });\r\n        if (expansion.series.name === expansion.name) {\r\n          this.items.header.title = expansion.name;\r\n        } else {\r\n          this.items.header.title =\r\n            expansion.series.name + ' - ' + expansion.name;\r\n        }\r\n        this.items.header.subtitle = `${\r\n          expansion.total_cards\r\n        } Cards - ${this.datePipe.transform(expansion.release_date)}`;\r\n      }\r\n    });\r\n  }\r\n\r\n  subscribeExpansionCards() {\r\n    this.expansionService.getExpansionCardsObservable().subscribe((res) => {\r\n      if (res) {\r\n        this.items.itemGroups = [];\r\n        this.items.itemGroups.push(\r\n          new ItemGroup({\r\n            items: res.cards,\r\n          })\r\n        );\r\n        this.items.footer.totalPages = res.total_pages;\r\n        this.items.footer.totalItems = res.total_results;\r\n      }\r\n    });\r\n  }\r\n\r\n  setupControls() {\r\n    SetSortByCards(this.items.filter);\r\n  }\r\n\r\n  handleParams() {\r\n    this.route.params.subscribe((params) => {\r\n      this.getExpansion(params['code']);\r\n    });\r\n  }\r\n\r\n  getExpansion(code: string) {\r\n    this.code = code;\r\n    this.expansionService.getExpansion(\r\n      new APIGetPaged({\r\n        code: code,\r\n        page: this.items.footer.page,\r\n        page_size: this.items.footer.pageSize,\r\n        query: this.items.filter.textboxSearch.value,\r\n        sort_by: this.items.filter.selectSortBy.value,\r\n        sort_direction: this.items.filter.selectSortDirection.value,\r\n      })\r\n    );\r\n    this.getExpansionCards();\r\n  }\r\n\r\n  getExpansionCards() {\r\n    this.expansionService.getExpansionCards(\r\n      new APIGetPaged({\r\n        code: this.code,\r\n        page: this.items.footer.page,\r\n        page_size: this.items.footer.pageSize,\r\n        query: this.items.filter.textboxSearch.value,\r\n        sort_by: this.items.filter.selectSortBy.value,\r\n        sort_direction: this.items.filter.selectSortDirection.value,\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./expansion.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "expansionService",
                        "type": "ExpansionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "expansionService",
                        "type": "ExpansionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<items [items]=\"items\" (outputGetItems)=\"getExpansionCards()\"> </items>\r\n"
        },
        {
            "name": "ExpansionItemGridComponent",
            "id": "component-ExpansionItemGridComponent-ff9328a1d0f4be91d4bf6b0e562b1586bb909f4d9bbc02e9a7bef015babe91b031e364f9ff2c02197dde4d782a63565b9ae1695fd90d93d55cea9e6606eebcac",
            "file": "src/app/pages/expansions/expansion-item/expansion-item-grid/expansion-item-grid.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "expansion-item-grid",
            "styleUrls": [
                "./expansion-item-grid.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "expansion-item-grid.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "expansion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Expansion",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "progressBar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProgressBar",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { ProgressBar } from '@app/controls/progress-bar/progress-bar';\r\nimport { Expansion } from '../../expansion/expansion';\r\n\r\n@Component({\r\n  selector: 'expansion-item-grid',\r\n  templateUrl: 'expansion-item-grid.component.html',\r\n  styleUrls: ['./expansion-item-grid.component.scss'],\r\n})\r\nexport class ExpansionItemGridComponent implements OnInit {\r\n  @Input() expansion: Expansion;\r\n  @Input() size: string;\r\n\r\n  progressBar: ProgressBar;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    this.progressBar = new ProgressBar({\r\n      value: this.expansion.progress,\r\n      total: this.expansion.total_cards,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n:host {\r\n\tdisplay: flex;\r\n\tflex: 1;\r\n\twidth: 100%;\r\n}\r\n\r\n.item-grid-expansion {\r\n\tflex: 1;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\talign-items: center;\r\n\tborder-radius: $border-radius-small;\r\n\twidth: 100%;\r\n\ttransition: $transition;\r\n\toverflow: hidden;\r\n\tposition: relative;\r\n\t&:after {\r\n\t\tcontent: \"\";\r\n\t\tborder-radius: $border-radius-small;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tbox-shadow: $shadow-sheen;\r\n\t\tz-index: 10;\r\n\t\tposition: absolute;\r\n\t\tborder: $border;\r\n\t}\r\n\t&:hover {\r\n\t\tborder-color: $primary-color;\r\n\t\tbox-shadow: $shadow-focus;\r\n\t\t&:after {\r\n\t\t\tborder-color: $primary-color;\r\n\t\t}\r\n\t}\r\n\r\n\t&.small {\r\n\t\t.expansion-logo {\r\n\t\t\t.expansion-logo-inner {\r\n\t\t\t\theight: 80px;\r\n\t\t\t\timg:not(.symbol) {\r\n\t\t\t\t\tpadding: $spacing * 2;\r\n\t\t\t\t\tmax-width: 80%;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t.expansion-logo {\r\n\t\tdisplay: block;\r\n\t\twidth: 100%;\r\n\t\tposition: relative;\r\n\t\tbackground: $panel-bg;\r\n\t\t.expansion-logo-inner {\r\n\t\t\tposition: relative;\r\n\t\t\theight: 160px;\r\n\t\t}\r\n\t\timg:not(.symbol) {\r\n\t\t\tpadding: $spacing * 4;\r\n\t\t\tposition: absolute;\r\n\t\t\ttop: 50%;\r\n\t\t\tleft: 50%;\r\n\t\t\ttransform: translate(-50%, -50%);\r\n\t\t\tmax-height: 80%;\r\n\t\t\tmax-width: 100%;\r\n\t\t}\r\n\r\n\t\t.symbol {\r\n\t\t\theight: 24px;\r\n\t\t\tmargin: $spacing;\r\n\t\t}\r\n\t}\r\n\t.expansion-info {\r\n\t\twidth: 100%;\r\n\t\tpadding: $spacing;\r\n\t\tbackground: $main-bg;\r\n\t\tcolor: white;\r\n\t}\r\n}\r\n",
                    "styleUrl": "./expansion-item-grid.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<a\r\n\tclass=\"item-grid-expansion {{size}}\"\r\n\t[routerLink]=\"expansion.route ? expansion.route : []\">\r\n\t\r\n\t<figure class=\"expansion-logo\">\r\n\t\t<div class=\"expansion-logo-inner\">\r\n\t\t\t<img *ngIf=\"expansion.name !== 'Base'\" class=\"symbol\" src=\"{{expansion.symbol}}\" />\r\n\t\t\t<img src=\"{{expansion.logo}}\" />\r\n\t\t</div>\r\n\t\t<progress-bar\r\n\t\t\tclass=\"padding block padding-top-none\"\r\n\t\t\t[progressBar]=\"progressBar\">\r\n\t\t</progress-bar>\r\n\t</figure>\r\n\r\n\t<figcaption class=\"expansion-info flex vertical\">\r\n\t\t<div class=\"expansion-name ellipsis max-12\">\r\n\t\t\t{{expansion.name}}\r\n\t\t</div>\r\n\t\t<div class=\"flex\">\r\n\t\t\t<span class=\"subheading expansion-release-date\">\r\n\t\t\t\t{{expansion.release_date | date}} -\r\n\t\t\t</span>\r\n\t\t\t<span class=\"subheading expansion-total-cards\">\r\n\t\t\t\t{{expansion.total_cards}} Cards\r\n\t\t\t</span>\r\n\t\t</div>\r\n\t</figcaption>\r\n\r\n</a>"
        },
        {
            "name": "ExpansionItemListComponent",
            "id": "component-ExpansionItemListComponent-4c7cad72e3cc41dd8f988ebf377cbecfeceba4a4f693162ac212456a1f773a5fad03d65b1740421266d71b13678ecfa4d2eee452a80deb6b52a3f4a00fa8cd99",
            "file": "src/app/pages/expansions/expansion-item/expansion-item-list/expansion-item-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "expansion-item-list",
            "styleUrls": [
                "./expansion-item-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "expansion-item-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "expansion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Expansion",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { Expansion } from '../../expansion/expansion';\r\n\r\n@Component({\r\n  selector: 'expansion-item-list',\r\n  templateUrl: 'expansion-item-list.component.html',\r\n  styleUrls: ['./expansion-item-list.component.scss'],\r\n})\r\nexport class ExpansionItemListComponent implements OnInit {\r\n  @Input() expansion: Expansion;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\",\r\n\t\t\"scaffold/typography\";\r\n\r\n.item {\r\n    transition: $transition;\r\n    cursor: pointer;\r\n    &:hover {\r\n\t\tbackground: rgba(black, .05);\r\n    }\r\n    &:active {\r\n\t\tborder-color: $primary-color!important;\r\n\t\tbox-shadow: $shadow-focus !important;\r\n\t\toutline: 0 !important;\r\n    }\r\n    .expansion-symbol {\r\n        position: relative;\r\n\t\twidth: 40px;\r\n\t\theight: 40px;\r\n\t\toverflow: hidden;\r\n\t\tborder-radius: 4px;\r\n\t\timg {\r\n\t\t\tposition: absolute;\r\n\t\t\tmax-height: 100%;\r\n\t\t\ttop: 50%;\r\n\t\t\tleft: 50%;\r\n\t\t\ttransform: translate(-50%, -50%);\r\n\t\t\tpadding: 4px;\r\n\t\t}\r\n\t}\r\n    @for $i from 1 through 50 {\r\n        &:nth-child(#{50 - $i}) {\r\n            z-index: $i;\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./expansion-item-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"padding item\">\r\n\t<div\r\n\t\tclass=\"flex padded flex-center\"\r\n\t\t[routerLink]=\"expansion.route ? expansion.route : []\">\r\n\r\n\t\t<div class=\"flex padded flex-center box\">\r\n\t\t\t<div>\r\n\t\t\t\t<div class=\"expansion-symbol\">\r\n\t\t\t\t\t<img src=\"{{expansion.symbol}}\" />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"box\">\r\n\t\t\t\t<div class=\"flex padded flex-center\">\r\n\t\t\t\t\t<span class=\"width-6\">\r\n\t\t\t\t\t\t{{expansion.name}}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<span class=\"width-3 subheading\">\r\n\t\t\t\t\t\t{{expansion.release_date | date}}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<span class=\"width-3 subheading\">\r\n\t\t\t\t\t\t{{expansion.total_cards}} Cards\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t</div>\r\n</div>"
        },
        {
            "name": "ExpansionsComponent",
            "id": "component-ExpansionsComponent-ed0d5e01981c0678ed9ff006ec6af526f058ceaa9c766f61c8bc2e4dcdca7d5a60c08b3dcb682e1d334f9ab1a1fc575642b00fd2c08035feeaa6f93cc0c2d83f",
            "file": "src/app/pages/expansions/expansions.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "expansions",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./expansions.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "items",
                    "defaultValue": "new Items()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Items",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "getItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "responseGetExpansions",
                    "args": [
                        {
                            "name": "seriesList",
                            "type": "Series[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "seriesList",
                            "type": "Series[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setupControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { AppSettings } from '@app/app';\r\nimport { Items } from '@app/layout';\r\nimport { APIGetPaged, Icons } from '@app/models';\r\nimport { Series, SetSortByExpansions } from './expansion/expansion';\r\nimport { ExpansionsService } from './expansions.service';\r\n\r\n@Component({\r\n  selector: 'expansions',\r\n  templateUrl: './expansions.component.html',\r\n})\r\nexport class ExpansionsComponent implements OnInit {\r\n  items: Items = new Items();\r\n\r\n  constructor(\r\n    private titleService: Title,\r\n    private expansionsService: ExpansionsService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.setupControls();\r\n    this.setupSubscriptions();\r\n  }\r\n\r\n  setupSubscriptions() {\r\n    this.expansionsService.getExpansionsObservable().subscribe((series) => {\r\n      if (series) this.responseGetExpansions(series);\r\n    });\r\n  }\r\n\r\n  responseGetExpansions(seriesList: Series[]) {\r\n    if (seriesList) {\r\n      this.items.itemGroups = seriesList.map((series) => ({\r\n        items: series.expansions,\r\n        name: series.name,\r\n        progress: 24,\r\n      }));\r\n    }\r\n  }\r\n\r\n  setupControls() {\r\n    this.items.noResults = 'No expansions found';\r\n    this.items.noResultsIcon = Icons.box;\r\n    this.titleService.setTitle(AppSettings.titlePrefix + 'Expansions');\r\n    this.items.showHeader = false;\r\n    this.items.showFooter = false;\r\n    this.items.itemClasses = 'width-3 medium-4 small-6';\r\n    this.items.filter.textboxSearch.placeholder = 'Search Expansions...';\r\n    this.items.filter.selectSortDirection.value = 'desc';\r\n    this.items.footer.pageSize = 100;\r\n    SetSortByExpansions(this.items.filter);\r\n  }\r\n\r\n  getItems() {\r\n    this.expansionsService.getExpansions(\r\n      new APIGetPaged({\r\n        query: this.items.filter.textboxSearch.value,\r\n        sort_by: this.items.filter.selectSortBy.value,\r\n        sort_direction: this.items.filter.selectSortDirection.value,\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "expansionsService",
                        "type": "ExpansionsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "expansionsService",
                        "type": "ExpansionsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<items [items]=\"items\" (outputGetItems)=\"getItems()\"> </items>\r\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-79be433265a790532a5ad1143f08a9104f3329d2bef04ecc812be4b5154657ae49148df1bf9af505a8f4ebc791dd62507a8024fa87eea5a39df16012ab741ec6",
            "file": "src/app/layout/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [
                "./footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menuCenter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Menu",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "menuLeft",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Menu",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "year",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Menu, MenuItem } from '@app/controls';\r\nimport { Icons, Symbols } from '@app/models';\r\n\r\n@Component({\r\n  selector: 'app-footer',\r\n  templateUrl: './footer.component.html',\r\n  styleUrls: ['./footer.component.scss'],\r\n})\r\nexport class FooterComponent implements OnInit {\r\n  year: number;\r\n  menuLeft: Menu;\r\n  menuCenter: Menu;\r\n\r\n  ngOnInit() {\r\n    this.year = new Date().getFullYear();\r\n    this.menuLeft = new Menu({\r\n      items: [\r\n        new MenuItem({\r\n          icon: Icons.house,\r\n          text: 'Home',\r\n          route: '/',\r\n          exactMatch: true,\r\n        }),\r\n        new MenuItem({\r\n          icon: Icons.box,\r\n          text: 'Expansions',\r\n          route: '/expansions',\r\n        }),\r\n        new MenuItem({\r\n          symbol: Symbols.cards,\r\n          text: 'Cards',\r\n          route: '/cards',\r\n        }),\r\n        new MenuItem({\r\n          symbol: Symbols.pokeball,\r\n          text: 'Pokémon',\r\n          route: '/pokemon',\r\n        }),\r\n        new MenuItem({\r\n          icon: Icons.archive,\r\n          text: 'Collection',\r\n          route: '/collection',\r\n        }),\r\n      ],\r\n    });\r\n    this.menuCenter = new Menu({\r\n      items: [\r\n        new MenuItem({\r\n          href: 'https://discord.gg/AQFwQDVU',\r\n          text: 'Discord',\r\n          symbol: Symbols.discord,\r\n        }),\r\n        new MenuItem({\r\n          text: 'Patreon',\r\n          symbol: Symbols.patreon,\r\n        }),\r\n        new MenuItem({\r\n          text: 'YouTube',\r\n          symbol: Symbols.youtube,\r\n        }),\r\n        new MenuItem({\r\n          text: 'Facebook',\r\n          symbol: Symbols.facebook,\r\n        }),\r\n      ],\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n:host {\r\n\tposition: relative;\r\n\tz-index: 3;\r\n\t&::ng-deep {\r\n\t\t.symbol {\r\n\t\t\tfilter: none !important;\r\n\t\t\timg {\r\n\t\t\t\t//filter: contrast(0) sepia(100%) hue-rotate(164deg) brightness(1) saturate(2) !important;\r\n\t\t\t\tfilter: contrast(0) brightness(10) !important;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n#footer {\r\n\tpadding: $spacing * 4 $spacing * 2;\r\n\tborder-top: $border;\r\n\tbackground: $footer-bg;\r\n\r\n\t.max {\r\n\t\tz-index: 5;\r\n\t\tposition: relative;\r\n\t}\r\n\r\n\t.logo {\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tcursor: pointer;\r\n\t\tborder-radius: $border-radius;\r\n\t\tposition: relative;\r\n\t\theight: 100%;\r\n\t\tcolor: $header-bg;\r\n\t\tpadding: 0 $spacing * 2;\r\n\t\tjustify-content: center;\r\n\t\timg {\r\n\t\t\tdisplay: block;\r\n\t\t\tborder-radius: $border-radius;\r\n\t\t\toverflow: hidden;\r\n\t\t\theight: 40px;\r\n\t\t\t&.logo-image-small {\r\n\t\t\t\tdisplay: none;\r\n\t\t\t}\r\n\t\t}\r\n\t\tspan {\r\n\t\t\tfont-size: 24px;\r\n\t\t\ttext-transform: uppercase;\r\n\t\t\tletter-spacing: 2px;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n.copyright {\r\n\tbackground: lighten($footer-bg, 5%);\r\n\tfont-size: 10px;\r\n\ttext-align: center;\r\n\ttext-transform: uppercase;\r\n\tletter-spacing: 0.5px;\r\n\tline-height: 1;\r\n\tpadding: $spacing;\r\n\tcolor: rgba(white, 0.5);\r\n}\r\n",
                    "styleUrl": "./footer.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<footer id=\"footer\">\r\n  <div class=\"max\">\r\n    <div class=\"flex padded\">\r\n      <div class=\"width-4 small-12 small-order-2\">\r\n        <app-menu [menu]=\"menuLeft\"></app-menu>\r\n      </div>\r\n      <div class=\"width-4 small-12 small-order-3\">\r\n        <app-menu [menu]=\"menuCenter\"></app-menu>\r\n      </div>\r\n      <div class=\"width-4 small-12 small-order-1\">\r\n        <a class=\"logo\" routerLink=\"/\">\r\n          <span><b>Rotom</b>dex</span>\r\n        </a>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</footer>\r\n<div class=\"copyright\">\r\n  Rotom Dex is not affiliated with, sponsored or endorsed by, or in any way\r\n  associated with Pokemon or The Pokemon Company International Inc. &copy;\r\n  {{ year }} Rotom Dex. All rights reserved.\r\n</div>\r\n"
        },
        {
            "name": "ForgotComponent",
            "id": "component-ForgotComponent-95bdb254e9506015de49c7bf58d142108d8fac3f6db9b809c24c16d20c2a9d15ba273d65658400a20bcd356bbb88160021f71c6c0e46dc08ab52f0f1118f8c6b",
            "file": "src/app/pages/auth/forgot/forgot.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "forgot",
            "styleUrls": [
                "./forgot.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./forgot.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonSubmit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "textboxEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Router } from '@angular/router';\r\nimport { AuthenticationService } from '@app/pages/auth/auth.service';\r\nimport { Textbox, Button, ButtonType } from '@app/controls';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { NotificationsService, Notification, AlertType } from '@app/controls';\r\n\r\n@Component({\r\n  selector: 'forgot',\r\n  templateUrl: './forgot.component.html',\r\n  styleUrls: ['./forgot.component.scss'],\r\n})\r\nexport class ForgotComponent implements OnInit {\r\n  form: FormGroup;\r\n  textboxEmail: Textbox;\r\n  buttonSubmit: Button;\r\n\r\n  constructor(\r\n    private authenticationService: AuthenticationService,\r\n    private router: Router,\r\n    private formBuilder: FormBuilder,\r\n    private notificationService: NotificationsService\r\n  ) {\r\n    if (this.authenticationService.currentUserValue) {\r\n      this.router.navigateByUrl('/');\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.form = this.formBuilder.group({\r\n      emailControl: ['', Validators.required],\r\n    });\r\n    this.textboxEmail = new Textbox({\r\n      label: 'Email',\r\n    });\r\n    this.buttonSubmit = new Button({\r\n      text: 'Send Reset Password',\r\n      type: ButtonType.submit,\r\n    });\r\n  }\r\n\r\n  submit() {\r\n    if (this.form.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.authenticationService.forgot(this.textboxEmail.value).subscribe(() => {\r\n      this.notificationService.addNotifications([\r\n        new Notification({\r\n          alertType: AlertType.success,\r\n          message: \"If your email exists, we've sent you a reset link\",\r\n        }),\r\n      ]);\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./forgot.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form\r\n  class=\"padding-y-8 flex vertical flex-center\"\r\n  [formGroup]=\"form\"\r\n  (ngSubmit)=\"submit()\"\r\n>\r\n  <div class=\"flex vertical padded-2\" style=\"max-width: 400px\">\r\n    <div>\r\n      <h1>Forgot Password?</h1>\r\n    </div>\r\n    <div>\r\n      <p>\r\n        If you forgot your password, enter your email below and we will send you\r\n        instructions on how to reset it.\r\n      </p>\r\n    </div>\r\n    <div>\r\n      <textbox [textbox]=\"textboxEmail\"></textbox>\r\n    </div>\r\n    <div>\r\n      <app-button [button]=\"buttonSubmit\"></app-button>\r\n    </div>\r\n  </div>\r\n</form>\r\n"
        },
        {
            "name": "FormComponent",
            "id": "component-FormComponent-e9d0c450cdc1216a6875e912eb440897415fa0e9590cfc482000ba227f25c1d067d19d3f77f99a5e89c86ba4c2500af0db743756ab3551c555a777b645dff96a",
            "file": "src/app/controls/form/form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Form",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formGroup",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { Form } from './form';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-form',\r\n  templateUrl: 'form.component.html',\r\n})\r\nexport class FormComponent implements OnInit {\r\n  @Input() form: Form;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n\r\n  onSubmit(formGroup: FormGroup) {\r\n    window.alert('Valid: ' + formGroup.valid);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form\r\n  *ngIf=\"form\"\r\n  [formGroup]=\"form.formGroup\"\r\n  (ngSubmit)=\"onSubmit(form.formGroup)\"\r\n>\r\n  <h2 *ngIf=\"form.title\">{{ form.title }}</h2>\r\n  <div class=\"flex padded vertical\">\r\n    <div *ngFor=\"let formControlGroup of form.groups\">\r\n      <form-group [formControlGroup]=\"formControlGroup\"></form-group>\r\n    </div>\r\n  </div>\r\n</form>\r\n"
        },
        {
            "name": "FormControlComponent",
            "id": "component-FormControlComponent-d4f96dfa2e8951fd6f5a3050b2576db65ddf25544fe595a09ee1bc0cdc60cc9dc6db5262c7bcd821f237511162fdd58bc06dfef1ccbdc4c07b7b38af024dd8c9",
            "file": "src/app/controls/form/form-group/form-control/from-control.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "form-control",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "form-control.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appFormControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "FormControl",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isCheckbox",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isEditor",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isSelect",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isTextarea",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isTextbox",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { FormControl } from './form-control';\r\nimport { Textbox } from '@app/controls/textbox';\r\nimport { Editor } from '@app/controls/editor';\r\nimport { Textarea } from '@app/controls/textarea';\r\nimport { Select } from '@app/controls/select';\r\nimport { Checkbox } from '@app/controls/checkbox';\r\nimport { Toggle } from '@app/controls/toggle';\r\n\r\n@Component({\r\n  selector: 'form-control',\r\n  templateUrl: 'form-control.component.html',\r\n})\r\nexport class FormControlComponent implements OnInit {\r\n  @Input() appFormControl: FormControl;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n\r\n  isTextbox() {\r\n    return this.appFormControl.control instanceof Textbox;\r\n  }\r\n  isTextarea() {\r\n    return this.appFormControl.control instanceof Textarea;\r\n  }\r\n  isSelect() {\r\n    return this.appFormControl.control instanceof Select;\r\n  }\r\n  isEditor() {\r\n    return this.appFormControl.control instanceof Editor;\r\n  }\r\n  isCheckbox() {\r\n    return this.appFormControl.control instanceof Checkbox;\r\n  }\r\n  isToggle() {\r\n    return this.appFormControl.control instanceof Toggle;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"appFormControl\">\r\n  <textbox\r\n    *ngIf=\"isTextbox()\"\r\n    [textbox]=\"appFormControl.control\"\r\n    [formControlName]=\"appFormControl.formControlName\"\r\n  ></textbox>\r\n  <app-textarea\r\n    *ngIf=\"isTextarea()\"\r\n    [textarea]=\"appFormControl.control\"\r\n    [formControlName]=\"appFormControl.formControlName\"\r\n  ></app-textarea>\r\n  <app-select\r\n    *ngIf=\"isSelect()\"\r\n    [select]=\"appFormControl.control\"\r\n    [formControlName]=\"appFormControl.formControlName\"\r\n  ></app-select>\r\n  <editor\r\n    *ngIf=\"isEditor()\"\r\n    [editor]=\"appFormControl.control\"\r\n    [formControlName]=\"appFormControl.formControlName\"\r\n  ></editor>\r\n  <checkbox\r\n    *ngIf=\"isCheckbox()\"\r\n    [checkbox]=\"appFormControl.control\"\r\n    [formControlName]=\"appFormControl.formControlName\"\r\n  ></checkbox>\r\n  <toggle\r\n    *ngIf=\"isToggle()\"\r\n    [toggle]=\"appFormControl.control\"\r\n    [formControlName]=\"appFormControl.formControlName\"\r\n  ></toggle>\r\n</div>\r\n"
        },
        {
            "name": "FormGroupComponent",
            "id": "component-FormGroupComponent-474ec3907a1935236b2137f92d0267c0ae6b0dabcb360aa84490a4aad48dfb538bd63e06e6e52d23de92c515e6fc1ad0872143cb29f25dd908ec5a7c1dbfe6d8",
            "file": "src/app/controls/form/form-group/form-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "form-group",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "form-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "formControlGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "FormControlGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { FormControlGroup } from './form-group';\r\n\r\n@Component({\r\n  selector: 'form-group',\r\n  templateUrl: 'form-group.component.html',\r\n})\r\nexport class FormGroupComponent implements OnInit {\r\n  @Input() formControlGroup: FormControlGroup;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"formControlGroup\" class=\"flex padded flex-wrap\">\r\n  <h4 *ngIf=\"formControlGroup.title\">{{ formControlGroup.title }}</h4>\r\n  <div\r\n    class=\"{{ formControl.classes }}\"\r\n    *ngFor=\"let formControl of formControlGroup.controls\"\r\n  >\r\n    <form-control [appFormControl]=\"formControl\"></form-control>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-9d6194cb99706170723faa18859c74b0a1e60cde17d3c5d2ec5c7ac510082cf419efbcc294305756cedce49d70e928bf5a80aba1fa7771f190ccef9a131b856d",
            "file": "src/app/layout/header/header.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "transparent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menu",
                    "defaultValue": "new Menu()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Menu",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "menuBack",
                    "defaultValue": "new Menu()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Menu",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "menuLogin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Menu",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "scrolled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onWindowScroll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:scroll', undefined"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:scroll",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 113
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  HostListener,\r\n  Input,\r\n  OnInit,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { Icons, Symbols } from '@app/models/icons';\r\nimport { Menu, MenuItem } from '@app/controls/menu';\r\n\r\nimport { AuthenticationService } from '@app/pages/auth/auth.service';\r\nimport { Location } from '@angular/common';\r\nimport { User } from '@app/pages/user';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n  menu: Menu = new Menu();\r\n  menuBack: Menu = new Menu();\r\n  user: User;\r\n  menuLogin: Menu;\r\n  scrolled: boolean;\r\n  @Input() transparent: boolean;\r\n\r\n  constructor(\r\n    private authenticationService: AuthenticationService,\r\n    private location: Location\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.menuLogin = new Menu({\r\n      classes: 'round',\r\n      horizontal: true,\r\n      items: [\r\n        new MenuItem({\r\n          icon: Icons.signIn,\r\n          route: 'signin',\r\n          text: 'Sign In',\r\n        }),\r\n      ],\r\n    });\r\n\r\n    this.menuBack.items.push(\r\n      new MenuItem({\r\n        text: 'Back',\r\n        icon: Icons.arrowLeft,\r\n        click: () => {\r\n          this.location.back();\r\n        },\r\n      })\r\n    );\r\n\r\n    //this.menu.round = false;\r\n    this.menu.clearActiveClickOutside = true;\r\n    this.menu.horizontal = true;\r\n    this.menu.classes = 'medium-12 medium-stacked medium-square';\r\n    this.menu.items.push(\r\n      new MenuItem({\r\n        icon: Icons.box,\r\n        text: 'Expansions',\r\n        route: 'expansions',\r\n        click: () => {\r\n          this.menu.clearActive();\r\n        },\r\n      }),\r\n      new MenuItem({\r\n        symbol: Symbols.cards,\r\n        text: 'Cards',\r\n        route: 'cards',\r\n        click: () => {\r\n          this.menu.clearActive();\r\n        },\r\n      }),\r\n      new MenuItem({\r\n        symbol: Symbols.pokeball,\r\n        text: 'Pokémon',\r\n        route: 'pokemon',\r\n        click: () => {\r\n          this.menu.clearActive();\r\n        },\r\n      }),\r\n      // new MenuItem({\r\n      // \ttext: \"Collection\",\r\n      // \troute: \"collection\",\r\n      // \tclick: () => {\r\n      // \t\tthis.menu.clearActive();\r\n      // \t}\r\n      // }),\r\n      // new MenuItem({\r\n      // \ticon: Icons.scanner,\r\n      // \ttext: 'Scanner',\r\n      // \troute: 'scanner',\r\n      // \tclick: () => {\r\n      // \t\tthis.menu.clearActive();\r\n      // \t},\r\n      // }),\r\n      new MenuItem({\r\n        icon: Icons.archive,\r\n        text: 'Collection',\r\n        route: 'collection',\r\n        click: () => {\r\n          this.menu.clearActive();\r\n        },\r\n      })\r\n    );\r\n  }\r\n\r\n  @HostListener('window:scroll', [])\r\n  onWindowScroll() {\r\n    this.scrolled =\r\n      document.body.scrollTop > 20 || document.documentElement.scrollTop > 20;\r\n  }\r\n\r\n  get signedIn(): boolean {\r\n    return this.authenticationService.currentUserValue != null;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n:host {\r\n  position: relative;\r\n  z-index: 1;\r\n}\r\n\r\n.menu-wrapper {\r\n  padding-top: $header-height;\r\n  @media (max-width: $screen-medium) {\r\n    position: fixed;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    z-index: 99;\r\n    box-shadow: $shadow-large;\r\n    border-top: $border;\r\n    padding-top: 0;\r\n    .menu {\r\n      box-shadow: none !important;\r\n    }\r\n  }\r\n}\r\n\r\n#header {\r\n  height: $header-height;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  background: $header-bg;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 10;\r\n  padding: $spacing ($spacing * 2);\r\n  border-bottom: $border;\r\n  box-shadow: $shadow;\r\n  &:before {\r\n    content: \"\";\r\n    background: $header-bg;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    transition: $transition;\r\n    opacity: 1;\r\n  }\r\n\r\n  &.transparent:not(.scrolled) {\r\n    background: none;\r\n    box-shadow: none;\r\n    border-bottom: none;\r\n    text-shadow: $text-shadow;\r\n    &:before {\r\n      opacity: 0;\r\n    }\r\n  }\r\n\r\n  &.transparent {\r\n    + .menu-wrapper #menu {\r\n      @media (min-width: $screen-medium + 1px) {\r\n        background: transparent;\r\n      }\r\n      color: white;\r\n      border-bottom: 0;\r\n      margin-left: auto;\r\n      margin-right: auto;\r\n\r\n      .symbol {\r\n        filter: invert(100%) !important;\r\n      }\r\n      .menu {\r\n        background: $menu-bg;\r\n        box-shadow: $shadow;\r\n        @media (max-width: $screen-medium) {\r\n          background: none;\r\n        }\r\n      }\r\n      a {\r\n        color: white;\r\n      }\r\n    }\r\n  }\r\n\r\n  .logo {\r\n    display: flex;\r\n    align-items: center;\r\n    cursor: pointer;\r\n    border-radius: $border-radius;\r\n    position: relative;\r\n    height: 100%;\r\n    color: $header-color;\r\n    padding: 0 $spacing * 2;\r\n    img {\r\n      display: block;\r\n      border-radius: $border-radius;\r\n      overflow: hidden;\r\n      height: 40px;\r\n      &.logo-image-small {\r\n        display: none;\r\n      }\r\n    }\r\n    span {\r\n      font-size: 24px;\r\n      text-transform: uppercase;\r\n      letter-spacing: 2px;\r\n    }\r\n  }\r\n\r\n  a {\r\n    color: $header-color;\r\n  }\r\n\r\n  .max {\r\n    position: relative;\r\n    height: $header-height;\r\n    z-index: 4;\r\n    display: flex;\r\n    align-items: center;\r\n    flex: 1;\r\n  }\r\n}\r\n\r\n#menu {\r\n  background: $menu-bg;\r\n  justify-content: center;\r\n  z-index: 2;\r\n  position: relative;\r\n  padding: $spacing ($spacing * 2);\r\n  @media (max-width: $screen-medium) {\r\n    padding: 0;\r\n    background: $header-bg;\r\n    .menu {\r\n      border: 0 !important;\r\n      .text {\r\n        padding-left: 0;\r\n        padding-top: $spacing / 2;\r\n      }\r\n      a {\r\n        color: white;\r\n      }\r\n      .symbol {\r\n        filter: contrast(0) brightness(10);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: $screen-medium) {\r\n  #menu .menu {\r\n    > ul {\r\n      > li {\r\n        flex: 1;\r\n        a {\r\n          justify-content: center;\r\n          .text {\r\n            flex: initial;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  search {\r\n    width: 100%;\r\n  }\r\n}\r\n\r\n#menuBack,\r\n#menuLogin {\r\n  background: rgba(black, 0.2);\r\n  border-radius: $border-radius;\r\n}\r\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "signedIn": {
                    "name": "signedIn",
                    "getSignature": {
                        "name": "signedIn",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 118
                    }
                }
            },
            "templateData": "<header\r\n  id=\"header\"\r\n  [class.transparent]=\"transparent\"\r\n  [class.scrolled]=\"scrolled\"\r\n>\r\n  <div class=\"max\">\r\n    <div class=\"flex box padded\">\r\n      <div class=\"width-3 flex\">\r\n        <app-menu id=\"menuBack\" [menu]=\"menuBack\"></app-menu>\r\n      </div>\r\n      <div class=\"width-6 flex justify-center\">\r\n        <a class=\"logo\" routerLink=\"\">\r\n          <span><b>Rotom</b>dex</span>\r\n        </a>\r\n      </div>\r\n      <div\r\n        *ngIf=\"signedIn\"\r\n        class=\"profile flex justify-end width-3\"\r\n        profile-name\r\n      ></div>\r\n      <div *ngIf=\"!signedIn\" class=\"login flex justify-end width-3\">\r\n        <app-menu id=\"menuLogin\" [menu]=\"menuLogin\"></app-menu>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</header>\r\n\r\n<div class=\"menu-wrapper\">\r\n  <app-menu id=\"menu\" class=\"flex\" [menu]=\"menu\"></app-menu>\r\n</div>\r\n"
        },
        {
            "name": "HeroComponent",
            "id": "component-HeroComponent-28feeb284fa753351d3a977b14f9271b9ccb783a3caccccb083afa531558b07eab6edd4584e48d5667a7c5de2b8d43d3ecb4052a4809f910708c93b3a41aa20a",
            "file": "src/app/controls/hero/hero.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hero",
            "styleUrls": [
                "./hero.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "hero.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'hero',\r\n  templateUrl: 'hero.component.html',\r\n  styleUrls: ['./hero.component.scss'],\r\n})\r\nexport class HeroComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n.hero {\r\n\theight: 80vh;\r\n\tmax-height: 650px;\r\n\tbackground-size: cover;\r\n\tbackground-position: top center;\r\n\tpadding-top: $header-height;\r\n\tcolor: white;\r\n\tposition: relative;\r\n\tmargin-top: -($header-height + 58px);\r\n\t@media (max-width: $screen-medium) {\r\n\t\tpadding-top: 150px;\r\n\t}\r\n\t.hero-content {\r\n\t\tz-index: 3;\r\n\t\tposition: relative;\r\n\t\tfilter: drop-shadow($shadow);\r\n\t}\r\n\t.logo {\r\n\t\tmargin-bottom: 32px;\r\n\t\th1 {\r\n\t\t\tcolor: white;\r\n\t\t\tmargin-bottom: 8px;\r\n\t\t}\r\n\t\th5 {\r\n\t\t\tcolor: white;\r\n\t\t\tfont-weight: normal;\r\n\t\t\tmargin-top: 0;\r\n\t\t}\r\n\t}\r\n\t.hero-overlay {\r\n\t\tz-index: 1;\r\n\t\tposition: absolute;\r\n\t\tleft: 0;\r\n\t\tright: 0;\r\n\t\ttop: 0;\r\n\t\tbottom: 0;\r\n\t\tpointer-events: none;\r\n\t\tbackground: linear-gradient(rgba(black, 0.9) 0%, rgba(black, 0.25) 50%);\r\n\t}\r\n\t&:after {\r\n\t\tcontent: \"\";\r\n\t\tposition: absolute;\r\n\t\tbottom: 0;\r\n\t\tleft: 0;\r\n\t\tright: 0;\r\n\t\theight: 128px;\r\n\t\tbackground: linear-gradient(transparent 0%, $main-bg 100%);\r\n\t\tz-index: 2;\r\n\t\tpointer-events: none;\r\n\t}\r\n}\r\n",
                    "styleUrl": "./hero.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\r\n  class=\"width-12 align-center hero flex vertical justify-center\"\r\n  style=\"background-image: url('/assets/moltresgalar.jpg')\"\r\n>\r\n  <div class=\"max\">\r\n    <div class=\"padding-8 hero-content\">\r\n      <div class=\"logo\">\r\n        <h1>Welcome to <b>Rotom</b> Dex</h1>\r\n        <h5>A Card Management Mobile App and Website for Pokemon.</h5>\r\n      </div>\r\n      <div class=\"padding-top\">\r\n        <search></search>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"hero-overlay\"></div>\r\n</div>\r\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-a6b8cae4eba0287d6b9481e11fc226a9c636b6e8702bb83e405c04b62d5f28c0f4e3330e9d05386707f72fe24387f5b161236337e562965d086865936efafc53",
            "file": "src/app/pages/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alert",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Alert",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "cardsButton",
                    "defaultValue": "new Button({\r\n    text: 'View All Cards',\r\n    icon: Icons.externalLink,\r\n    route: '/cards',\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "collectionButton",
                    "defaultValue": "new Button({\r\n    text: 'Manage Your Collection',\r\n    icon: Icons.externalLink,\r\n    route: '/collection',\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "expansionButton",
                    "defaultValue": "new Button({\r\n    text: 'View All Expansions',\r\n    icon: Icons.externalLink,\r\n    route: '/expansions',\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "featured",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Featured",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "pokemonButton",
                    "defaultValue": "new Button({\r\n    text: 'View All Pokémon',\r\n    icon: Icons.externalLink,\r\n    route: '/pokemon',\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Alert, AlertType, Button } from '@app/controls';\r\nimport { Icons } from '@app/models';\r\nimport { Featured } from './featured';\r\nimport { FeaturedService } from './featured.service';\r\n\r\n@Component({\r\n  selector: 'home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss'],\r\n})\r\nexport class HomeComponent implements OnInit {\r\n  featured: Featured;\r\n  alert: Alert;\r\n  expansionButton: Button = new Button({\r\n    text: 'View All Expansions',\r\n    icon: Icons.externalLink,\r\n    route: '/expansions',\r\n  });\r\n  cardsButton: Button = new Button({\r\n    text: 'View All Cards',\r\n    icon: Icons.externalLink,\r\n    route: '/cards',\r\n  });\r\n  pokemonButton: Button = new Button({\r\n    text: 'View All Pokémon',\r\n    icon: Icons.externalLink,\r\n    route: '/pokemon',\r\n  });\r\n  collectionButton: Button = new Button({\r\n    text: 'Manage Your Collection',\r\n    icon: Icons.externalLink,\r\n    route: '/collection',\r\n  });\r\n\r\n  constructor(private featuredService: FeaturedService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.alert = new Alert({\r\n      type: AlertType.warning,\r\n      message:\r\n        '<b>Under Development:</b> Please note that Rotom Dex is still under development, you should expect to find some issues.',\r\n    });\r\n\r\n    // Featured\r\n    this.featuredService.getFeaturedObservable().subscribe((featured) => {\r\n      if (featured) this.featured = featured;\r\n    });\r\n    this.featuredService.getFeatured();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n.logo {\r\n\th1 {\r\n\t\tfont-family: $font-family;\r\n\t\ttext-transform: uppercase;\r\n\t\tletter-spacing: 2px;\r\n\t\tfont-weight: normal;\r\n\t\tcolor: white;\r\n\t}\r\n}\r\n\r\n.card {\r\n\tborder-radius: $border-radius-card;\r\n\toverflow: hidden;\r\n\tbox-shadow: $shadow;\r\n\tdisplay: block;\r\n}\r\n\r\n.section {\r\n\tpadding: $spacing * 14 $spacing * 2;\r\n\tbackground: $main-bg;\r\n\toverflow: hidden;\r\n\t&:not(:last-child) {\r\n\t\tborder-bottom: $border;\r\n\t}\r\n}\r\n\r\n#dev-alert {\r\n\tposition: absolute;\r\n\tleft: 50%;\r\n\ttransform: translateX(-50%) translateY(-50%);\r\n\twidth: calc(100% - #{$spacing * 4});\r\n\tmax-width: 816px;\r\n\ttext-align: center;\r\n\tz-index: 2;\r\n}\r\n\r\n#expansion-logos,\r\n#cards,\r\n#pokemon {\r\n\tposition: relative;\r\n\t&:before {\r\n\t\tcontent: \"\";\r\n\t\tposition: absolute;\r\n\t\tleft: 50%;\r\n\t\ttop: 50%;\r\n\t\ttransform: translate(-50%, -50%);\r\n\t\tbackground: radial-gradient(rgba(white, 0.2) 0%, transparent 50%);\r\n\t\twidth: 200%;\r\n\t\theight: 200%;\r\n\t\tpointer-events: none;\r\n\t}\r\n}\r\n\r\n#pokemon {\r\n\t.pokemon-link {\r\n\t\tposition: relative;\r\n\t\tdisplay: block;\r\n\t\timg {\r\n\t\t\ttransition: $transition;\r\n\t\t\tdisplay: block;\r\n\t\t}\r\n\t\t.sprite-animated {\r\n\t\t\tposition: absolute;\r\n\t\t\topacity: 0;\r\n\t\t\ttop: 50%;\r\n\t\t\tleft: 50%;\r\n\t\t\ttransform: translate(-50%, -50%);\r\n\t\t}\r\n\t\t&:hover {\r\n\t\t\t.sprite-default {\r\n\t\t\t\topacity: 0;\r\n\t\t\t}\r\n\t\t\t.sprite-animated {\r\n\t\t\t\topacity: 1;\r\n\t\t\t\ttransform: translate(-50%, -50%) scale(1.5);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "featuredService",
                        "type": "FeaturedService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "featuredService",
                        "type": "FeaturedService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- Hero -->\r\n<hero></hero>\r\n\r\n<!-- Under development -->\r\n<alert [alert]=\"alert\" id=\"dev-alert\" *ngIf=\"false\"></alert>\r\n\r\n<!-- Expansions -->\r\n<div class=\"section dark\" *ngIf=\"featured && featured.expansions\">\r\n  <div class=\"max\">\r\n    <div class=\"flex flex-center padded-8\">\r\n      <div class=\"width-6 small-12 small-order-2\">\r\n        <div id=\"expansion-logos\">\r\n          <div class=\"flex padded relative\">\r\n            <div\r\n              class=\"width-3 small-2\"\r\n              *ngFor=\"let expansion of featured.expansions\"\r\n            >\r\n              <a [routerLink]=\"expansion.route\">\r\n                <img\r\n                  class=\"hover-zoom-large shadow hover-z-1\"\r\n                  src=\"{{ expansion.logo }}\"\r\n                />\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"width-6 small-12 small-order-1\">\r\n        <h2>Expansions</h2>\r\n        <p>\r\n          Explore the most recent expansions, vintage expansions, and everything\r\n          in-between. RotomDex provides the latest card and set data for both\r\n          English and Japanese (coming soon).\r\n        </p>\r\n        <app-button [button]=\"expansionButton\"></app-button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- Cards -->\r\n<div class=\"section dark\" *ngIf=\"featured && featured.cards\">\r\n  <div class=\"max\">\r\n    <div class=\"flex flex-center padded-8\">\r\n      <div class=\"width-6 small-12\">\r\n        <h2>Cards</h2>\r\n        <p>\r\n          Everyone has a favorite card but with over 9,000 English cards and\r\n          many more unique Japanese cards, there is always new cards to find and\r\n          appreciate.\r\n        </p>\r\n        <app-button [button]=\"cardsButton\"></app-button>\r\n      </div>\r\n      <div class=\"width-6 small-12\">\r\n        <div id=\"cards\">\r\n          <div class=\"flex padded relative\">\r\n            <div class=\"width-2 small-2\" *ngFor=\"let card of featured.cards\">\r\n              <a [routerLink]=\"card.route\">\r\n                <img\r\n                  class=\"card hover-zoom-large hover-z-1\"\r\n                  src=\"{{ card.image }}\"\r\n                />\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- Pokemon -->\r\n<div class=\"section dark\" *ngIf=\"featured && featured.pokemon\">\r\n  <div class=\"max\">\r\n    <div class=\"flex flex-center padded-8\">\r\n      <div class=\"width-6 small-12 small-order-2\">\r\n        <div id=\"pokemon\">\r\n          <div class=\"flex padded relative\">\r\n            <div\r\n              class=\"width-2 small-2\"\r\n              *ngFor=\"let pokemon of featured.pokemon\"\r\n            >\r\n              <a [routerLink]=\"pokemon.route\" class=\"pokemon-link\">\r\n                <img\r\n                  class=\"sprite-default shadow\"\r\n                  src=\"{{ pokemon.sprites.default }}\"\r\n                />\r\n                <img\r\n                  class=\"sprite-animated shadow z-1\"\r\n                  src=\"{{\r\n                    pokemon.sprites.animated || pokemon.sprites.default\r\n                  }}\"\r\n                />\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"width-6 small-12 small-order-1\">\r\n        <h2>Pokemon</h2>\r\n        <p>\r\n          View all the cards featuring your favorite Pokemon and explore the\r\n          ever-growing Pokedex. With nearly 1,000 Pokemon species there is\r\n          always a new Pokemon to learn about.\r\n        </p>\r\n        <app-button [button]=\"pokemonButton\"></app-button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- Collection -->\r\n<div class=\"section dark\">\r\n  <div class=\"max\">\r\n    <div class=\"flex flex-center padded-8\">\r\n      <div class=\"width-6 small-12 small-order-1\">\r\n        <h2>Collection</h2>\r\n        <p>\r\n          Manage your entire Pokemon card collection, including card metadata\r\n          such as condition, graded condition, and unique printings. Organize\r\n          cards using binders, decks, and other grouping categories. View and\r\n          share your collection stats and history.\r\n        </p>\r\n        <app-button [button]=\"collectionButton\"></app-button>\r\n      </div>\r\n      <div class=\"width-6 small-12 small-order-2\">\r\n        <div id=\"pokemon\">\r\n          <div class=\"flex padded relative\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ItemsComponent",
            "id": "component-ItemsComponent-62c413aa92094de67dc629999c39d91e9a12c8d007201e7cf0edcdb766ac655968af78ed97dbb1b3e1069f268a6c072ea2775541bc37e2c0f8a75261a343af69",
            "file": "src/app/layout/main/items/items.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "items",
            "styleUrls": [
                "./items.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "items.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "Items",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "outputDisplayModeChanged",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter<ItemDisplayType>"
                },
                {
                    "name": "outputGetItems",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "empty",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Empty",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "_outputGetItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "displayModeChanged",
                    "args": [
                        {
                            "name": "itemDisplayType",
                            "type": "ItemDisplayType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "itemDisplayType",
                            "type": "ItemDisplayType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showEmpty",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showGroups",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateQueryParams",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\nimport { Items } from './items';\r\nimport { ItemDisplayType } from './items-filter';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { AppSettings } from '@app/app';\r\nimport { Empty } from '@app/controls';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\n\r\n@Component({\r\n  selector: 'items',\r\n  templateUrl: 'items.component.html',\r\n  styleUrls: ['./items.component.scss'],\r\n})\r\nexport class ItemsComponent implements OnInit {\r\n  @Input() items: Items;\r\n  @Output() outputGetItems: EventEmitter<void> = new EventEmitter();\r\n  @Output() outputDisplayModeChanged: EventEmitter<ItemDisplayType> =\r\n    new EventEmitter();\r\n  empty: Empty;\r\n\r\n  constructor(private route: ActivatedRoute, private router: Router) {}\r\n\r\n  ngOnInit() {\r\n    // Get query params\r\n    this.route.queryParams.subscribe((params) => {\r\n      if (params['search']) {\r\n        this.items.filter.textboxSearch.value = params['search'];\r\n      }\r\n\r\n      if (params['sortby']) {\r\n        this.items.filter.selectSortBy.value = params['sortby'];\r\n      }\r\n\r\n      if (params['sortdirection']) {\r\n        this.items.filter.selectSortDirection.value = params['sortdirection'];\r\n      }\r\n\r\n      if (params['displaymode']) {\r\n        this.items.itemDisplayType = (ItemDisplayType as any)[\r\n          params['displaymode']\r\n        ];\r\n        this.items.filter.setDisplayMode(this.items.itemDisplayType);\r\n      }\r\n\r\n      if (params['pagesize']) {\r\n        this.items.footer.pageSize = +params['pagesize'];\r\n      }\r\n\r\n      if (params['page']) {\r\n        this.items.footer.page = +params['page'];\r\n      }\r\n    });\r\n\r\n    this.outputGetItems.emit();\r\n\r\n    this.empty = new Empty({\r\n      text: this.items.noResults,\r\n      button: this.items.buttonNoResults,\r\n      icon: this.items.noResultsIcon as IconProp,\r\n      image: this.items.noResultsImage,\r\n    });\r\n  }\r\n\r\n  updateQueryParams() {\r\n    this.router.navigate([], {\r\n      queryParams: {\r\n        pagesize: this.items.footer.pageSize,\r\n        page: this.items.footer.page,\r\n        search: this.items.filter.textboxSearch.value,\r\n        sortby: this.items.filter.selectSortBy.value,\r\n        sortdirection: this.items.filter.selectSortDirection.value,\r\n        displaymode: this.items.filter.displayMode.toLowerCase(),\r\n      },\r\n    });\r\n  }\r\n\r\n  showEmpty() {\r\n    return this.items.itemGroups.length == 0;\r\n  }\r\n\r\n  showGroups() {\r\n    return this.items.itemGroups.length > 0;\r\n  }\r\n\r\n  displayModeChanged(itemDisplayType: ItemDisplayType) {\r\n    this.items.itemDisplayType = itemDisplayType;\r\n    this.items.filter.displayMode = this.items.itemDisplayType;\r\n    this.outputDisplayModeChanged.emit(itemDisplayType);\r\n    this.updateQueryParams();\r\n  }\r\n\r\n  _outputGetItems() {\r\n    this.outputGetItems.emit();\r\n    this.updateQueryParams();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./items.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"relative small-square\" *ngIf=\"items\">\r\n  <!-- Header -->\r\n  <items-header *ngIf=\"items.showHeader\" [itemsHeader]=\"items.header\">\r\n  </items-header>\r\n\r\n  <!-- Filter -->\r\n  <items-filter\r\n    *ngIf=\"items.showFilters\"\r\n    [itemsFilter]=\"items.filter\"\r\n    (outputGetItems)=\"_outputGetItems()\"\r\n    (outputDisplayModeChanged)=\"displayModeChanged($event)\"\r\n  >\r\n  </items-filter>\r\n\r\n  <!-- Empty -->\r\n  <empty *ngIf=\"empty && showEmpty()\" [empty]=\"empty\"></empty>\r\n\r\n  <!-- Groups -->\r\n  <items-groups\r\n    *ngIf=\"showGroups()\"\r\n    [groups]=\"items.itemGroups\"\r\n    [itemClasses]=\"items.itemClasses\"\r\n    [itemDisplayType]=\"items.itemDisplayType\"\r\n  >\r\n  </items-groups>\r\n\r\n  <!-- Footer -->\r\n  <items-footer\r\n    *ngIf=\"items.itemGroups.length && items.showFooter\"\r\n    [itemsFooter]=\"items.footer\"\r\n    (outputGetItems)=\"_outputGetItems()\"\r\n  >\r\n  </items-footer>\r\n</div>\r\n"
        },
        {
            "name": "ItemsFilterComponent",
            "id": "component-ItemsFilterComponent-b929823545b4c0f48eb912e69a6560816cb38683c57282e10e236cca86d82cd9da3f4ef46aaf96b846044ac5e75164465e17d4c768ccb99fe670686a7557af49",
            "file": "src/app/layout/main/items/items-filter/items-filter.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "items-filter",
            "styleUrls": [
                "./items-filter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "items-filter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "itemsFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "ItemsFilter",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "outputDisplayModeChanged",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter<ItemDisplayType>"
                },
                {
                    "name": "outputGetItems",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setDisplayMode",
                    "args": [
                        {
                            "name": "type",
                            "type": "ItemDisplayType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "ItemDisplayType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setupDefaultControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { ItemsFilter, ItemDisplayType } from './items-filter';\r\nimport { Menu, MenuItem } from '@app/controls/menu';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Icons } from '@app/models/icons';\r\n\r\n@Component({\r\n  selector: 'items-filter',\r\n  templateUrl: 'items-filter.component.html',\r\n  styleUrls: ['./items-filter.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class ItemsFilterComponent implements OnInit {\r\n  @Input() itemsFilter: ItemsFilter;\r\n  @Output() outputGetItems: EventEmitter<string> = new EventEmitter();\r\n  @Output() outputDisplayModeChanged: EventEmitter<ItemDisplayType> =\r\n    new EventEmitter();\r\n\r\n  constructor(private route: ActivatedRoute, private router: Router) {}\r\n\r\n  ngOnInit() {\r\n    this.setupDefaultControls();\r\n  }\r\n\r\n  setupDefaultControls() {\r\n    // Search\r\n    this.itemsFilter.textboxSearch.keydownEnter = (value) => {\r\n      this.outputGetItems.emit();\r\n    };\r\n    this.itemsFilter.textboxSearch.clickIcon = (value) => {\r\n      this.outputGetItems.emit();\r\n    };\r\n    this.itemsFilter.textboxSearch.clickClear = () => {\r\n      this.outputGetItems.emit();\r\n    };\r\n\r\n    // Sort by\r\n    this.itemsFilter.selectSortBy.change = (value) => {\r\n      this.outputGetItems.emit();\r\n    };\r\n\r\n    // Sort direction\r\n    this.itemsFilter.selectSortDirection.change = (value) => {\r\n      this.outputGetItems.emit();\r\n    };\r\n\r\n    // Display modes\r\n    this.itemsFilter.menuDisplayMode = new Menu({\r\n      clearActiveClickOutside: false,\r\n      horizontal: true,\r\n      classes: 'round border shadow-light',\r\n    });\r\n\r\n    // Grid\r\n    if (this.itemsFilter.showGridDisplayMode) {\r\n      this.itemsFilter.menuItemGridDisplayMode = new MenuItem({\r\n        text: 'Grid',\r\n        icon: Icons.grid,\r\n        active: this.itemsFilter.displayMode == ItemDisplayType.grid,\r\n        click: () => {\r\n          this.setDisplayMode(ItemDisplayType.grid);\r\n        },\r\n      });\r\n      this.itemsFilter.menuDisplayMode.items.push(\r\n        this.itemsFilter.menuItemGridDisplayMode\r\n      );\r\n    }\r\n\r\n    // List\r\n    if (this.itemsFilter.showListDisplayMode) {\r\n      this.itemsFilter.menuItemListDisplayMode = new MenuItem({\r\n        text: 'List',\r\n        icon: Icons.list,\r\n        active: this.itemsFilter.displayMode == ItemDisplayType.list,\r\n        click: () => {\r\n          this.setDisplayMode(ItemDisplayType.list);\r\n        },\r\n      });\r\n      this.itemsFilter.menuDisplayMode.items.push(\r\n        this.itemsFilter.menuItemListDisplayMode\r\n      );\r\n    }\r\n  }\r\n\r\n  setDisplayMode(type: ItemDisplayType) {\r\n    this.outputDisplayModeChanged.emit(type);\r\n    this.itemsFilter.setDisplayMode(type);\r\n    this.itemsFilter.displayMode = type;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n@media (max-width: $screen-small) {\r\n  .col-display {\r\n    > div {\r\n      width: 100%;\r\n      display: block;\r\n    }\r\n    app-menu {\r\n      width: 100%;\r\n      display: block;\r\n      ul {\r\n        display: flex;\r\n        li {\r\n          flex: 1;\r\n          a {\r\n            justify-content: center;\r\n            .text {\r\n              flex: initial !important;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .col-sort {\r\n    .col-sort-by {\r\n      position: relative;\r\n      z-index: 1;\r\n    }\r\n    .col-sort-direction {\r\n      position: relative;\r\n      z-index: 1;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./items-filter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- Filters -->\r\n<div id=\"cards-filters\" class=\"border-bottom padding-y padding-x-2\">\r\n  <div class=\"max\">\r\n    <div *ngIf=\"itemsFilter\" class=\"relative z-2\">\r\n      <div class=\"flex padded flex-center flex-wrap justify-center\">\r\n        <!-- Search -->\r\n        <div class=\"box medium-min-12\">\r\n          <div class=\"medium-12\" style=\"width: 300px\">\r\n            <textbox [textbox]=\"itemsFilter.textboxSearch\"></textbox>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Sort by/direction -->\r\n        <div class=\"col-sort small-min-12\" *ngIf=\"itemsFilter.showSort\">\r\n          <div class=\"flex\">\r\n            <app-select\r\n              class=\"col-sort-by small-min-6\"\r\n              *ngIf=\"itemsFilter.selectSortBy\"\r\n              [select]=\"itemsFilter.selectSortBy\"\r\n            >\r\n            </app-select>\r\n            <app-select\r\n              class=\"col-sort-direction small-min-6\"\r\n              *ngIf=\"itemsFilter.selectSortDirection\"\r\n              [select]=\"itemsFilter.selectSortDirection\"\r\n            >\r\n            </app-select>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Diplay mode -->\r\n        <div\r\n          *ngIf=\"\r\n            itemsFilter.menuDisplayMode &&\r\n            itemsFilter.menuDisplayMode.items.length > 1\r\n          \"\r\n          class=\"col-display small-min-12 flex justify-end\"\r\n        >\r\n          <div>\r\n            <app-menu [menu]=\"itemsFilter.menuDisplayMode\"></app-menu>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ItemsFooterComponent",
            "id": "component-ItemsFooterComponent-f78d399c6dc00d7ca6a1ec9e150b6b90bf5023c09471cc0ea20d3d7363b585e54dae51949c2d56abf2a193fc56076340b318ff229c7066433ff01fb68fa8b504",
            "file": "src/app/layout/main/items/items-footer/items-footer-component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "items-footer",
            "styleUrls": [
                "./items-footer-component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "items-footer-component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "itemsFooter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "ItemsFooter",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "outputGetItems",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isNextDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isPrevDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupDefaultControlAttributes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupDefaultControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { ItemsFooter } from './items-footer';\r\nimport { SelectOptionGroup, SelectOption, Select } from '@app/controls/select';\r\nimport { Textbox } from '@app/controls/textbox';\r\nimport { Button } from '@app/controls/button';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Icons } from '@app/models/icons';\r\n\r\n@Component({\r\n  selector: 'items-footer',\r\n  templateUrl: 'items-footer-component.html',\r\n  styleUrls: ['./items-footer-component.scss'],\r\n})\r\nexport class ItemsFooterComponent implements OnInit {\r\n  @Input() itemsFooter: ItemsFooter;\r\n\r\n  @Output() outputGetItems: EventEmitter<void> = new EventEmitter();\r\n\r\n  constructor(private route: ActivatedRoute, private router: Router) {}\r\n\r\n  ngOnInit() {\r\n    this.setupDefaultControls();\r\n    this.setupDefaultControlAttributes();\r\n  }\r\n\r\n  setupDefaultControls() {\r\n    // Page\r\n    this.itemsFooter.textboxPage.value = this.itemsFooter.page.toString();\r\n    this.itemsFooter.textboxPage.max = this.itemsFooter.totalPages;\r\n    this.itemsFooter.textboxPage.change = (value) => {\r\n      this.itemsFooter.page = +value;\r\n      this.outputGetItems.emit();\r\n    };\r\n\r\n    // Page size\r\n    this.itemsFooter.selectPageSize.value =\r\n      this.itemsFooter.pageSize.toString();\r\n    this.itemsFooter.selectPageSize.change = (value) => {\r\n      this.itemsFooter.pageSize = +value;\r\n      this.itemsFooter.page = 1;\r\n      this.itemsFooter.textboxPage.value = this.itemsFooter.page.toString();\r\n      this.outputGetItems.emit();\r\n    };\r\n\r\n    // Prev\r\n    this.itemsFooter.buttonPrev.click = () => {\r\n      this.itemsFooter.page--;\r\n      this.itemsFooter.textboxPage.value = this.itemsFooter.page.toString();\r\n      this.outputGetItems.emit();\r\n    };\r\n\r\n    // Next\r\n    this.itemsFooter.buttonNext.click = () => {\r\n      this.itemsFooter.page++;\r\n      this.itemsFooter.textboxPage.value = this.itemsFooter.page.toString();\r\n      this.outputGetItems.emit();\r\n    };\r\n  }\r\n\r\n  setupDefaultControlAttributes() {\r\n    // Prev/next\r\n    this.itemsFooter.buttonPrev.icon = Icons.arrowLeft;\r\n    this.itemsFooter.buttonNext.icon = Icons.arrowRight;\r\n\r\n    // Page size\r\n    this.itemsFooter.selectPageSize.optionGroups = [\r\n      new SelectOptionGroup({\r\n        label: 'Page Size',\r\n        options: [\r\n          new SelectOption({\r\n            text: '12',\r\n            value: '12',\r\n          }),\r\n          new SelectOption({\r\n            text: '24',\r\n            value: '24',\r\n          }),\r\n          new SelectOption({\r\n            text: '60',\r\n            value: '60',\r\n          }),\r\n          new SelectOption({\r\n            text: '100',\r\n            value: '100',\r\n          }),\r\n        ],\r\n      }),\r\n    ];\r\n    this.itemsFooter.selectPageSize.value =\r\n      this.itemsFooter.pageSize.toString();\r\n\r\n    // Page\r\n    this.itemsFooter.textboxPage.type = 'number';\r\n    this.itemsFooter.textboxPage.min = 1;\r\n    this.itemsFooter.textboxPage.width = 64;\r\n  }\r\n\r\n  isPrevDisabled() {\r\n    return this.itemsFooter.page <= 1;\r\n  }\r\n\r\n  isNextDisabled() {\r\n    return this.itemsFooter.page >= this.itemsFooter.totalPages;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./items-footer-component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- Footer -->\r\n<div\r\n  id=\"main-footer\"\r\n  class=\"pager padding-y padding-x-2 relative round-bottom border-top z-1\"\r\n>\r\n  <div class=\"max\">\r\n    <div class=\"flex padded flex-center\">\r\n      <!-- Page size -->\r\n      <div class=\"width-3\">\r\n        <div class=\"flex\">\r\n          <app-select\r\n            *ngIf=\"itemsFooter.selectPageSize\"\r\n            [select]=\"itemsFooter.selectPageSize\"\r\n          ></app-select>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Pages -->\r\n      <div class=\"width-6 flex justify-center\">\r\n        <div class=\"flex\" *ngIf=\"itemsFooter.totalPages > 1\">\r\n          <app-button\r\n            [disabled]=\"isPrevDisabled()\"\r\n            [button]=\"itemsFooter.buttonPrev\"\r\n          ></app-button>\r\n          <textbox [textbox]=\"itemsFooter.textboxPage\"></textbox>\r\n          <app-button\r\n            [disabled]=\"isNextDisabled()\"\r\n            [button]=\"itemsFooter.buttonNext\"\r\n          ></app-button>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Total -->\r\n      <div class=\"width-3 align-right\">\r\n        <div class=\"subheading\">\r\n          {{itemsFooter.totalItems}} Total - Page {{itemsFooter.page}} of\r\n          {{itemsFooter.totalPages}}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ItemsGridComponent",
            "id": "component-ItemsGridComponent-7c70d8145c25b95d1f40417107d46a46f8ff4efb63122df74f54cb3c37bbea0c95a66b55e0306b66a9c22b4fcf45ff518a6fa0547fe23b9b8be4e4192e0e9216",
            "file": "src/app/layout/main/items/items-grid/items-grid.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "items-grid",
            "styleUrls": [
                "./items-grid.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./items-grid.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "itemClasses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "any[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isCard",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isExpansion",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isPokemon",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isPokemonVariant",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { Pokemon, PokemonVariant } from '@app/pages';\r\nimport { Card } from '@app/pages';\r\nimport { Expansion } from '@app/pages';\r\n\r\n@Component({\r\n  selector: 'items-grid',\r\n  templateUrl: './items-grid.component.html',\r\n  styleUrls: ['./items-grid.component.scss'],\r\n})\r\nexport class ItemsGridComponent implements OnInit {\r\n  @Input() items: any[] = [];\r\n  @Input() itemClasses: string;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n\r\n  isCard(item: any) {\r\n    return item instanceof Card;\r\n  }\r\n  isPokemon(item: any) {\r\n    return item instanceof Pokemon;\r\n  }\r\n  isExpansion(item: any) {\r\n    return item instanceof Expansion;\r\n  }\r\n  isPokemonVariant(item: any) {\r\n    return item instanceof PokemonVariant;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n.items-grid {\r\n\tdisplay: flex;\r\n\tflex-wrap: wrap;\r\n\t.item-grid {\r\n\t\tdisplay: flex;\r\n\t\twidth: percentage(1/6);\r\n\t\tposition: relative;\r\n\t\ttransition: $transition;\r\n\t\t@media (max-width: $screen-medium) {\r\n\t\t\twidth: percentage(1/4);\r\n\t\t}\r\n\t\t@media (max-width: $screen-small) {\r\n\t\t\twidth: percentage(1/3);\r\n\t\t}\r\n\t\t@media (max-width: $screen-xsmall) {\r\n\t\t\twidth: percentage(1/2);\r\n\t\t}\r\n\t\t@for $i from 1 through 100 {\r\n\t\t\t&:nth-child(#{$i}) {\r\n\t\t\t\tz-index: 100 - $i;\r\n\t\t\t}\r\n\t\t}\r\n\t\t&:hover {\r\n\t\t\tz-index: 999;\r\n\t\t\ttransform: scale(1.1);\t\r\n\t\t}\r\n\t}\r\n}\r\n.pager {\r\n    display: flex;\r\n    justify-content: center;\r\n}",
                    "styleUrl": "./items-grid.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"items-grid flex padded\" *ngIf=\"items.length\">\r\n  <div class=\"item-grid {{ itemClasses }}\" *ngFor=\"let item of items\">\r\n    <!-- Expansion -->\r\n    <expansion-item-grid *ngIf=\"isExpansion(item)\" [expansion]=\"item\">\r\n    </expansion-item-grid>\r\n\r\n    <!-- Card -->\r\n    <card-item-grid *ngIf=\"isCard(item)\" [card]=\"item\"> </card-item-grid>\r\n\r\n    <!-- Pokemon -->\r\n    <!-- <pokemon-item-grid\r\n\t\t\t*ngIf=\"isPokemon(item)\"\r\n\t\t\t[pokemon]=\"item\">\r\n\t\t</pokemon-item-grid> -->\r\n\r\n    <!-- Pokemon variant -->\r\n    <pokemon-item-grid *ngIf=\"isPokemonVariant(item)\" [pokemonVariant]=\"item\">\r\n    </pokemon-item-grid>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ItemsGroupsComponent",
            "id": "component-ItemsGroupsComponent-99987daa18b89d45cab1caa3bee8e811eb6f2a7d0f43fbfcbdb2b948b0ac2b52440a5aac1cb4159e7eac748625a4fea478ef93a8d420daf865662b84673928fb",
            "file": "src/app/layout/main/items/items-groups/items-groups.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "items-groups",
            "styleUrls": [
                "./items-groups.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "items-groups.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "groups",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "ItemGroup[]",
                    "decorators": []
                },
                {
                    "name": "itemClasses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "itemDisplayType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "ItemDisplayType",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getProgressBar",
                    "args": [
                        {
                            "name": "group",
                            "type": "ItemGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "ItemGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showEmpty",
                    "args": [
                        {
                            "name": "group",
                            "type": "ItemGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "ItemGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showGrid",
                    "args": [
                        {
                            "name": "group",
                            "type": "ItemGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "ItemGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showList",
                    "args": [
                        {
                            "name": "group",
                            "type": "ItemGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "ItemGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { ProgressBar } from '@app/controls/progress-bar/progress-bar';\r\nimport { ItemDisplayType } from '../items-filter';\r\nimport { ItemGroup } from './item-group';\r\n\r\n@Component({\r\n  selector: 'items-groups',\r\n  templateUrl: 'items-groups.component.html',\r\n  styleUrls: ['./items-groups.component.scss'],\r\n})\r\nexport class ItemsGroupsComponent implements OnInit {\r\n  @Input() groups: ItemGroup[];\r\n  @Input() itemDisplayType: ItemDisplayType;\r\n  @Input() itemClasses: string;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n\r\n  getProgressBar(group: ItemGroup) {\r\n    return new ProgressBar({\r\n      value: group.progress,\r\n      total: group.total_cards,\r\n    });\r\n  }\r\n\r\n  showGrid(group: ItemGroup) {\r\n    return group.items.length && this.itemDisplayType == ItemDisplayType.grid;\r\n  }\r\n\r\n  showList(group: ItemGroup) {\r\n    return group.items.length && this.itemDisplayType == ItemDisplayType.list;\r\n  }\r\n\r\n  showEmpty(group: ItemGroup) {\r\n    return group.items.length == 0;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n.item-group {\r\n\tborder-bottom: $border;\r\n\t&:last-child {\r\n\t\tborder-bottom: 0;\r\n\t}\r\n\th2 {\r\n\t\tmargin-top: $spacing * 2;\r\n\t}\r\n}",
                    "styleUrl": "./items-groups.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- List/Grid -->\r\n<div [class.item-groups]=\"groups.length > 1\" *ngIf=\"groups && groups.length\">\r\n  <div *ngFor=\"let group of groups\" class=\"item-group\">\r\n    <div class=\"item-group-inner padding-2\">\r\n      <div class=\"max\">\r\n        <div class=\"padding-bottom\" *ngIf=\"group.name\">\r\n          <div class=\"flex padded flex-end\">\r\n            <div class=\"box\">\r\n              <div class=\"h2 bold\">{{ group.name }}</div>\r\n            </div>\r\n            <div class=\"width-3\">\r\n              <progress-bar\r\n                class=\"padding-bottom block\"\r\n                [progressBar]=\"getProgressBar(group)\"\r\n              >\r\n              </progress-bar>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- List -->\r\n        <items-list *ngIf=\"showList(group)\" [items]=\"group.items\"> </items-list>\r\n\r\n        <!-- Grid -->\r\n        <items-grid\r\n          *ngIf=\"showGrid(group)\"\r\n          [itemClasses]=\"itemClasses\"\r\n          [items]=\"group.items\"\r\n        >\r\n        </items-grid>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ItemsHeaderComponent",
            "id": "component-ItemsHeaderComponent-f05e7e438a2df909cb1d1cff416a9baaf1336fbcb0efbee41d60e866379b4a65580d7fc50a780eb3d1a236ddd06222784e22dacbf2d02c7c2045f4373d2cf4ad",
            "file": "src/app/layout/main/items/items-header/items-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "items-header",
            "styleUrls": [
                "./items-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "items-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "itemsHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "ItemsHeader",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupDefaultControlAttributes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { ProgressBar } from '@app/controls/progress-bar/progress-bar';\r\nimport { ItemsHeader } from './items-header';\r\n\r\n@Component({\r\n  selector: 'items-header',\r\n  templateUrl: 'items-header.component.html',\r\n  styleUrls: ['./items-header.component.scss'],\r\n})\r\nexport class ItemsHeaderComponent implements OnInit {\r\n  @Input() itemsHeader: ItemsHeader;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    this.setupDefaultControlAttributes();\r\n  }\r\n\r\n  setupDefaultControlAttributes() {\r\n    if (this.itemsHeader.menu) {\r\n      this.itemsHeader.menu.classes = 'round border-primary shadow-light';\r\n      this.itemsHeader.menu.horizontal = true;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n#item-header {\r\n\tposition: relative;\r\n\tpadding: $spacing * 2;\r\n\tdisplay: flex;\r\n\tfa-icon {\r\n\t\twidth: 64px;\r\n\t\theight: 64px;\r\n\t\tpadding: $spacing * 2;\r\n\t}\r\n\t.symbol-wrapper {\r\n\t\twidth: auto;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tjustify-content: center;\r\n\t\talign-items: center;\r\n\t\t@media (max-width: $screen-small) {\r\n\t\t\twidth: 100%;\r\n\t\t}\r\n\t\timg {\r\n\t\t\tmax-width: 100%;\r\n\t\t\tmax-height: 100%;\r\n\t\t}\r\n\t\t.symbol-inner {\r\n\t\t\theight: 56px;\r\n\t\t\tmax-width: 200px;\r\n\t\t\tpadding: $spacing;\r\n\t\t\tdisplay: flex;\r\n\t\t\tjustify-content: center;\r\n\t\t\talign-items: center;\r\n\t\t}\r\n\t}\r\n\t.title {\r\n\t\tmargin: 0;\r\n\t}\r\n\t.price {\r\n\t\tcolor: $green;\r\n\t\tfont-weight: bold;\r\n\t}\r\n\t.tags {\r\n\t\tmargin-top: 6px;\r\n\t}\r\n\t@media (max-width: $screen-small) {\r\n\t\tborder-top-left-radius: 0;\r\n\t\tborder-top-right-radius: 0;\r\n\t\t[class^=\"texture\"] {\r\n\t\t\tborder-top-left-radius: 0;\r\n\t\t\tborder-top-right-radius: 0;\r\n\t\t}\r\n\t\t.icon-wrapper,\r\n\t\t.symbol-wrapper {\r\n\t\t\t//display: none;\r\n\t\t\tfa-icon {\r\n\t\t\t\tpadding: $spacing;\r\n\t\t\t\twidth: 40px;\r\n\t\t\t\theight: 40px;\r\n\t\t\t}\r\n\t\t}\r\n\t\t.cards-menu {\r\n\t\t\tdisplay: flex;\r\n\t\t\twidth: 100%;\r\n\t\t}\r\n\t\t.main-header-menu {\r\n\t\t\twidth: 100%;\r\n\t\t\tdisplay: flex;\r\n\t\t}\r\n\t}\r\n}\r\n",
                    "styleUrl": "./items-header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- Header -->\r\n<div *ngIf=\"itemsHeader\" id=\"item-header\" class=\"z-4 border-bottom\">\r\n  <div class=\"max-12 width-12\">\r\n    <div class=\"max\">\r\n      <div class=\"flex box padded-2 flex-center\">\r\n        <!-- Symbol -->\r\n        <div class=\"symbol-wrapper\" *ngIf=\"itemsHeader.symbol\">\r\n          <div class=\"symbol-inner\">\r\n            <img\r\n              class=\"symbol {{ itemsHeader.symbolRarity }}\"\r\n              src=\"{{ itemsHeader.symbol }}\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Icon -->\r\n        <div *ngIf=\"itemsHeader.icon\" class=\"icon-wrapper\">\r\n          <fa-icon [icon]=\"itemsHeader.icon\"></fa-icon>\r\n        </div>\r\n\r\n        <div class=\"box min-0\">\r\n          <!-- Title -->\r\n          <h2 class=\"title ellipsis\">\r\n            <a\r\n              *ngIf=\"itemsHeader.titleRoute\"\r\n              [routerLink]=\"itemsHeader.titleRoute\"\r\n            >\r\n              {{ itemsHeader.title }}\r\n            </a>\r\n            <span *ngIf=\"!itemsHeader.titleRoute\">\r\n              {{ itemsHeader.title }}\r\n            </span>\r\n          </h2>\r\n\r\n          <!-- Sub heading -->\r\n          <div class=\"subheading\">\r\n            {{ itemsHeader.subtitle }}\r\n            <span *ngIf=\"itemsHeader.price\"\r\n              >-\r\n              <span class=\"price\">\r\n                {{ itemsHeader.price | currency }}\r\n              </span>\r\n            </span>\r\n          </div>\r\n\r\n          <!-- Tags -->\r\n          <div class=\"tags\" *ngIf=\"itemsHeader.tags.length\">\r\n            <div class=\"flex padded flex-wrap\">\r\n              <div *ngFor=\"let tag of itemsHeader.tags\">\r\n                <tag [tag]=\"tag\"></tag>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Menu -->\r\n        <div class=\"main-header-menu\" *ngIf=\"itemsHeader.menu\">\r\n          <app-menu [menu]=\"itemsHeader.menu\"></app-menu>\r\n        </div>\r\n\r\n        <!-- Toggle -->\r\n        <div *ngIf=\"itemsHeader.toggle\">\r\n          <toggle [toggle]=\"itemsHeader.toggle\"></toggle>\r\n        </div>\r\n\r\n        <!-- Button -->\r\n        <div *ngIf=\"itemsHeader.button\">\r\n          <app-button [button]=\"itemsHeader.button\"></app-button>\r\n        </div>\r\n\r\n        <!-- Progress bar -->\r\n        <div *ngIf=\"itemsHeader.progressBar\" class=\"width-3 medium-12\">\r\n          <progress-bar [progressBar]=\"itemsHeader.progressBar\"></progress-bar>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ItemsListComponent",
            "id": "component-ItemsListComponent-18c144596fc415328eb26b990d021b0175901fb709817d41740d9998a8ee5c5eb2e03e312573407d0accfea4ace07c1290d5da1599bdc8dffe19cc30a9d03f8d",
            "file": "src/app/layout/main/items/items-list/items-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "items-list",
            "styleUrls": [
                "./items-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./items-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "any[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isCard",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isExpansion",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isPokemon",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isPokemonVariant",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { Pokemon, PokemonVariant } from '@app/pages';\r\n\r\nimport { Card } from '@app/pages';\r\nimport { Expansion } from '@app/pages';\r\n\r\n@Component({\r\n  selector: 'items-list',\r\n  templateUrl: './items-list.component.html',\r\n  styleUrls: ['./items-list.component.scss'],\r\n})\r\nexport class ItemsListComponent implements OnInit {\r\n  @Input() items: any[];\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n\r\n  isCard(item: any) {\r\n    return item instanceof Card;\r\n  }\r\n  isPokemon(item: any) {\r\n    return item instanceof Pokemon;\r\n  }\r\n  isExpansion(item: any) {\r\n    return item instanceof Expansion;\r\n  }\r\n  isPokemonVariant(item: any) {\r\n    return item instanceof PokemonVariant;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\",\r\n\t\t\"scaffold/typography\";\r\n\r\n.items-list {\r\n    > ul {\r\n        > li {\r\n            position: relative;\r\n            @for $i from 1 through 100 {\r\n                &:nth-child(#{$i}) {\r\n                    z-index: 100 - $i;\r\n                }\r\n\t\t\t}\r\n\t\t\tborder-bottom: $border;\r\n\t\t\t&:last-child {\r\n\t\t\t\tborder-bottom: 0;\r\n\t\t\t}\r\n        }\r\n    }\r\n}\r\n.pager {\r\n    display: flex;\r\n    justify-content: center;\r\n    > * {\r\n        margin: 4px;\r\n    }\r\n}",
                    "styleUrl": "./items-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"items-list\" *ngIf=\"items.length\">\r\n  <ul>\r\n    <li *ngFor=\"let item of items\">\r\n      <!-- Card -->\r\n      <card-item-list *ngIf=\"isCard(item)\" [card]=\"item\"> </card-item-list>\r\n\r\n      <!-- Expansion -->\r\n      <expansion-item-list *ngIf=\"isExpansion(item)\" [expansion]=\"item\">\r\n      </expansion-item-list>\r\n\r\n      <!-- Pokemon variant -->\r\n      <pokemon-item-list *ngIf=\"isPokemonVariant(item)\" [pokemonVariant]=\"item\">\r\n      </pokemon-item-list>\r\n    </li>\r\n  </ul>\r\n</div>\r\n"
        },
        {
            "name": "LoaderComponent",
            "id": "component-LoaderComponent-a3ed89da45dc632427a59c33b325850186285793b9175af5d3247dbd48b4b5d1d4b4a308461fd6df826f323146db988cfa1dbaac709fb66ea0c270787335fb80",
            "file": "src/app/controls/loader/loader.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "loader",
            "styleUrls": [
                "./loader.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loader.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "dark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'loader',\r\n  templateUrl: './loader.component.html',\r\n  styleUrls: ['./loader.component.scss'],\r\n})\r\nexport class LoaderComponent implements OnInit {\r\n  @Input() dark: boolean;\r\n  @Input() active: boolean;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n$border-pokeball: 4px solid rgb(102, 0, 0);\r\n\r\n.pokeball-wrapper {\r\n\tposition: absolute;\r\n\ttop: 50%;\r\n\tleft: 50%;\r\n\ttransform: translate(-50%, -50%);\r\n}\r\n\r\n.pokeball {\r\n\twidth: 60px;\r\n\theight: 60px;\r\n\tbackground-color: #fff;\r\n\tborder-radius: 50%;\r\n\tposition: relative;\r\n\toverflow: hidden;\r\n\tanimation: rotate 0.8s linear 0s infinite;\r\n\tbox-shadow: 0 0 8px 8px black;\r\n}\r\n\r\n// Center\r\n.pokeball:before {\r\n\tcontent: \"\";\r\n\tposition: absolute;\r\n\tbackground-color: #fff;\r\n\twidth: 14px;\r\n\theight: 14px;\r\n\tborder: $border-pokeball;\r\n\tborder-radius: 50%;\r\n\tz-index: 1;\r\n\ttop: 50%;\r\n\tleft: 50%;\r\n\ttransform: translate(-50%, -50%);\r\n}\r\n\r\n// Red\r\n.pokeball:after {\r\n\tcontent: \"\";\r\n\tposition: absolute;\r\n\tbackground-color: red;\r\n\tborder-bottom: $border-pokeball;\r\n\ttop: 0;\r\n\theight: calc(50% + 2px);\r\n\twidth: 100%;\r\n}\r\n\r\n@keyframes rotate {\r\n\t0% {\r\n\t\ttransform: rotate(0deg);\r\n\t}\r\n\t100% {\r\n\t\ttransform: rotate(360deg);\r\n\t}\r\n}\r\n",
                    "styleUrl": "./loader.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"overlay\" [class.active]=\"active\">\r\n  <div class=\"pokeball-wrapper\">\r\n    <div class=\"pokeball\"></div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "MenuComponent",
            "id": "component-MenuComponent-f373babd49f1b01d11f135aa6b6d62c6bcbe34485982697f3d93a8203a60d38884b208a9a9f090918513e81aeea55826818ce7d9bcb6b9735383f82513519159",
            "file": "src/app/controls/menu/menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-menu",
            "styleUrls": [
                "./menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "menu",
                    "defaultValue": "new Menu()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Menu",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "clickOutside",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getExpandIcon",
                    "args": [
                        {
                            "name": "item",
                            "type": "MenuItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"caret-up\" | \"caret-down\"",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "MenuItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onItemClick",
                    "args": [
                        {
                            "name": "item",
                            "type": "MenuItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "MenuItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { Menu, MenuItem } from './menu';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-menu',\r\n  templateUrl: './menu.component.html',\r\n  styleUrls: ['./menu.component.scss'],\r\n})\r\nexport class MenuComponent implements OnInit {\r\n  @Input() menu: Menu = new Menu();\r\n\r\n  constructor(private router: Router, private route: ActivatedRoute) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  onItemClick(item: MenuItem, event: MouseEvent) {\r\n    if (!item.href) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n\r\n      if (item.route) {\r\n        this.router.navigate([item.route], { relativeTo: this.route });\r\n      }\r\n\r\n      // item.click is often clearActive, so save current active state first\r\n      if (item.click) {\r\n        item.click(event);\r\n      }\r\n      if (item.menu) {\r\n        item.active = !item.active;\r\n      }\r\n    }\r\n  }\r\n\r\n  getExpandIcon(item: MenuItem) {\r\n    if (\r\n      item.menu &&\r\n      item.menu.classes &&\r\n      item.menu.classes.includes('anchor-bottom')\r\n    ) {\r\n      return 'caret-up';\r\n    } else {\r\n      return 'caret-down';\r\n    }\r\n  }\r\n\r\n  clickOutside() {\r\n    if (this.menu.clearActiveClickOutside) {\r\n      this.menu.clearActive();\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n@import \"../button/button.component.scss\";\r\n\r\n.menu {\r\n  //box-shadow: $shadow-sheen;\r\n  //border: $border;\r\n  background: $input-bg;\r\n  @media (max-width: $screen-medium) {\r\n    &.medium-stacked {\r\n      a {\r\n        flex-direction: column;\r\n      }\r\n    }\r\n  }\r\n  a:not(.no-ellipsis) {\r\n    .text {\r\n      white-space: nowrap;\r\n      text-overflow: ellipsis;\r\n      overflow: hidden;\r\n    }\r\n  }\r\n  &.dark {\r\n    border-color: $border-color-strong;\r\n  }\r\n  a {\r\n    display: flex;\r\n    flex-wrap: nowrap;\r\n    align-items: center;\r\n    min-height: 40px;\r\n    padding: $spacing ($spacing * 2);\r\n    flex: 1;\r\n    max-width: 100%;\r\n    user-select: none;\r\n    color: $font-color;\r\n    @media (max-width: $screen-small) {\r\n      padding: 8px 12px;\r\n    }\r\n    &:hover {\r\n      background: rgba($grey, 0.1);\r\n    }\r\n    .text {\r\n      flex: 1 0 0;\r\n      min-width: 0;\r\n      + .price {\r\n        padding-left: $spacing;\r\n      }\r\n    }\r\n    .symbol {\r\n      height: 20px;\r\n      width: 20px;\r\n      display: flex;\r\n      justify-content: center;\r\n      filter: contrast(0) brightness(10);\r\n      //filter: contrast(0) sepia(100%) hue-rotate(164deg) brightness(0.7)\r\n      //\tsaturate(2);\r\n      img {\r\n        max-height: 100%;\r\n        display: block;\r\n      }\r\n      + * {\r\n        padding-left: $spacing;\r\n      }\r\n    }\r\n    .icon {\r\n      fa-icon {\r\n        width: 20px;\r\n        height: 16px;\r\n      }\r\n      + .text {\r\n        padding-left: $spacing;\r\n      }\r\n    }\r\n    span + .icon-expand {\r\n      padding-left: $spacing;\r\n    }\r\n    .price {\r\n      color: $green;\r\n      font-weight: bold;\r\n    }\r\n  }\r\n  li {\r\n    position: relative;\r\n    display: flex;\r\n    user-select: none;\r\n    flex-wrap: wrap;\r\n    //flex: 1 0 0; // Made card detail tabs span parent\r\n    &.active {\r\n      > a {\r\n        box-shadow: inset 3px 0 0 $primary-color;\r\n        background: rgba($primary-color, 0.1);\r\n      }\r\n    }\r\n\r\n    &.disabled {\r\n      opacity: 0.5;\r\n      cursor: not-allowed;\r\n      a {\r\n        pointer-events: none;\r\n      }\r\n    }\r\n\r\n    .form {\r\n      display: flex;\r\n      flex-wrap: nowrap;\r\n    }\r\n\r\n    // Handle icon rotation\r\n    &.icon-tap {\r\n      > a {\r\n        > .icon {\r\n          fa-icon {\r\n            transform: rotateY(180deg);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    textbox {\r\n      display: block;\r\n      + Button {\r\n        &.padding {\r\n          padding-left: 0;\r\n        }\r\n      }\r\n    }\r\n    Button {\r\n      display: block;\r\n    }\r\n\r\n    // See collection card version menu for why\r\n    app-menu {\r\n      min-width: 100%;\r\n    }\r\n  }\r\n  ul {\r\n    position: relative;\r\n    .menu {\r\n      position: absolute;\r\n      top: 100%;\r\n      left: 0;\r\n      background: $panel-bg;\r\n      box-shadow: $shadow;\r\n      border-radius: $border-radius;\r\n      white-space: nowrap;\r\n      z-index: 1;\r\n      &.anchor-right {\r\n        left: auto;\r\n        right: 0;\r\n      }\r\n      &.anchor-bottom {\r\n        bottom: 100%;\r\n        top: auto;\r\n      }\r\n      &.anchor-center {\r\n        left: 50%;\r\n        transform: translateX(-50%);\r\n      }\r\n\r\n      ul {\r\n        overflow-y: auto;\r\n        // Sub-sub menu\r\n        .menu {\r\n          position: relative;\r\n          top: 0;\r\n          left: 0;\r\n          right: auto;\r\n          bottom: auto;\r\n          margin: $spacing;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Borders\r\n  &.borders {\r\n    &:not(.horizonal) {\r\n      li:not(:last-child) {\r\n        border-bottom: $border;\r\n      }\r\n    }\r\n    &.horizonal {\r\n      li:not(:last-child) {\r\n        border-right: $border;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Sizes\r\n  &.small {\r\n    a {\r\n      padding: 8px 12px;\r\n      font-size: 14px;\r\n      .icon {\r\n        fa-icon {\r\n          width: 14px;\r\n          height: 14px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  &.large {\r\n    a {\r\n      padding: 12px 24px;\r\n      font-size: 120%;\r\n      .icon {\r\n        fa-icon {\r\n          width: 24px;\r\n          height: 24px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Round\r\n  &.round {\r\n    > ul > li {\r\n      &:first-child > a {\r\n        border-top-left-radius: $border-radius;\r\n        border-top-right-radius: $border-radius;\r\n      }\r\n      &:last-child > a {\r\n        border-bottom-left-radius: $border-radius;\r\n        border-bottom-right-radius: $border-radius;\r\n      }\r\n    }\r\n    &.horizontal {\r\n      > ul > li {\r\n        &:first-child > a {\r\n          border-top-left-radius: $border-radius;\r\n          border-bottom-left-radius: $border-radius;\r\n          border-top-right-radius: 0;\r\n          border-bottom-right-radius: 0;\r\n        }\r\n        &:last-child > a {\r\n          border-top-right-radius: $border-radius;\r\n          border-bottom-right-radius: $border-radius;\r\n          border-bottom-left-radius: 0;\r\n          border-top-left-radius: 0;\r\n        }\r\n        &:first-child:last-child > a {\r\n          border-radius: $border-radius;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  @media (max-width: $screen-medium) {\r\n    &.medium-square {\r\n      > ul > li {\r\n        &:first-child > a {\r\n          border-radius: 0 !important;\r\n        }\r\n        &:last-child > a {\r\n          border-radius: 0 !important;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  &.round-top {\r\n    li {\r\n      &:first-child > a {\r\n        border-top-left-radius: $border-radius;\r\n        border-top-right-radius: $border-radius;\r\n      }\r\n    }\r\n  }\r\n  &.round-bottom {\r\n    li {\r\n      &:last-child > a {\r\n        border-bottom-right-radius: $border-radius;\r\n        border-bottom-left-radius: $border-radius;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Tabs\r\n  &.tabs {\r\n    border-bottom: 1px solid $border-color;\r\n    > ul {\r\n      > li {\r\n        > a {\r\n          border-top-left-radius: $border-radius-small;\r\n          border-top-right-radius: $border-radius-small;\r\n          @media (max-width: $screen-medium) {\r\n            flex-direction: column;\r\n            align-items: center;\r\n            font-size: 100%;\r\n            padding: $spacing;\r\n            .text {\r\n              flex: initial;\r\n              padding-left: 0 !important;\r\n              margin-top: 4px;\r\n            }\r\n            .icon-expand {\r\n              display: none;\r\n            }\r\n          }\r\n          @media (max-width: $screen-small) {\r\n            font-size: 14px;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Horizontal\r\n  &.tabs,\r\n  &.horizontal {\r\n    > ul {\r\n      display: flex;\r\n      flex-wrap: nowrap;\r\n      > li {\r\n        &.active {\r\n          > a {\r\n            box-shadow: inset 0 -3px 0 0 $primary-color,\r\n              0 1px 0 0 $primary-color;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<nav\r\n  *ngIf=\"menu\"\r\n  (clickOutside)=\"clickOutside()\"\r\n  [class.dark]=\"menu.dark\"\r\n  class=\"menu\r\n\t\t{{ menu.round ? 'round' : '' }}\r\n\t\t{{ menu.size ? menu.size : '' }}\r\n\t\t{{ menu.classes ? menu.classes : '' }}\r\n\t\t{{ menu.horizontal ? 'horizontal' : '' }}\r\n\t\t{{ menu.tabs ? 'tabs' : '' }}\r\n\t\t{{ menu.borders ? 'borders' : '' }}\"\r\n>\r\n  <div class=\"menu-search\" *ngIf=\"menu.search\">\r\n    <textbox [textbox]=\"menu.textboxSearch\"></textbox>\r\n  </div>\r\n  <ul\r\n    [style.minHeight]=\"menu.minHeight ? menu.minHeight : null\"\r\n    [style.minWidth]=\"menu.minWidth ? menu.minWidth : null\"\r\n    [style.maxHeight]=\"menu.maxHeight ? menu.maxHeight : null\"\r\n    [style.maxWidth]=\"menu.maxWidth ? menu.maxWidth : null\"\r\n  >\r\n    <li\r\n      *ngFor=\"let item of menu.items\"\r\n      [class.disabled]=\"item.disabled\"\r\n      [class.active]=\"item.active\"\r\n      class=\"{{ item.classes ? item.classes : '' }}\"\r\n      [routerLinkActive]=\"item.route ? 'active' : ''\"\r\n      [routerLinkActiveOptions]=\"{ exact: item.exactMatch }\"\r\n    >\r\n      <hr *ngIf=\"item.separator\" />\r\n\r\n      <a\r\n        [class]=\"item.classesLink\"\r\n        *ngIf=\"!item.separator && !item.textbox && !item.route\"\r\n        [href]=\"item && item.href\"\r\n        [target]=\"item && item.target\"\r\n        (click)=\"onItemClick(item, $event)\"\r\n      >\r\n        <span class=\"symbol\" *ngIf=\"item.symbol\">\r\n          <img [src]=\"item.symbol\" />\r\n        </span>\r\n        <span class=\"icon\" *ngIf=\"item.icon\">\r\n          <fa-icon [icon]=\"item.icon\"></fa-icon>\r\n        </span>\r\n        <span\r\n          class=\"text {{ menu.maxWidth ? 'ellipsis' : '' }}\"\r\n          *ngIf=\"item.text\"\r\n        >\r\n          {{ item.text }}\r\n        </span>\r\n        <span class=\"price\" *ngIf=\"item.price\">\r\n          {{ item.price | currency }}\r\n        </span>\r\n        <span class=\"icon-expand\" *ngIf=\"item.menu\">\r\n          <fa-icon [icon]=\"getExpandIcon(item)\"></fa-icon>\r\n        </span>\r\n      </a>\r\n\r\n      <a\r\n        [routerLink]=\"item.route\"\r\n        [class]=\"item.classesLink\"\r\n        *ngIf=\"!item.separator && !item.textbox && item.route\"\r\n        (click)=\"onItemClick(item, $event)\"\r\n      >\r\n        <span class=\"symbol\" *ngIf=\"item.symbol\">\r\n          <img [src]=\"item.symbol\" />\r\n        </span>\r\n        <span class=\"icon\" *ngIf=\"item.icon\">\r\n          <fa-icon [icon]=\"item.icon\"></fa-icon>\r\n        </span>\r\n        <span\r\n          class=\"text {{ menu.maxWidth ? 'ellipsis' : '' }}\"\r\n          *ngIf=\"item.text\"\r\n        >\r\n          {{ item.text }}\r\n        </span>\r\n        <span class=\"price\" *ngIf=\"item.price\">\r\n          {{ item.price | currency }}\r\n        </span>\r\n        <span class=\"icon-expand\" *ngIf=\"item.menu\">\r\n          <fa-icon [icon]=\"getExpandIcon(item)\"></fa-icon>\r\n        </span>\r\n      </a>\r\n\r\n      <div class=\"form\" *ngIf=\"item.textbox || item.button\">\r\n        <textbox\r\n          *ngIf=\"item.textbox\"\r\n          [textbox]=\"item.textbox\"\r\n          class=\"padding\"\r\n        ></textbox>\r\n        <app-button\r\n          *ngIf=\"item.button\"\r\n          [button]=\"item.button\"\r\n          class=\"padding\"\r\n        ></app-button>\r\n      </div>\r\n\r\n      <app-menu *ngIf=\"item.menu && item.active\" [menu]=\"item.menu\"></app-menu>\r\n    </li>\r\n  </ul>\r\n</nav>\r\n"
        },
        {
            "name": "NotificationsComponent",
            "id": "component-NotificationsComponent-f43577f40b39e72b734b02eaed65e36a69f9be53ee720dd4592f1c3a96154d3451add2ee953a88859aa127b029fdd99e2902d4ff17b411e15d4acc808eee8165",
            "file": "src/app/controls/notifications/notifications.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "notifications",
            "styleUrls": [
                "./notifications.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "notifications.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "notifications",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Notification[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeNotification",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { Notification } from './notification';\r\nimport { NotificationsService } from './notifications.service';\r\n\r\n@Component({\r\n  selector: 'notifications',\r\n  templateUrl: 'notifications.component.html',\r\n  styleUrls: ['./notifications.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class NotificationsComponent implements OnInit {\r\n  notifications: Notification[] = [];\r\n\r\n  constructor(private notificationService: NotificationsService) {}\r\n\r\n  ngOnInit() {\r\n    this.notificationService\r\n      .notificationsObservable()\r\n      .subscribe((notifications) => {\r\n        this.notifications = notifications;\r\n      });\r\n  }\r\n\r\n  removeNotification(id: number) {\r\n    this.notifications = this.notifications.filter((notification) => {\r\n      return notification.id != id;\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n.notifications-wrapper {\r\n\tpadding: $spacing;\r\n\tposition: fixed;\r\n\ttop: $header-height + 57px;\r\n\tleft: 0;\r\n\tright: 0;\r\n\tz-index: 9999;\r\n\tpointer-events: none;\r\n}\r\n.notifications {\r\n\tposition: relative;\r\n\tright: 0;\r\n\ttop: 0;\r\n\tposition: absolute;\r\n\tz-index: 999;\r\n\tmax-width: 100%;\r\n}\r\n.notification {\r\n\tpointer-events: all;\r\n\tbackground: rgba(black, .8);\r\n\tborder-radius: $border-radius-small;\r\n\tcolor: white;\r\n\tpadding: $spacing + 1px ($spacing * 2);\r\n\tpadding-right: 40px;\r\n\tbox-shadow: $shadow;\r\n\ttransition: $transition, ease .2s height, ease .2s padding, ease .2s margin;\r\n\tmargin-bottom: $spacing;\r\n\tposition: relative;\r\n\t//height: 40px;\r\n\tmax-width: 100%;\r\n\twidth: 400px;\r\n\topacity: 1;\r\n\t.notification-message {\r\n\t\ttext-overflow: ellipsis;\r\n\t\toverflow: hidden;\r\n\t\tdisplay: block;\r\n\t\tmax-width: 100%;\r\n\t}\r\n\t.close {\r\n\t\tcursor: pointer;\r\n\t\tposition: absolute;\r\n\t\ttop: 0;\r\n\t\tright: 0;\r\n\t\tbottom: 0;\r\n\t\tbackground: rgba(black, .2);\r\n\t\tborder-top-right-radius: $border-radius-small;\r\n\t\tborder-bottom-right-radius: $border-radius-small;\r\n\t\tpadding: $spacing;\r\n\t\ttransition: $transition;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tjustify-content: center;\r\n\t\tfa-icon {\r\n\t\t\tmargin: 0;\r\n\t\t\twidth: 16px;\r\n\t\t\theight: 16px;\r\n\t\t}\r\n\t\t&:hover {\r\n\t\t\tbackground: rgba(black, .4);\r\n\t\t\tbox-shadow: $shadow;\r\n\t\t}\r\n\t}\r\n\t&.hidden {\r\n\t\theight: 0;\r\n\t\tpadding-top: 0;\r\n\t\tpadding-bottom: 0;\r\n\t\topacity: 0;\r\n\t\toverflow: hidden;\r\n\t\tmargin: 0;\r\n\t\tpointer-events: none;\r\n\t\t&:hover, &:active {\r\n\t\t\tbox-shadow: none;\r\n\t\t}\r\n\t}\r\n\tfa-icon {\r\n\t\twidth: 24px;\r\n\t\theight: 24px;\r\n\t\tmargin-right: $spacing;\r\n\t}\r\n\t&:hover, &:active {\r\n\t\tbox-shadow: $shadow, $shadow-focus;\r\n\t}\r\n}",
                    "styleUrl": "./notifications.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"notifications.length\" class=\"notifications-wrapper\">\r\n\t<div class=\"max relative\">\r\n\t\t<div class=\"notifications\">\r\n\t\t\t<div\r\n\t\t\t\t*ngFor=\"let notification of notifications\"\r\n\t\t\t\t(click)=\"notification.click()\"\r\n\t\t\t\tclass=\"notification animated fadeInUp\r\n\t\t\t\t\t{{ notification.alertType }}\r\n\t\t\t\t\t{{ notification.hidden ? 'hidden' : '' }}\"\r\n\t\t\t>\r\n\t\t\t\t<div class=\"flex padded flex-center flex-nowrap\">\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<fa-icon [icon]=\"notification.icon\"></fa-icon>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"box word-break\">\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tclass=\"notification-message\"\r\n\t\t\t\t\t\t\ttitle=\"{{ notification.message }}\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<span>{{ notification.message }}</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div\r\n\t\t\t\t\t*ngIf=\"!notification.duration\"\r\n\t\t\t\t\tclass=\"close\"\r\n\t\t\t\t\t(click)=\"notification.hide()\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<fa-icon icon=\"times\"></fa-icon>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n"
        },
        {
            "name": "PokedexEntryDialogComponent",
            "id": "component-PokedexEntryDialogComponent-6dfb36f941ff315334e69bee808fe9a650f7154357a46efa3116740ce5736ca6070b5371685aa0e5a1ffad01e95e97c6213720b1bd9438b5061e7a64df968059",
            "file": "src/app/pages/pokemons/pokemon/pokedex-entry-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pokedex-entry-dialog",
            "styleUrls": [],
            "styles": [],
            "template": "{{ config.data }}",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogConfig",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogRef",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { DialogRef } from '@app/controls/dialog';\r\nimport { Component } from '@angular/core';\r\nimport { DialogConfig } from '@app/controls';\r\n\r\n@Component({\r\n  selector: 'pokedex-entry-dialog',\r\n  template: `{{ config.data }}`,\r\n})\r\nexport class PokedexEntryDialogComponent {\r\n  constructor(public config: DialogConfig, public dialog: DialogRef) {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "DialogConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "DialogRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "DialogConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "DialogRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "PokemonComponent",
            "id": "component-PokemonComponent-97d54048712a131efaabb30e543054f665d0f71f1c0d47a84cbe56bc8cccb60c03ec8eeeac52d19dadf4afa90b87eb5ad6e5c6e9b683ada3dc1ceb16df631e32",
            "file": "src/app/pages/pokemons/pokemon/pokemon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pokemon",
            "styleUrls": [
                "./pokemon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "pokemon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "pokemonVariant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "PokemonVariant",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonDex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "items",
                    "defaultValue": "new Items()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Items",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "progressBar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProgressBar",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "selectVariants",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Select",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "slug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "tagHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tag",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "tagWeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tag",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "getCards",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AppSettings } from '@app/app';\r\nimport {\r\n  Button,\r\n  DialogConfig,\r\n  DialogService,\r\n  LoaderService,\r\n  ProgressBar,\r\n  Select,\r\n  SelectOption,\r\n  SelectOptionGroup,\r\n  Tag,\r\n} from '@app/controls';\r\nimport { ItemGroup, Items } from '@app/layout/main';\r\nimport { APIGetPaged, Size, Symbols } from '@app/models';\r\nimport { PokedexEntryDialogComponent } from './pokedex-entry-dialog.component';\r\nimport { PokemonVariant, SetSortByPokemon } from './pokemon';\r\nimport { PokemonService } from './pokemon.service';\r\n\r\n@Component({\r\n  selector: 'pokemon',\r\n  templateUrl: 'pokemon.component.html',\r\n  styleUrls: ['./pokemon.component.scss'],\r\n})\r\nexport class PokemonComponent implements OnInit {\r\n  @Input() pokemonVariant: PokemonVariant;\r\n  items: Items = new Items();\r\n  slug: string;\r\n  buttonDex: Button;\r\n  progressBar: ProgressBar;\r\n  selectVariants: Select;\r\n  tagHeight: Tag;\r\n  tagWeight: Tag;\r\n\r\n  constructor(\r\n    private titleService: Title,\r\n    private pokemonService: PokemonService,\r\n    private loaderService: LoaderService,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private dialogService: DialogService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.setupControls();\r\n\r\n    // Response get pokemon\r\n    this.pokemonService\r\n      .getPokemonVariantObservable()\r\n      .subscribe((pokemonVariant) => {\r\n        if (pokemonVariant) {\r\n          this.titleService.setTitle(\r\n            AppSettings.titlePrefix + pokemonVariant.pokemon.name\r\n          );\r\n          this.loaderService.clearItemLoading('getPokemon');\r\n          this.pokemonVariant = pokemonVariant;\r\n          this.items.noResults =\r\n            'No ' + this.pokemonVariant.name + ' cards found';\r\n          this.progressBar = new ProgressBar({\r\n            value: pokemonVariant.progress,\r\n            total: pokemonVariant.total_cards,\r\n          });\r\n          this.getCards();\r\n\r\n          // Dex button\r\n          this.buttonDex = new Button({\r\n            symbol: Symbols.pokeball,\r\n            text: 'Pokédex Entry',\r\n            size: Size.small,\r\n            click: () => {\r\n              this.dialogService.open(\r\n                PokedexEntryDialogComponent,\r\n                new DialogConfig({\r\n                  title: 'Pokédex Entry',\r\n                  data: this.pokemonVariant.pokemon.flavor_texts,\r\n                })\r\n              );\r\n            },\r\n          });\r\n\r\n          // Height/weight\r\n          this.tagHeight = new Tag({\r\n            text: this.pokemonVariant.height / 10 + ' m',\r\n          });\r\n          this.tagWeight = new Tag({\r\n            text: this.pokemonVariant.weight / 10 + 'kg',\r\n          });\r\n\r\n          // Variants\r\n          this.selectVariants.optionGroups = [\r\n            new SelectOptionGroup({\r\n              label: 'Variants',\r\n              options: [\r\n                new SelectOption({\r\n                  text: this.pokemonVariant.name,\r\n                  value: this.pokemonVariant.route,\r\n                }),\r\n                ...this.pokemonVariant.other_variants.map(\r\n                  (variant) =>\r\n                    new SelectOption({\r\n                      text: variant.name,\r\n                      value: variant.route,\r\n                    })\r\n                ),\r\n              ],\r\n            }),\r\n          ];\r\n          this.selectVariants.value = this.pokemonVariant.route;\r\n        }\r\n      });\r\n\r\n    // Response get pokemon cards\r\n    this.pokemonService.getPokemonVariantCardsObservable().subscribe((res) => {\r\n      if (res) {\r\n        this.items.footer.totalPages = res.total_pages;\r\n        this.items.footer.totalItems = res.total_results;\r\n        this.items.filter.textboxSearch.placeholder = `Search ${this.pokemonVariant.name} cards...`;\r\n        if (res.cards) {\r\n          this.items.itemGroups = [\r\n            new ItemGroup({\r\n              items: res.cards,\r\n            }),\r\n          ];\r\n        } else {\r\n          this.items.itemGroups = [];\r\n        }\r\n      }\r\n    });\r\n\r\n    // Request get pokemon\r\n    this.route.params.subscribe((params) => {\r\n      this.slug = params['slug'];\r\n      this.pokemonService.getPokemonVariant(this.slug);\r\n    });\r\n  }\r\n\r\n  setupControls() {\r\n    SetSortByPokemon(this.items.filter.selectSortBy);\r\n    this.items.showHeader = false;\r\n    this.items.footer.pageSize = 24;\r\n    this.items.footer.selectPageSize.value =\r\n      this.items.footer.pageSize.toString();\r\n    this.items.noResultsImage = Symbols.cards;\r\n\r\n    // Variants\r\n    this.selectVariants = new Select({\r\n      classes: 'small',\r\n      change: (value) => {\r\n        this.router.navigate([value]);\r\n      },\r\n    });\r\n  }\r\n\r\n  getCards() {\r\n    this.pokemonService.getPokemonVariantCards(\r\n      new APIGetPaged({\r\n        page: this.items.footer.page,\r\n        slug: this.slug,\r\n        page_size: this.items.footer.pageSize,\r\n        sort_by: this.items.filter.selectSortBy.value,\r\n        sort_direction: this.items.filter.selectSortDirection.value,\r\n        query: this.items.filter.textboxSearch.value,\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\", \"custom\";\r\n\r\n:host {\r\n  display: block;\r\n}\r\n\r\n.hero {\r\n  position: relative;\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 548px;\r\n  justify-content: flex-start;\r\n  &:after {\r\n    content: \"\";\r\n    box-shadow: $shadow-inset-large;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    position: absolute;\r\n    z-index: 2;\r\n    pointer-events: none;\r\n  }\r\n  @each $type, $color in $poke-types {\r\n    &.#{$type} {\r\n      background: linear-gradient(\r\n        to right,\r\n        darken($color, 20%),\r\n        darken(mix($color, black, 80%), 20%)\r\n      );\r\n    }\r\n  }\r\n  .pokemon-types {\r\n    padding: $spacing;\r\n    padding-bottom: $spacing * 4;\r\n    display: flex;\r\n    justify-content: center;\r\n    z-index: 2;\r\n    position: relative;\r\n  }\r\n  .pokemon-image-placeholder {\r\n    width: 400px;\r\n    height: 400px;\r\n    padding: $spacing * 8;\r\n    display: flex;\r\n    justify-content: center;\r\n    z-index: 2;\r\n    position: relative;\r\n    margin: auto;\r\n    fa-icon {\r\n      width: 100%;\r\n    }\r\n  }\r\n  .art {\r\n    margin: 0 auto;\r\n    filter: drop-shadow($shadow);\r\n    position: relative;\r\n    z-index: 2;\r\n    padding: $spacing * 4;\r\n    width: 400px;\r\n    &.noEvolutionChain {\r\n      margin-top: -$spacing * 2;\r\n    }\r\n  }\r\n  .bg-type {\r\n    position: absolute;\r\n    left: 50%;\r\n    top: 50%;\r\n    transform: translate(-50%, -50%);\r\n    width: 500px;\r\n    opacity: 0.1;\r\n    z-index: 1;\r\n  }\r\n  .prev-pokemon,\r\n  .next-pokemon {\r\n    position: absolute;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n    background: $menu-bg;\r\n    padding: $spacing * 3;\r\n    color: white;\r\n    box-shadow: $shadow;\r\n    z-index: 3;\r\n    &:hover {\r\n      box-shadow: $shadow, $shadow-focus;\r\n    }\r\n  }\r\n  .prev-pokemon {\r\n    left: 0;\r\n    border-top-right-radius: $border-radius;\r\n    border-bottom-right-radius: $border-radius;\r\n  }\r\n  .next-pokemon {\r\n    right: 0;\r\n    border-top-left-radius: $border-radius;\r\n    border-bottom-left-radius: $border-radius;\r\n  }\r\n}\r\n\r\n.pokemon-info {\r\n  padding: $spacing * 2;\r\n  border-bottom: $border;\r\n  h1 {\r\n    line-height: 1;\r\n  }\r\n}\r\n\r\n.dex-number {\r\n  font-size: 60%;\r\n  opacity: 0.75;\r\n  text-transform: capitalize;\r\n}\r\n\r\n.pokemon-dex {\r\n  @media (max-width: $screen-medium) {\r\n    width: 100%;\r\n  }\r\n}\r\n\r\n.pokemon-sprites {\r\n  position: absolute;\r\n  left: 80px;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  filter: drop-shadow($shadow);\r\n}\r\n\r\n.pokemon-region {\r\n  text-transform: capitalize;\r\n}\r\n\r\n.pokemon-generation {\r\n  text-transform: capitalize;\r\n}\r\n\r\n.pokemon-evolution-chain {\r\n  border-radius: $border-radius-small;\r\n  border-bottom-left-radius: 0;\r\n  border-bottom-right-radius: 0;\r\n  //background: rgba($menu-bg, .5);\r\n  z-index: 2;\r\n  padding: $spacing;\r\n  position: relative;\r\n  display: flex;\r\n  margin: auto;\r\n  color: white;\r\n  .pokemon-evolution-wrapper {\r\n    &:not(:last-child) {\r\n      fa-icon {\r\n        position: absolute;\r\n        top: 50%;\r\n        transform: translateY(-50%);\r\n        right: -16px;\r\n      }\r\n    }\r\n    &:last-child {\r\n      fa-icon {\r\n        display: none;\r\n      }\r\n    }\r\n  }\r\n  .pokemon-evolution {\r\n    position: relative;\r\n    padding: $spacing;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    color: white;\r\n  }\r\n}\r\n\r\nprogress-bar {\r\n  position: absolute;\r\n  bottom: 140px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  width: 200px;\r\n  &.noEvolutionChain {\r\n  }\r\n}\r\n\r\napp-select {\r\n  position: absolute;\r\n  bottom: 157px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  width: 200px;\r\n  z-index: 2;\r\n}\r\n",
                    "styleUrl": "./pokemon.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pokemonService",
                        "type": "PokemonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pokemonService",
                        "type": "PokemonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"pokemonVariant\" class=\"pokemon-details\">\r\n  <div class=\"flex justify-center hero {{ pokemonVariant.types[0] }}\">\r\n    <!-- Prev -->\r\n    <a\r\n      class=\"prev-pokemon\"\r\n      [routerLink]=\"'/pokemon/' + pokemonVariant.previous_pokemon\"\r\n    >\r\n      <fa-icon icon=\"arrow-left\"></fa-icon>\r\n    </a>\r\n\r\n    <!-- Next -->\r\n    <a\r\n      class=\"next-pokemon\"\r\n      [routerLink]=\"'/pokemon/' + pokemonVariant.next_pokemon\"\r\n    >\r\n      <fa-icon icon=\"arrow-right\"></fa-icon>\r\n    </a>\r\n\r\n    <!-- Sprite -->\r\n    <img\r\n      *ngIf=\"pokemonVariant.sprites.official\"\r\n      class=\"art\"\r\n      src=\"{{ pokemonVariant.sprites.official }}\"\r\n    />\r\n\r\n    <!-- No sprite -->\r\n    <div\r\n      class=\"pokemon-image-placeholder\"\r\n      *ngIf=\"!pokemonVariant.sprites.official\"\r\n    >\r\n      <fa-icon icon=\"question\"></fa-icon>\r\n    </div>\r\n\r\n    <!-- Pokeball -->\r\n    <img\r\n      class=\"bg-type\"\r\n      src=\"https://duiker101.github.io/pokemon-type-svg-icons/icons/{{\r\n        pokemonVariant.types[0].toLowerCase()\r\n      }}.svg\"\r\n    />\r\n\r\n    <progress-bar [progressBar]=\"progressBar\"> </progress-bar>\r\n\r\n    <app-select [select]=\"selectVariants\"></app-select>\r\n\r\n    <!-- Evolutions -->\r\n    <div\r\n      *ngIf=\"pokemonVariant.pokemon.evolution_chain.length > 1\"\r\n      class=\"pokemon-evolution-chain\"\r\n    >\r\n      <div class=\"flex padded-2\">\r\n        <div\r\n          class=\"pokemon-evolution-wrapper\"\r\n          *ngFor=\"let evolution of pokemonVariant.pokemon.evolution_chain\"\r\n        >\r\n          <a\r\n            class=\"pokemon-evolution round-small\"\r\n            [routerLink]=\"'/pokemon/' + evolution.slug\"\r\n          >\r\n            <img [src]=\"evolution.sprite\" />\r\n            <div class=\"evolution-name\">{{ evolution.name }}</div>\r\n            <fa-icon icon=\"arrow-right\"></fa-icon>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"pokemon-info\">\r\n    <div class=\"max\">\r\n      <div class=\"flex padded flex-center medium-flex-start medium-vertical\">\r\n        <div class=\"box flex flex-center padded\">\r\n          <div>\r\n            <h1>\r\n              {{ pokemonVariant.name }}\r\n              <span class=\"dex-number\">\r\n                #{{ pokemonVariant.pokemon.national_dex_number }}\r\n                -\r\n                <span class=\"pokemon-region\">\r\n                  {{ pokemonVariant.pokemon.generation.region }}\r\n                </span>\r\n              </span>\r\n            </h1>\r\n          </div>\r\n        </div>\r\n        <div class=\"flex padded flex-center\">\r\n          <div class=\"pokemon-types\">\r\n            <div class=\"flex padded\">\r\n              <div *ngFor=\"let type of pokemonVariant.types\">\r\n                <type-tag [type]=\"type\"></type-tag>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"pokemon-height\">\r\n            <tag [tag]=\"tagHeight\"></tag>\r\n          </div>\r\n          <div class=\"pokemon-weight\">\r\n            <tag [tag]=\"tagWeight\"></tag>\r\n          </div>\r\n          <div class=\"pokemon-dex\" *ngIf=\"buttonDex\">\r\n            <app-button [button]=\"buttonDex\"></app-button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div>\r\n    <div class=\"pokemon-cards\">\r\n      <items [items]=\"items\" (outputGetItems)=\"getCards()\"></items>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div>\r\n  <ng-template #dialogDex>\r\n    <p>\r\n      Lorem ipsum dolor sit amet consectetur, adipisicing elit. Neque blanditiis\r\n      asperiores aperiam quasi! Aperiam ipsum fugiat corporis accusantium\r\n      cupiditate, modi sequi deleniti optio? Assumenda culpa incidunt pariatur!\r\n      Nam, laboriosam tempora?\r\n    </p>\r\n  </ng-template>\r\n</div>\r\n"
        },
        {
            "name": "PokemonItemGridComponent",
            "id": "component-PokemonItemGridComponent-2d6e1598b99d979cc21cbcc4ad9b59f4d01f34f1cc75a017cbe71327760ff1cc46d23709e898f4ba4b550dabf0006bceab81b52cddbcbeded9d8c1851366b3ba",
            "file": "src/app/pages/pokemons/pokemon-item/pokemon-item-grid/pokemon-item-grid.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pokemon-item-grid",
            "styleUrls": [
                "./pokemon-item-grid.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "pokemon-item-grid.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "pokemonVariant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "PokemonVariant",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "progressBar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProgressBar",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "getSprite",
                    "args": [
                        {
                            "name": "pokemon_variant",
                            "type": "PokemonVariant",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pokemon_variant",
                            "type": "PokemonVariant",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { ProgressBar } from '@app/controls/progress-bar/progress-bar';\r\nimport { Pokemon, PokemonVariant } from '../../pokemon/pokemon';\r\n\r\n@Component({\r\n  selector: 'pokemon-item-grid',\r\n  templateUrl: 'pokemon-item-grid.component.html',\r\n  styleUrls: ['./pokemon-item-grid.component.scss'],\r\n})\r\nexport class PokemonItemGridComponent implements OnInit {\r\n  @Input() pokemonVariant: PokemonVariant;\r\n  @Input() size: string;\r\n\r\n  progressBar: ProgressBar;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    this.progressBar = new ProgressBar({\r\n      value: this.pokemonVariant.progress,\r\n      total: this.pokemonVariant.total_cards,\r\n    });\r\n  }\r\n\r\n  getSprite(pokemon_variant: PokemonVariant): string | undefined {\r\n    if (pokemon_variant.sprites.official)\r\n      return pokemon_variant.sprites.official;\r\n    else return pokemon_variant.sprites.default;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\", \"custom\";\r\n\r\n:host {\r\n\twidth: 100%;\r\n}\r\n\r\n.item-grid-pokemon {\r\n\tborder-radius: $border-radius-small;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\talign-items: center;\r\n\ttransition: $transition;\r\n\tposition: relative;\r\n\toverflow: hidden;\r\n\t&:after {\r\n\t\tcontent: \"\";\r\n\t\tborder-radius: $border-radius-small;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tbox-shadow: $shadow-sheen;\r\n\t\tz-index: 10;\r\n\t\tposition: absolute;\r\n\t\tborder: $border;\r\n\t}\r\n\t&.small {\r\n\t\tmin-width: 140px;\r\n\t\t.pokemon-image-wrapper {\r\n\t\t\t.pokemon-image {\r\n\t\t\t\tmargin-top: 0;\r\n\t\t\t\tmargin-bottom: 0;\r\n\t\t\t\theight: 80px;\r\n\t\t\t\twidth: 80px;\r\n\t\t\t\tpadding: $spacing;\r\n\t\t\t}\r\n\t\t\t.pokemon-image-placeholder {\r\n\t\t\t\tpadding: 0 !important;\r\n\t\t\t\theight: 32px !important;\r\n\t\t\t\twidth: 32px !important;\r\n\t\t\t\tmargin-top: $spacing * 3;\r\n\t\t\t\tmargin-bottom: $spacing * 3;\r\n\t\t\t}\r\n\t\t}\r\n\t\t.pokemon-types {\r\n\t\t\tdisplay: none !important;\r\n\t\t}\r\n\t}\r\n\t&:hover {\r\n\t\tborder-color: $primary-color;\r\n\t\tbox-shadow: $shadow-focus;\r\n\t\t&:after {\r\n\t\t\tborder-color: $primary-color;\r\n\t\t}\r\n\t}\r\n\t.pokemon-image-wrapper {\r\n\t\tdisplay: block;\r\n\t\tz-index: 2;\r\n\t\twidth: 100%;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tjustify-content: center;\r\n\t\toverflow: hidden;\r\n\t\tposition: relative;\r\n\t\t.pokemon-image,\r\n\t\t.pokemon-image-placeholder {\r\n\t\t\tfilter: drop-shadow($shadow);\r\n\t\t\tmargin: auto;\r\n\t\t\tz-index: 2;\r\n\t\t\tposition: relative;\r\n\t\t\tmargin-top: $spacing * 2;\r\n\t\t\tmargin-bottom: $spacing * 2;\r\n\t\t\theight: 96px;\r\n\t\t\twidth: 96px;\r\n\t\t}\r\n\t\t.pokemon-image-placeholder {\r\n\t\t\tcolor: white;\r\n\t\t\tpadding: $spacing * 2;\r\n\t\t\tfa-icon {\r\n\t\t\t\theight: 100%;\r\n\t\t\t}\r\n\t\t}\r\n\t\t@each $type, $color in $poke-types {\r\n\t\t\t&.#{$type} {\r\n\t\t\t\tbackground: linear-gradient(\r\n\t\t\t\t\tto right,\r\n\t\t\t\t\t$color,\r\n\t\t\t\t\tlighten($color, 10%)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t\t.pokemon-number {\r\n\t\t\tpadding: $spacing;\r\n\t\t\tcolor: white;\r\n\t\t\tfont-weight: bold;\r\n\t\t\tfont-size: 14px;\r\n\t\t\ttext-shadow: $text-shadow;\r\n\t\t\tposition: absolute;\r\n\t\t\ttop: 0;\r\n\t\t\tleft: 0;\r\n\t\t}\r\n\r\n\t\t.bg-type {\r\n\t\t\tposition: absolute;\r\n\t\t\tleft: 50%;\r\n\t\t\ttop: 50%;\r\n\t\t\ttransform: translate(-50%, -50%);\r\n\t\t\twidth: 180px;\r\n\t\t\topacity: 0.15;\r\n\t\t\tz-index: 1;\r\n\t\t}\r\n\t\t.pokemon-types {\r\n\t\t\tdisplay: flex;\r\n\t\t\tflex-wrap: nowrap;\r\n\t\t\tpadding: $spacing;\r\n\t\t\tz-index: 2;\r\n\t\t}\r\n\t}\r\n\t.pokemon-info {\r\n\t\tpadding: $spacing;\r\n\t\tbackground: $main-bg;\r\n\t\twidth: 100%;\r\n\t\tcolor: white;\r\n\t}\r\n}\r\n",
                    "styleUrl": "./pokemon-item-grid.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<a\r\n  *ngIf=\"pokemonVariant\"\r\n  class=\"item-grid-pokemon {{ size }}\"\r\n  [routerLink]=\"pokemonVariant.route ? pokemonVariant.route : []\"\r\n>\r\n  <figure class=\"pokemon-image-wrapper {{ pokemonVariant.types[0] }}\">\r\n    <div class=\"pokemon-number\">\r\n      #{{ pokemonVariant.pokemon.national_dex_number }}\r\n    </div>\r\n\r\n    <img\r\n      class=\"pokemon-image\"\r\n      *ngIf=\"getSprite(pokemonVariant)\"\r\n      src=\"{{ getSprite(pokemonVariant) }}\"\r\n    />\r\n\r\n    <div\r\n      class=\"pokemon-image-placeholder\"\r\n      *ngIf=\"getSprite(pokemonVariant)?.length == 0\"\r\n    >\r\n      <fa-icon icon=\"question\"></fa-icon>\r\n    </div>\r\n\r\n    <img\r\n      class=\"bg-type\"\r\n      src=\"https://duiker101.github.io/pokemon-type-svg-icons/icons/{{\r\n        pokemonVariant.types[0].toLowerCase()\r\n      }}.svg\"\r\n    />\r\n\r\n    <div class=\"pokemon-types\" *ngIf=\"pokemonVariant.types\">\r\n      <div class=\"flex padded-small\">\r\n        <div *ngFor=\"let type of pokemonVariant.types\">\r\n          <type-tag [type]=\"type\"></type-tag>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <progress-bar\r\n      class=\"z-3 relative padding padding-top-none\"\r\n      [progressBar]=\"progressBar\"\r\n    >\r\n    </progress-bar>\r\n  </figure>\r\n\r\n  <figcaption class=\"pokemon-info\">\r\n    <div class=\"pokemon-name\">\r\n      {{ pokemonVariant.name }}\r\n    </div>\r\n    <div class=\"pokemon-region subheading\">\r\n      {{ pokemonVariant.pokemon.generation.region }}\r\n    </div>\r\n  </figcaption>\r\n</a>\r\n"
        },
        {
            "name": "PokemonsComponent",
            "id": "component-PokemonsComponent-c1e6ce1af62dda5a0a188c0042f2941c64edbc365ab6a98aa14c6ee0ef4f8f58d2f17c4a057b1a7f6d548e7650c09af7cb9e78a71086e3ec71385d3d73aef969",
            "file": "src/app/pages/pokemons/pokemons.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pokemons",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "pokemons.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "items",
                    "defaultValue": "new Items()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Items",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "getPokemonVariants",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { AppSettings } from '@app/app';\r\nimport { ItemGroup, Items } from '@app/layout/main';\r\nimport { APIGetPaged, Symbols } from '@app/models';\r\nimport { PokemonVariant, SetSortByPokemon } from './pokemon/pokemon';\r\nimport { PokemonsService } from './pokemons.service';\r\n\r\n@Component({\r\n  selector: 'pokemons',\r\n  templateUrl: 'pokemons.component.html',\r\n})\r\nexport class PokemonsComponent implements OnInit {\r\n  items: Items = new Items();\r\n  type: string;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private titleService: Title,\r\n    private pokemonService: PokemonsService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.setupSubscriptions();\r\n    this.setupControls();\r\n  }\r\n\r\n  setupSubscriptions() {\r\n    // Get query params\r\n    this.route.params.subscribe((params) => {\r\n      this.type = params['type']?.replace('-', ' ');\r\n    });\r\n\r\n    // Get data\r\n    this.pokemonService.getPokemonVariantsObservable().subscribe((res) => {\r\n      if (res) {\r\n        this.items.footer.totalPages = res.total_pages;\r\n        this.items.footer.totalItems = res.total_results;\r\n        this.items.itemGroups = [\r\n          new ItemGroup({\r\n            items: res.pokemon_variants?.map(\r\n              (pokemonVariant: any) => new PokemonVariant(pokemonVariant)\r\n            ),\r\n          }),\r\n        ];\r\n      }\r\n    });\r\n  }\r\n\r\n  setupControls() {\r\n    SetSortByPokemon(this.items.filter.selectSortBy);\r\n    this.items.noResultsImage = Symbols.pokeball;\r\n    this.items.noResults = 'No Pokémon found';\r\n    this.titleService.setTitle(AppSettings.titlePrefix + 'Pokemon');\r\n    this.items.showHeader = false;\r\n    this.items.itemClasses = 'width-3 medium-4 small-6';\r\n    this.items.filter.textboxSearch.placeholder = 'Search Pokémon...';\r\n    this.items.footer.pageSize = 24;\r\n    this.items.footer.selectPageSize.value =\r\n      this.items.footer.pageSize.toString();\r\n  }\r\n\r\n  getPokemonVariants() {\r\n    this.pokemonService.getPokemonVariants(\r\n      new APIGetPaged({\r\n        page: this.items.footer.page,\r\n        page_size: this.items.footer.pageSize,\r\n        sort_by: this.items.filter.selectSortBy.value,\r\n        sort_direction: this.items.filter.selectSortDirection.value,\r\n        query: this.items.filter.textboxSearch.value,\r\n        type: this.type,\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pokemonService",
                        "type": "PokemonsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pokemonService",
                        "type": "PokemonsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<items [items]=\"items\" (outputGetItems)=\"getPokemonVariants()\"> </items>\r\n"
        },
        {
            "name": "PokmeonItemListComponent",
            "id": "component-PokmeonItemListComponent-6e39309b9ffb162ce27771d1eddd799cd0f3af21d6084070751002f1246e49772bbedf2a68049a7363e5b097e854956233fdc585c61790ec872079973bea193a",
            "file": "src/app/pages/pokemons/pokemon-item/pokemon-item-list/pokemon-item-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "pokemon-item-list",
            "styleUrls": [
                "./pokemon-item-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "pokemon-item-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "pokemonVariant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "PokemonVariant",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getSprite",
                    "args": [
                        {
                            "name": "pokemon_variant",
                            "type": "PokemonVariant",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pokemon_variant",
                            "type": "PokemonVariant",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { Pokemon, PokemonVariant } from '../../pokemon/pokemon';\r\n\r\n@Component({\r\n  selector: 'pokemon-item-list',\r\n  templateUrl: 'pokemon-item-list.component.html',\r\n  styleUrls: ['./pokemon-item-list.component.scss'],\r\n})\r\nexport class PokmeonItemListComponent implements OnInit {\r\n  @Input() pokemonVariant: PokemonVariant;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n\r\n  getSprite(pokemon_variant: PokemonVariant): string | undefined {\r\n    if (pokemon_variant.sprites.default) return pokemon_variant.sprites.default;\r\n    else return pokemon_variant.sprites.official;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".pokemon-image {\r\n\twidth: 64px;\r\n\theight: 64px;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n}",
                    "styleUrl": "./pokemon-item-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<a\r\n  class=\"item-list-pokemon flex\"\r\n  [routerLink]=\"pokemonVariant.route ? pokemonVariant.route : []\"\r\n>\r\n  <div class=\"flex padded flex-center box\">\r\n    <div>\r\n      <figure class=\"pokemon-image\">\r\n        <img\r\n          *ngIf=\"getSprite(pokemonVariant)\"\r\n          src=\"{{ getSprite(pokemonVariant) }}\"\r\n        />\r\n      </figure>\r\n    </div>\r\n    <div class=\"box\">\r\n      <figcaption class=\"pokemon-info\">\r\n        <div class=\"flex padded flex-center\">\r\n          <span class=\"width-6 pokemon-name\">\r\n            {{ pokemonVariant.name }}\r\n          </span>\r\n          <span class=\"width-3 expansion-release-date subheading\">\r\n            #{{ pokemonVariant.pokemon.national_dex_number }}\r\n          </span>\r\n          <span class=\"width-3 expansion-total-cards subheading\">\r\n            <div class=\"pokemon-types flex\" *ngIf=\"pokemonVariant.types\">\r\n              <div class=\"flex padded\">\r\n                <div *ngFor=\"let type of pokemonVariant.types\">\r\n                  <type-tag [type]=\"type\"></type-tag>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </span>\r\n        </div>\r\n      </figcaption>\r\n    </div>\r\n  </div>\r\n</a>\r\n"
        },
        {
            "name": "ProfileComponent",
            "id": "component-ProfileComponent-1269725b69f20b65e45e3327eb46296d59f20efa3c34f9f192b1b2d6eaf25ce7a8253fade7bf11ef2d68b95f200eb01808f451c1f2e734b00616ebbcb960f998",
            "file": "src/app/layout/header/profile-menu/profile-name.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[profile-name]",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./profile-name.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Menu",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Menu, MenuItem } from '@app/controls/menu';\r\nimport { AuthenticationService } from '@app/pages/auth/auth.service';\r\nimport { Icons } from '@app/models/icons';\r\n\r\n@Component({\r\n  selector: '[profile-name]',\r\n  templateUrl: './profile-name.component.html',\r\n})\r\nexport class ProfileComponent implements OnInit {\r\n  menu: Menu;\r\n\r\n  constructor(private authenticationService: AuthenticationService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.menu = new Menu({\r\n      classes: 'round',\r\n      clearActiveClickOutside: true,\r\n      horizontal: true,\r\n      items: [\r\n        new MenuItem({\r\n          text: this.authenticationService.currentUserValue?.name,\r\n          icon: Icons.user,\r\n          menu: new Menu({\r\n            classes: 'anchor-right',\r\n            items: [\r\n              new MenuItem({\r\n                text: 'Dashboard',\r\n                icon: Icons.dashboard,\r\n                route: '/collection/dashboard/',\r\n                click: () => {\r\n                  this.menu.clearActive();\r\n                },\r\n              }),\r\n              new MenuItem({\r\n                text: 'Profile',\r\n                icon: Icons.user,\r\n                route: '/profile/edit',\r\n                click: () => {\r\n                  this.menu.clearActive();\r\n                },\r\n              }),\r\n              new MenuItem({\r\n                text: 'Sign Out',\r\n                icon: Icons.signOut,\r\n                click: () => {\r\n                  this.authenticationService.logout();\r\n                },\r\n              }),\r\n            ],\r\n          }),\r\n        }),\r\n      ],\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-menu [menu]=\"menu\"></app-menu>\r\n"
        },
        {
            "name": "ProgressBarComponent",
            "id": "component-ProgressBarComponent-39953b3c9792e2b281dda05556c7ee566bf0d23edbf07d8f6686a7cecbcf15ffe168b6c93da707d707c8b46b532fc12bc42c94a84cdd1f83f3b9555641dfaad7",
            "file": "src/app/controls/progress-bar/progress-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "progress-bar",
            "styleUrls": [
                "./progress-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "progress-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "progressBar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "ProgressBar",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "getWidth",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "isComplete",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { ProgressBar } from './progress-bar';\r\n\r\n@Component({\r\n\tselector: 'progress-bar',\r\n\ttemplateUrl: 'progress-bar.component.html',\r\n\tstyleUrls: ['./progress-bar.component.scss']\r\n})\r\n\r\nexport class ProgressBarComponent implements OnInit {\r\n\r\n\t@Input() progressBar: ProgressBar;\r\n\t\r\n\tgetWidth = () => {\r\n\t\treturn `${Math.round(this.progressBar.value/this.progressBar.total * 100)}%`;\r\n\t}\r\n\r\n\tisComplete = () => {\r\n\t\treturn this.progressBar.value >= this.progressBar.total;\r\n\t}\r\n\r\n\tconstructor() { }\r\n\r\n\tngOnInit() { }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n.progress {\r\n\twidth: 100%;\r\n\tbackground: $input-bg;\r\n\tborder: $border;\r\n\tborder-radius: $border-radius;\r\n\theight: 16px;\r\n\tposition: relative;\r\n\tfont-size: 12px;\r\n\t.progress-bar {\r\n\t\tbackground: $primary-color;\r\n\t\tborder-radius: $border-radius - 1px;\r\n\t\theight: 14px;\r\n\t}\r\n\t.progress-value {\r\n\t\tposition: absolute;\r\n\t\ttop: 50%;\r\n\t\tleft: 50%;\r\n\t\ttransform: translate(-50%, -50%);\r\n\t\tfont-weight: bold;\r\n\t\tcolor: $font-color;\r\n\t\tmargin-top: -1px;\r\n\t\twhite-space: nowrap;\r\n\t\ttext-align: center;\r\n\t}\r\n\t&.complete {\r\n\t\t.progress-bar {\r\n\t\t\tbackground: $green;\r\n\t\t}\r\n\t}\r\n}\r\n",
                    "styleUrl": "./progress-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"progress\" *ngIf=\"progressBar\" [class.complete]=\"isComplete()\">\r\n\t<div class=\"progress-bar\" [style.width]=\"getWidth()\"></div>\r\n\t<div class=\"progress-value\">\r\n\t\t{{getWidth()}}\r\n\t\t({{progressBar.value}}/{{progressBar.total}})\r\n\t</div>\r\n</div>"
        },
        {
            "name": "ResetComponent",
            "id": "component-ResetComponent-53f4c47edefe5876422a7571d0c64a3318103485d30fdc80fe2dedec0ba617d1b0c9c1f84dc5ff7400428b72fd28d2df2ef4a038d2750e9207a2d2fe580ff094",
            "file": "src/app/pages/auth/reset/reset.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "reset",
            "styleUrls": [
                "./reset.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./reset.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonSubmit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "textboxConfirmPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "textboxEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "textboxPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NotificationsService, Notification, AlertType } from '@app/controls';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { AuthenticationService } from '@app/pages/auth/auth.service';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Textbox, Button, ButtonType } from '@app/controls';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'reset',\r\n  templateUrl: './reset.component.html',\r\n  styleUrls: ['./reset.component.scss'],\r\n})\r\nexport class ResetComponent implements OnInit {\r\n  form: FormGroup;\r\n  textboxEmail: Textbox;\r\n  textboxPassword: Textbox;\r\n  textboxConfirmPassword: Textbox;\r\n  buttonSubmit: Button;\r\n  token: string;\r\n\r\n  constructor(\r\n    private authenticationService: AuthenticationService,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private notificationService: NotificationsService\r\n  ) {\r\n    if (this.authenticationService.currentUserValue) {\r\n      this.router.navigateByUrl('/');\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Get query params\r\n    this.route.params.subscribe((params) => {\r\n      this.token = params['token'];\r\n    });\r\n\r\n    // Build form\r\n    this.form = this.formBuilder.group({\r\n      emailControl: ['', Validators.required],\r\n      passwordControl: ['', Validators.required],\r\n      confirmPasswordControl: ['', Validators.required],\r\n    });\r\n\r\n    // Build form controls\r\n    this.textboxEmail = new Textbox({\r\n      label: 'Email',\r\n    });\r\n    this.textboxPassword = new Textbox({\r\n      label: 'Password',\r\n      type: 'password',\r\n    });\r\n    this.textboxConfirmPassword = new Textbox({\r\n      label: 'Confirm Password',\r\n      type: 'password',\r\n    });\r\n    this.buttonSubmit = new Button({\r\n      text: 'Reset Password',\r\n      type: ButtonType.submit,\r\n    });\r\n  }\r\n\r\n  submit() {\r\n    if (this.form.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.authenticationService\r\n      .reset(\r\n        this.token,\r\n        this.textboxEmail.value,\r\n        this.textboxPassword.value,\r\n        this.textboxConfirmPassword.value\r\n      )\r\n      .subscribe(() => {\r\n        this.notificationService.addNotifications([\r\n          new Notification({\r\n            alertType: AlertType.success,\r\n            message: 'Password Reset',\r\n          }),\r\n        ]);\r\n      });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./reset.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form\r\n  class=\"padding-y-8 flex vertical flex-center\"\r\n  [formGroup]=\"form\"\r\n  (ngSubmit)=\"submit()\"\r\n>\r\n  <div class=\"flex vertical padded-2\" style=\"max-width: 400px\">\r\n    <div>\r\n      <h1>Reset Password</h1>\r\n    </div>\r\n    <div>\r\n      <textbox\r\n        [textbox]=\"textboxEmail\"\r\n        formControlName=\"emailControl\"\r\n      ></textbox>\r\n    </div>\r\n    <div>\r\n      <textbox\r\n        [textbox]=\"textboxPassword\"\r\n        formControlName=\"passwordControl\"\r\n      ></textbox>\r\n    </div>\r\n    <div>\r\n      <textbox\r\n        [textbox]=\"textboxConfirmPassword\"\r\n        formControlName=\"confirmPasswordControl\"\r\n      ></textbox>\r\n    </div>\r\n    <div>\r\n      <app-button [button]=\"buttonSubmit\"></app-button>\r\n    </div>\r\n  </div>\r\n</form>\r\n"
        },
        {
            "name": "ScannerComponent",
            "id": "component-ScannerComponent-ea396fbdcc078049332d38f77be7a5801dcc7e8210763ac47c7f2171dc17d69c3505d958c57ce28d1238a02835752259cc50b34875007d7834d0d836a356da61",
            "file": "src/app/pages/scanner/scanner.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "scanner",
            "styleUrls": [
                "./scanner.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./scanner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alert",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Alert",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "allowCameraSwitch",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "checkboxBatchMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Checkbox",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "deviceId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WebcamInitError[]",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "lastImageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "lastMatchedCard",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "matches",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card[]",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "menuItemModeMultiple",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "menuItemModeScanner",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "menuItemModeSnapshot",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "menuScannerModes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Menu",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "menuScannerOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Menu",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "multipleWebcamsAvailable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "nextWebcam",
                    "defaultValue": "new Subject<\r\n    boolean | string\r\n  >()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean | string>",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "prompt",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "scanIcon",
                    "defaultValue": "this.scanning ? 'pause' : 'play'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IconProp",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "scanned",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "scannerMode",
                    "defaultValue": "ScanType.snapshot",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScanType",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "scannerMultipleServiceSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "scannerResultMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Menu",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "scannerResultMenuItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "scannerServiceSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "scanning",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "searching",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "showOptions",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "showResult",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "showWebcam",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "soundEffect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLAudioElement",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "subscribedMulti",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "subscribedSingle",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "testError",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "timer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "totalNullResults",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "trigger",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "videoOptions",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MediaTrackConstraints",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "visibleMatches",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card[]",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "webcamImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WebcamImage",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addMatch",
                    "args": [
                        {
                            "name": "card",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 333,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "card",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addMatches",
                    "args": [
                        {
                            "name": "cards",
                            "type": "Card[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 324,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cards",
                            "type": "Card[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "cameraWasSwitched",
                    "args": [
                        {
                            "name": "deviceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 409,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "deviceId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleImage",
                    "args": [
                        {
                            "name": "webcamImage",
                            "type": "WebcamImage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 377,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "webcamImage",
                            "type": "WebcamImage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleInitError",
                    "args": [
                        {
                            "name": "error",
                            "type": "WebcamInitError",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 366,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "WebcamInitError",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadSoundEffect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 348,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "playSoundEffect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 354,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "runScan",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 447,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "scannerStart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 423,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "scannerStop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 431,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "scannerToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 437,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setModeMultiple",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setModeScanner",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setModeSnapshot",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupMultipleScannerService",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 302,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupScannerService",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 262,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupService",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 248,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showNextWebcam",
                    "args": [
                        {
                            "name": "directionOrDeviceId",
                            "type": "boolean | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 370,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "directionOrDeviceId",
                            "type": "boolean | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleWebcam",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 362,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "triggerSnapshot",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 358,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewEncapsulation, Version } from '@angular/core';\r\nimport { WebcamImage, WebcamInitError, WebcamUtil } from 'ngx-webcam';\r\nimport { Subject, Observable, Subscription } from 'rxjs';\r\nimport { ScannerService, ScanType } from '@app/pages/scanner/scanner.service';\r\nimport { Router } from '@angular/router';\r\nimport { Card } from '@app/pages/cards/card';\r\nimport { Checkbox } from '@app/controls/checkbox';\r\nimport { Menu, MenuItem } from '@app/controls/menu';\r\nimport {\r\n  NotificationsService,\r\n  Notification,\r\n} from '@app/controls/notifications';\r\nimport { CardsService } from '../cards';\r\nimport { Icons } from '@app/models/icons';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { AlertType, Alert } from '@app/controls/alert/alert';\r\nimport { LoaderService } from '@app/controls';\r\nimport { AppSettings } from '@app/app';\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\r\n\r\n@Component({\r\n  selector: 'scanner',\r\n  templateUrl: './scanner.component.html',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styleUrls: ['./scanner.component.scss'],\r\n})\r\nexport class ScannerComponent implements OnInit {\r\n  constructor(\r\n    private titleService: Title,\r\n    private scannerService: ScannerService,\r\n    private cardsService: CardsService,\r\n    private router: Router,\r\n    private loaderService: LoaderService,\r\n    private notificationService: NotificationsService\r\n  ) {}\r\n\r\n  // Webcam options\r\n  public lastImageSize: string;\r\n  public showWebcam = true;\r\n  public allowCameraSwitch = true;\r\n  public deviceId: string;\r\n  public multipleWebcamsAvailable = false;\r\n  public videoOptions: MediaTrackConstraints = {};\r\n  public errors: WebcamInitError[] = [];\r\n  public webcamImage: WebcamImage;\r\n  private trigger: Subject<void> = new Subject<void>();\r\n  // switch to next / previous / specific webcam; true/false: forward/backwards, string: deviceId\r\n  private nextWebcam: Subject<boolean | string> = new Subject<\r\n    boolean | string\r\n  >();\r\n\r\n  // Service subscriptions\r\n  scannerServiceSubscription: Subscription;\r\n  scannerMultipleServiceSubscription: Subscription;\r\n\r\n  // Options\r\n  subscribedSingle: boolean = false; // use dto prevent no cards found when subscription initalizes\r\n  subscribedMulti: boolean = false;\r\n  searching: boolean = false;\r\n  scanning: boolean = false;\r\n  scanIcon: IconProp = this.scanning ? 'pause' : 'play';\r\n  showOptions: boolean = false;\r\n  timer: any;\r\n  matches: Card[] = [];\r\n  visibleMatches: Card[] = [];\r\n  testError: string = '';\r\n  prompt: boolean = false;\r\n  lastMatchedCard: Card;\r\n  totalNullResults: number = 0;\r\n  soundEffect: HTMLAudioElement;\r\n  scannerMode: ScanType = ScanType.snapshot; // Default mode\r\n  scanned: boolean = false; // Prevent sound effect when adding matches from cache\r\n\r\n  alert: Alert;\r\n\r\n  checkboxBatchMode: Checkbox;\r\n  menuScannerModes: Menu;\r\n  menuItemModeSnapshot: MenuItem;\r\n  menuItemModeScanner: MenuItem;\r\n  menuItemModeMultiple: MenuItem;\r\n  menuScannerOptions: Menu;\r\n  showResult: boolean;\r\n  scannerResultMenu: Menu;\r\n  scannerResultMenuItem: MenuItem;\r\n  get showActionScan(): boolean {\r\n    return this.scannerMode == ScanType.scan;\r\n  }\r\n  get showActionSnapshot(): boolean {\r\n    return this.scannerMode == ScanType.snapshot;\r\n  }\r\n  get showActionMultiple(): boolean {\r\n    return this.scannerMode == ScanType.multiple;\r\n  }\r\n\r\n  setMode() {\r\n    switch (this.scannerMode) {\r\n      case ScanType.snapshot: {\r\n        this.setModeSnapshot();\r\n        break;\r\n      }\r\n      case ScanType.scan: {\r\n        this.setModeScanner();\r\n        break;\r\n      }\r\n      case ScanType.multiple: {\r\n        this.setModeMultiple();\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  setModeSnapshot() {\r\n    this.menuScannerModes.clearActive();\r\n    this.scannerMode = ScanType.snapshot;\r\n    this.menuItemModeSnapshot.active = true;\r\n    this.setupService();\r\n  }\r\n\r\n  setModeScanner() {\r\n    this.menuScannerModes.clearActive();\r\n    this.scannerMode = ScanType.scan;\r\n    this.menuItemModeScanner.active = true;\r\n    this.setupService();\r\n  }\r\n\r\n  setModeMultiple() {\r\n    this.menuScannerModes.clearActive();\r\n    this.scannerMode = ScanType.multiple;\r\n    this.menuItemModeMultiple.active = true;\r\n    this.setupService();\r\n  }\r\n\r\n  ngOnDestroy() {}\r\n  ngOnInit() {\r\n    WebcamUtil.getAvailableVideoInputs().then(\r\n      (mediaDevices: MediaDeviceInfo[]) => {\r\n        this.multipleWebcamsAvailable = mediaDevices && mediaDevices.length > 1;\r\n        if (this.multipleWebcamsAvailable) {\r\n          // Try to go to rear camera\r\n          this.showNextWebcam(mediaDevices[1].deviceId);\r\n        }\r\n      }\r\n    );\r\n\r\n    this.loadSoundEffect();\r\n\r\n    this.titleService.setTitle(AppSettings.titlePrefix + 'Scanner');\r\n\r\n    this.checkboxBatchMode = new Checkbox({\r\n      checked: false,\r\n      text: 'Batch Mode',\r\n    });\r\n\r\n    // Alert\r\n    this.alert = new Alert({\r\n      message: `\r\n\t\t\t\t<ul class=\"unordered-list\">\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\t<b>Single mode:</b> this algorithm looks for a single card name.\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\t<b>Multiple mode:</b> this algorithm looks for multiple card names.\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\tFor best results with either mode, make sure the card name is completely visible and in focus.\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\tOur algorithms primarily uses card name text detection, unfortunaly identifying specific sets is not supported.\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t\t`,\r\n    });\r\n\r\n    // Options\r\n    const scannerOptionMenuItems: MenuItem[] = [];\r\n    const switchCameraMenuItem = new MenuItem({\r\n      text: 'Switch Cameras',\r\n      icon: Icons.sync,\r\n      click: () => {\r\n        this.showNextWebcam(true);\r\n      },\r\n    });\r\n\r\n    // Only add switch camer option if multi cameras\r\n    if (this.multipleWebcamsAvailable) {\r\n      scannerOptionMenuItems.push(switchCameraMenuItem);\r\n    }\r\n\r\n    // Only show menu if have options available\r\n    if (scannerOptionMenuItems.length) {\r\n      this.menuScannerOptions = new Menu({\r\n        classes: 'round bg',\r\n        horizontal: true,\r\n        items: [\r\n          new MenuItem({\r\n            icon: Icons.settings,\r\n            menu: new Menu({\r\n              classes: 'round bg',\r\n              items: scannerOptionMenuItems,\r\n            }),\r\n          }),\r\n        ],\r\n      });\r\n    }\r\n\r\n    // Modes menu\r\n    this.menuItemModeSnapshot = new MenuItem({\r\n      icon: Icons.camera,\r\n      classes: 'box',\r\n      text: 'Single',\r\n      click: () => {\r\n        this.setModeSnapshot();\r\n      },\r\n    });\r\n    this.menuItemModeScanner = new MenuItem({\r\n      icon: Icons.play,\r\n      classes: 'box',\r\n      text: 'Scanner',\r\n      click: () => {\r\n        this.setModeScanner();\r\n      },\r\n    });\r\n    this.menuItemModeMultiple = new MenuItem({\r\n      icon: Icons.bringFront,\r\n      classes: 'box',\r\n      text: 'Multiple',\r\n      click: () => {\r\n        this.setModeMultiple();\r\n      },\r\n    });\r\n    this.menuScannerModes = new Menu({\r\n      clearActiveClickOutside: false,\r\n      horizontal: true,\r\n      classes: 'bg square',\r\n      items: [\r\n        this.menuItemModeSnapshot,\r\n        //this.menuItemModeScanner,\r\n        this.menuItemModeMultiple,\r\n      ],\r\n    });\r\n\r\n    if (this.scannerService.scannerList.cards.length) {\r\n      this.addMatches(this.scannerService.scannerList.cards);\r\n    }\r\n    this.setMode();\r\n  }\r\n\r\n  setupService() {\r\n    switch (this.scannerMode) {\r\n      case ScanType.snapshot:\r\n      case ScanType.scan: {\r\n        this.setupScannerService();\r\n        break;\r\n      }\r\n      case ScanType.multiple: {\r\n        this.setupMultipleScannerService();\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  setupScannerService() {\r\n    if (!this.scannerServiceSubscription) {\r\n      this.scannerServiceSubscription = this.scannerService\r\n        .getScanCardObservable()\r\n        .subscribe((card: Card | null) => {\r\n          this.loaderService.clearItemLoading('scanning');\r\n          this.searching = false;\r\n          if (card) {\r\n            if (this.scanning) {\r\n              this.totalNullResults = 0;\r\n            }\r\n            if (\r\n              this.scannerMode == ScanType.snapshot ||\r\n              !this.lastMatchedCard ||\r\n              this.lastMatchedCard.id != card.id\r\n            ) {\r\n              this.addMatches([card]);\r\n            }\r\n          } else {\r\n            if (this.scanning) {\r\n              // Stop scanner if 10 null results\r\n              // Prevents spamming server if user is not doing anything\r\n              this.totalNullResults++;\r\n              if (this.totalNullResults > 10) {\r\n                this.scannerStop();\r\n              }\r\n            } else if (this.subscribedSingle) {\r\n              this.notificationService.addNotifications([\r\n                new Notification({\r\n                  alertType: AlertType.warning,\r\n                  message: 'No card(s) found',\r\n                }),\r\n              ]);\r\n            }\r\n          }\r\n          this.subscribedSingle = true;\r\n        });\r\n    }\r\n  }\r\n\r\n  setupMultipleScannerService() {\r\n    if (!this.scannerMultipleServiceSubscription) {\r\n      this.scannerMultipleServiceSubscription = this.scannerService\r\n        .getScanCardsObservable()\r\n        .subscribe((cards: Card[]) => {\r\n          this.loaderService.clearItemLoading('scanning');\r\n          this.searching = false;\r\n          if (cards && cards.length > 0) {\r\n            this.addMatches(cards);\r\n          } else if (this.subscribedMulti) {\r\n            this.notificationService.addNotifications([\r\n              new Notification({\r\n                alertType: AlertType.warning,\r\n                message: 'No card(s) found',\r\n              }),\r\n            ]);\r\n          }\r\n          this.subscribedMulti = true;\r\n        });\r\n    }\r\n  }\r\n\r\n  addMatches(cards: Card[]) {\r\n    if (this.scanned) {\r\n      this.playSoundEffect();\r\n    }\r\n    cards.forEach((card) => {\r\n      this.addMatch(card);\r\n    });\r\n  }\r\n\r\n  addMatch(card: Card) {\r\n    card.tempId = this.scannerService.getTempId();\r\n\r\n    // Limit tray to 10\r\n    if (this.visibleMatches.length >= 6) {\r\n      this.visibleMatches.shift();\r\n    }\r\n    this.visibleMatches.push(card);\r\n    this.matches.push(card);\r\n    this.lastMatchedCard = card;\r\n\r\n    // Update service cache\r\n    this.scannerService.scannerList.cards = this.matches;\r\n  }\r\n\r\n  loadSoundEffect() {\r\n    this.soundEffect = new Audio();\r\n    this.soundEffect.src = '../../assets/audio/soundeffect.mp3';\r\n    this.soundEffect.load();\r\n  }\r\n\r\n  playSoundEffect() {\r\n    this.soundEffect.play();\r\n  }\r\n\r\n  triggerSnapshot(): void {\r\n    this.trigger.next();\r\n  }\r\n\r\n  toggleWebcam(): void {\r\n    this.showWebcam = !this.showWebcam;\r\n  }\r\n\r\n  handleInitError(error: WebcamInitError): void {\r\n    this.errors.push(error);\r\n  }\r\n\r\n  showNextWebcam(directionOrDeviceId: boolean | string): void {\r\n    // true => move forward through devices\r\n    // false => move backwards through devices\r\n    // string => move to device with given deviceId\r\n    this.nextWebcam.next(directionOrDeviceId);\r\n  }\r\n\r\n  handleImage(webcamImage: WebcamImage): void {\r\n    this.scanned = true;\r\n    console.info('received webcam image', webcamImage);\r\n    this.webcamImage = webcamImage;\r\n    const bytes = webcamImage.imageAsBase64.length * (3 / 4) - 2;\r\n    const kilobytes = bytes / 1000;\r\n    this.lastImageSize = `${kilobytes}kb`;\r\n\r\n    // Send request to server\r\n    switch (this.scannerMode) {\r\n      case ScanType.scan: {\r\n        this.scannerService.getScanCard({\r\n          image: webcamImage.imageAsBase64,\r\n        });\r\n        break;\r\n      }\r\n      case ScanType.snapshot: {\r\n        this.scannerService.getScanCard({\r\n          image: webcamImage.imageAsBase64,\r\n        });\r\n        break;\r\n      }\r\n      case ScanType.multiple: {\r\n        this.searching = true;\r\n        this.scannerService.getScanCards({\r\n          image: webcamImage.imageAsBase64,\r\n        });\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  cameraWasSwitched(deviceId: string): void {\r\n    console.log('active device: ' + deviceId);\r\n    this.deviceId = deviceId;\r\n  }\r\n\r\n  get triggerObservable(): Observable<void> {\r\n    return this.trigger.asObservable();\r\n  }\r\n\r\n  get nextWebcamObservable(): Observable<boolean | string> {\r\n    return this.nextWebcam.asObservable();\r\n  }\r\n\r\n  // Start\r\n  scannerStart() {\r\n    this.timer = setInterval(() => {\r\n      this.runScan();\r\n    }, 250);\r\n    this.scanning = true;\r\n  }\r\n\r\n  // Stop\r\n  scannerStop() {\r\n    clearInterval(this.timer);\r\n    this.scanning = false;\r\n  }\r\n\r\n  // Start/stop scanner\r\n  scannerToggle() {\r\n    if (this.scanning) {\r\n      this.scannerStop();\r\n    } else {\r\n      this.scannerStart();\r\n    }\r\n    this.runScan();\r\n  }\r\n\r\n  // Trigger a scan\r\n  runScan() {\r\n    if (!this.searching) {\r\n      if (this.scannerMode != ScanType.scan) {\r\n        this.loaderService.addItemLoading('scanning');\r\n      }\r\n      if (this.trigger) {\r\n        this.trigger.next();\r\n      } else {\r\n        this.scannerStop();\r\n        alert('NO TRIGGER');\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\", \"scaffold/typography\";\r\n\r\n.scanner-wrapper {\r\n  margin: 0 auto;\r\n  width: 400px;\r\n  .scanner {\r\n    border-radius: $border-radius;\r\n    position: relative;\r\n    padding-bottom: percentage(3.5/2.5);\r\n    overflow: hidden;\r\n    box-shadow: $shadow;\r\n  }\r\n  .scanner-modes {\r\n    position: absolute;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    z-index: 3;\r\n  }\r\n  .scanner-camera-wrapper {\r\n    z-index: 1;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    webcam {\r\n      height: 100%;\r\n      width: 100%;\r\n      position: absolute;\r\n      background: black;\r\n      .webcam-wrapper {\r\n        background: black;\r\n        position: absolute;\r\n        width: 100%;\r\n        top: 40px;\r\n        left: 0;\r\n        right: 0;\r\n        bottom: 40px;\r\n        height: calc(\r\n          100% - 80px\r\n        ); // Subtract header/footer menus to prevent video overlap\r\n        video {\r\n          display: block;\r\n          width: auto;\r\n          top: 50%;\r\n          left: 50%;\r\n          transform: translate(-50%, -50%);\r\n          position: absolute;\r\n          max-width: 100%;\r\n          max-height: 100%;\r\n        }\r\n      }\r\n    }\r\n    .scanner-camera-overlay {\r\n      position: absolute;\r\n      top: 50%;\r\n      left: 50%;\r\n      transform: translate(-50%, -50%);\r\n      transition: $transition;\r\n      height: 80%;\r\n      width: 80%;\r\n      border: 1px solid $red;\r\n      box-shadow: 0 0 4px 4px rgba($red, 0.4), inset 0 0 4px 4px rgba($red, 0.4);\r\n      border-radius: 4%;\r\n      &.scanning {\r\n        border-color: $green;\r\n        box-shadow: 0 0 4px 4px rgba($green, 0.4),\r\n          inset 0 0 4px 4px rgba($green, 0.4);\r\n      }\r\n    }\r\n  }\r\n  .scanner-status {\r\n    position: absolute;\r\n    z-index: 50;\r\n    top: 3.5 * 10px;\r\n    right: 2.5 * 10px;\r\n    width: 24px;\r\n    height: 24px;\r\n    background: $red;\r\n    border-radius: 50%;\r\n    box-shadow: 0 0 4px 4px rgba($red, 0.4);\r\n    transition: $transition;\r\n    &.scanning {\r\n      background: $green;\r\n      box-shadow: 0 0 4px 4px rgba($green, 0.4);\r\n    }\r\n    .scanner-fps {\r\n      position: absolute;\r\n      top: 50%;\r\n      transform: translateY(-50%);\r\n      right: 100%;\r\n      margin-right: $spacing;\r\n      background: rgba(white, 0.5);\r\n      white-space: nowrap;\r\n      border-radius: $border-radius;\r\n      padding: 2px 8px;\r\n      @extend .subheading;\r\n    }\r\n  }\r\n  .scanner-options {\r\n    position: absolute;\r\n    left: 0;\r\n    z-index: 5;\r\n    > app-menu {\r\n      > .panel {\r\n        border-top-left-radius: 0;\r\n        border-bottom-left-radius: 0;\r\n        border-top-right-radius: 0;\r\n        > ul > li {\r\n          > a {\r\n            border-bottom-right-radius: $border-radius;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .scanner-action {\r\n    position: absolute;\r\n    overflow: hidden;\r\n    z-index: 1;\r\n    bottom: 40px;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n    width: 72px;\r\n    height: 72px;\r\n    border-top-left-radius: 50%;\r\n    border-top-right-radius: 50%;\r\n    transition: $transition;\r\n    color: white;\r\n    cursor: pointer;\r\n    user-select: none;\r\n    background: $green;\r\n    box-shadow: 0 0 4px 4px rgba($green, 0.4);\r\n    &:hover {\r\n      box-shadow: 0 0 4px 8px rgba($green, 0.4);\r\n    }\r\n    fa-icon {\r\n      position: absolute;\r\n      top: 14px;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n      width: 24px;\r\n      height: 24px;\r\n    }\r\n    &.scanning {\r\n      background: $red;\r\n      box-shadow: 0 0 4px 4px rgba($red, 0.4);\r\n      &:hover {\r\n        box-shadow: 0 0 4px 8px rgba($red, 0.4);\r\n      }\r\n    }\r\n    span {\r\n      position: absolute;\r\n      bottom: 12px;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n      @extend .subheading;\r\n    }\r\n  }\r\n  .scanner-result {\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    z-index: 5;\r\n    app-menu {\r\n      .panel {\r\n        border-top-left-radius: 0;\r\n        border-top-right-radius: 0;\r\n        border-bottom-right-radius: 0;\r\n        > ul > li > a {\r\n          border-bottom-left-radius: $border-radius;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .scanner-results-wrapper {\r\n    position: absolute;\r\n    bottom: 40px;\r\n    left: 0;\r\n    transition: $transition;\r\n    z-index: 2;\r\n    background: rgba(black, 0.5);\r\n    border-radius: 4%;\r\n    border-bottom-left-radius: 0;\r\n    cursor: pointer;\r\n    &.prompt {\r\n      top: 0;\r\n      left: 0;\r\n      right: 0;\r\n      bottom: 0;\r\n    }\r\n    .scanner-results {\r\n      width: 100px;\r\n      overflow: hidden;\r\n      padding-bottom: percentage(3.5/2.5);\r\n      border-radius: 4%;\r\n      .scanner-result {\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        padding-bottom: percentage(3.5/2.5);\r\n        width: 100px;\r\n        box-shadow: $shadow;\r\n        border-radius: 4%;\r\n        transition: $transition;\r\n        transform-origin: bottom center;\r\n        box-shadow: $shadow;\r\n        .scanner-result-image {\r\n          display: block;\r\n          border-radius: 4%;\r\n        }\r\n        @for $i from 1 through 20 {\r\n          &:nth-child(#{$i}) {\r\n            margin-top: 14px * ($i - 1);\r\n            //margin-left: 4px * ($i - 1);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    .scanner-results-count {\r\n      z-index: 10;\r\n      background: $green;\r\n      color: white;\r\n      border-radius: 999px;\r\n      position: absolute;\r\n      top: -8px;\r\n      right: -8px;\r\n      box-shadow: $shadow;\r\n      width: 32px;\r\n      height: 32px;\r\n      span {\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%, -50%);\r\n      }\r\n    }\r\n  }\r\n  .scanner-errors {\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    background: white;\r\n    border-radius: $border-radius;\r\n    box-shadow: $shadow;\r\n    z-index: 4;\r\n    padding: 32px;\r\n    width: 90%;\r\n    overflow: auto;\r\n    max-width: 90%;\r\n    max-height: 90%;\r\n  }\r\n  .scanner-errors-overlay {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background: rgba(black, 0.8);\r\n    z-index: 3;\r\n  }\r\n}\r\n",
                    "styleUrl": "./scanner.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scannerService",
                        "type": "ScannerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "titleService",
                        "type": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scannerService",
                        "type": "ScannerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loaderService",
                        "type": "LoaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "showActionScan": {
                    "name": "showActionScan",
                    "getSignature": {
                        "name": "showActionScan",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 85
                    }
                },
                "showActionSnapshot": {
                    "name": "showActionSnapshot",
                    "getSignature": {
                        "name": "showActionSnapshot",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 88
                    }
                },
                "showActionMultiple": {
                    "name": "showActionMultiple",
                    "getSignature": {
                        "name": "showActionMultiple",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 91
                    }
                },
                "triggerObservable": {
                    "name": "triggerObservable",
                    "getSignature": {
                        "name": "triggerObservable",
                        "type": "",
                        "returnType": "Observable<void>",
                        "line": 414
                    }
                },
                "nextWebcamObservable": {
                    "name": "nextWebcamObservable",
                    "getSignature": {
                        "name": "nextWebcamObservable",
                        "type": "",
                        "returnType": "Observable<boolean | string>",
                        "line": 418
                    }
                }
            },
            "templateData": "<div class=\"scanner-wrapper padding\">\r\n  <div class=\"scanner\">\r\n    <div\r\n      class=\"scanner-errors-overlay\"\r\n      (click)=\"errors = []\"\r\n      *ngIf=\"errors.length > 0\"\r\n    >\r\n      <div class=\"scanner-errors\">\r\n        <h4>Errors</h4>\r\n        <ul>\r\n          <li *ngFor=\"let error of errors\">{{ error | json }}</li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n    <div class=\"scanner-camera-wrapper\">\r\n      <!-- Webcam -->\r\n      <webcam\r\n        *ngIf=\"showWebcam\"\r\n        [height]=\"600\"\r\n        [width]=\"400\"\r\n        [trigger]=\"triggerObservable\"\r\n        [allowCameraSwitch]=\"allowCameraSwitch\"\r\n        [switchCamera]=\"nextWebcamObservable\"\r\n        [videoOptions]=\"videoOptions\"\r\n        [imageQuality]=\"1\"\r\n        (imageCapture)=\"handleImage($event)\"\r\n        (cameraSwitched)=\"cameraWasSwitched($event)\"\r\n        (initError)=\"handleInitError($event)\"\r\n      ></webcam>\r\n\r\n      <!-- Overlay -->\r\n      <div\r\n        *ngIf=\"false\"\r\n        class=\"scanner-camera-overlay {{ scanning ? 'scanning' : '' }}\"\r\n      ></div>\r\n\r\n      <!-- FPS -->\r\n      <div\r\n        *ngIf=\"false\"\r\n        class=\"scanner-status {{ scanning ? 'scanning' : '' }}\"\r\n      >\r\n        <div class=\"scanner-fps\">fps</div>\r\n      </div>\r\n\r\n      <!-- Scan -->\r\n      <div\r\n        *ngIf=\"showActionScan\"\r\n        (click)=\"scannerToggle()\"\r\n        class=\"scanner-action scanner-scan {{ scanning ? 'scanning' : '' }}\"\r\n      >\r\n        <fa-icon [icon]=\"scanIcon\"></fa-icon>\r\n        <span>{{ scanning ? \"Stop\" : \"Start\" }}</span>\r\n      </div>\r\n\r\n      <!-- Snapshot -->\r\n      <div\r\n        *ngIf=\"showActionSnapshot\"\r\n        (click)=\"runScan()\"\r\n        class=\"scanner-action scanner-snapshot\"\r\n      >\r\n        <fa-icon icon=\"camera\"></fa-icon>\r\n        <span>Capture</span>\r\n      </div>\r\n\r\n      <!-- Mutiple -->\r\n      <div\r\n        *ngIf=\"showActionMultiple\"\r\n        (click)=\"runScan()\"\r\n        class=\"scanner-action scanner-multiple\"\r\n      >\r\n        <fa-icon icon=\"bring-front\"></fa-icon>\r\n        <span>Capture</span>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Options -->\r\n    <div class=\"scanner-options\">\r\n      <app-menu [menu]=\"menuScannerOptions\"></app-menu>\r\n    </div>\r\n\r\n    <!-- Mode -->\r\n    <div class=\"scanner-modes\">\r\n      <app-menu [menu]=\"menuScannerModes\"></app-menu>\r\n    </div>\r\n\r\n    <!-- Result -->\r\n    <div\r\n      *ngIf=\"visibleMatches.length && scannerResultMenu\"\r\n      class=\"scanner-result {{ showResult ? 'active' : '' }}\"\r\n    >\r\n      <app-menu [menu]=\"scannerResultMenu\"></app-menu>\r\n    </div>\r\n\r\n    <!-- Results -->\r\n    <a\r\n      [routerLink]=\"'/scanner/lists/1'\"\r\n      class=\"scanner-results-wrapper animated fadeInUp {{\r\n        prompt ? 'prompt' : ''\r\n      }}\"\r\n      *ngIf=\"visibleMatches.length > 0\"\r\n    >\r\n      <div class=\"scanner-results\">\r\n        <div\r\n          *ngFor=\"let match of visibleMatches\"\r\n          class=\"scanner-result animated zoomIn\"\r\n        >\r\n          <img class=\"scanner-result-image\" [src]=\"match.image\" />\r\n        </div>\r\n        <div class=\"scanner-results-count\">\r\n          <span>{{ matches.length }}</span>\r\n        </div>\r\n      </div>\r\n    </a>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"flex justify-center padding\" style=\"padding-top: 0\">\r\n  <alert [alert]=\"alert\"></alert>\r\n</div>\r\n"
        },
        {
            "name": "ScannerListComponent",
            "id": "component-ScannerListComponent-5df8ad6e5d6b15080f54215b21cd77867dc362c68cb14b1894166b1c9e2ba6c6392632a70326322df1e6dd3c4287334cd9bbfae3a982a3c1f57699b384793c76",
            "file": "src/app/pages/scanner/scanner-lists/scanner-list/scanner-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "scanner-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./scanner-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addToDeckMenuItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Items",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "page",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "pageSize",
                    "defaultValue": "12",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "query",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "sortBy",
                    "defaultValue": "'created_date'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "sortDirection",
                    "defaultValue": "'desc'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "buildCardMenu",
                    "args": [
                        {
                            "name": "card",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "card",
                            "type": "Card",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "search",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Card } from '@app/pages/cards/card';\r\nimport { ScannerService } from '@app/pages/scanner/scanner.service';\r\nimport { MenuItem, Menu } from '@app/controls/menu';\r\nimport { Textbox } from '@app/controls/textbox';\r\nimport { Button } from '@app/controls/button';\r\nimport { Select } from '@app/controls/select';\r\n//import { AutoUnsubscribe } from \"ngx-auto-unsubscribe\";\r\nimport { CardsService } from '@app/pages/cards';\r\nimport {\r\n  ItemsHeader,\r\n  ItemsFooter,\r\n  ItemsFilter,\r\n  ItemGroup,\r\n} from '@app/layout/main';\r\nimport { Items } from '@app/layout/main/items/items';\r\nimport { Icons } from '@app/models/icons';\r\nimport { AuthenticationService } from '@app/pages/auth/auth.service';\r\n\r\n//@AutoUnsubscribe()\r\n@Component({\r\n  selector: 'scanner-list',\r\n  templateUrl: './scanner-list.component.html',\r\n})\r\nexport class ScannerListComponent implements OnInit {\r\n  query: string = '';\r\n  page: number = 1;\r\n  pageSize: number = 12;\r\n  sortBy: string = 'created_date';\r\n  sortDirection: string = 'desc';\r\n  loading: boolean;\r\n  items: Items;\r\n  addToDeckMenuItem: MenuItem;\r\n\r\n  constructor(\r\n    private authenticationService: AuthenticationService,\r\n    private scannerService: ScannerService,\r\n    private cardsService: CardsService\r\n  ) {}\r\n\r\n  ngOnDestroy() {}\r\n  ngOnInit() {\r\n    const addToMenuItem = new MenuItem({\r\n      text: 'Add to...',\r\n      icon: Icons.plus,\r\n      click: () => {\r\n        this.addToDeckMenuItem = new MenuItem({\r\n          text: 'Deck',\r\n          icon: Icons.deck,\r\n          menu: new Menu({\r\n            maxHeight: '320px',\r\n          }),\r\n        });\r\n\r\n        const addToBinderMenuItem = new MenuItem({\r\n          text: 'Binder',\r\n          icon: Icons.binders,\r\n          click: () => {},\r\n        });\r\n        addToMenuItem.menu = new Menu({\r\n          classes: 'anchor-right',\r\n          items: [this.addToDeckMenuItem, addToBinderMenuItem],\r\n        });\r\n      },\r\n    });\r\n\r\n    // Initalize cards\r\n    this.items = new Items({\r\n      buttonNoResults: new Button({\r\n        text: 'Scan Cards',\r\n        icon: Icons.scanner,\r\n        route: '/scanner',\r\n      }),\r\n      header: new ItemsHeader({\r\n        title: 'Scanner Results',\r\n        icon: Icons.scanner,\r\n        menu: new Menu({\r\n          items: [\r\n            new MenuItem({\r\n              menu: new Menu({\r\n                classes: 'anchor-right',\r\n                items: [\r\n                  addToMenuItem,\r\n                  new MenuItem({\r\n                    text: 'Clear Scans',\r\n                    icon: Icons.close,\r\n                    click: () => {\r\n                      this.items.header.menu.clearActive();\r\n                      this.items.itemGroups = [];\r\n                      this.scannerService.clearScans();\r\n                    },\r\n                  }),\r\n                ],\r\n              }),\r\n            }),\r\n          ],\r\n        }),\r\n      }),\r\n      filter: new ItemsFilter({\r\n        textboxSearch: new Textbox({\r\n          icon: Icons.search,\r\n          placeholder: 'Search Scanner Results...',\r\n          clickIcon: (value) => {\r\n            this.query = value;\r\n            this.search();\r\n          },\r\n          keydownEnter: (value) => {\r\n            this.query = value;\r\n            this.search();\r\n          },\r\n        }),\r\n        selectSortBy: new Select({\r\n          change: (value) => {\r\n            this.sortBy = value;\r\n            // this.getcards();\r\n          },\r\n        }),\r\n        selectSortDirection: new Select({\r\n          change: (value) => {\r\n            this.sortDirection = value;\r\n            // this.getCards();\r\n          },\r\n        }),\r\n      }),\r\n      footer: new ItemsFooter({\r\n        buttonPrev: new Button({\r\n          click: () => {\r\n            this.page--;\r\n            // this.getCards();\r\n          },\r\n        }),\r\n        buttonNext: new Button({\r\n          click: () => {\r\n            this.page++;\r\n            //this.nextPage();\r\n          },\r\n        }),\r\n        selectPageSize: new Select({\r\n          change: (value) => {\r\n            this.pageSize = +value;\r\n            // this.getCards();\r\n          },\r\n        }),\r\n        textboxPage: new Textbox({}),\r\n      }),\r\n    });\r\n\r\n    // Response from get scans request\r\n    this.scannerService.getScansObservable().subscribe((scans) => {\r\n      scans.forEach((card) => {\r\n        this.buildCardMenu(card);\r\n      });\r\n      this.items.itemGroups = [\r\n        new ItemGroup({\r\n          items: scans,\r\n        }),\r\n      ];\r\n      this.items.header.subtitle = 'cards: ' + scans.length;\r\n      let price: number = 0;\r\n      this.items.itemGroups[0].items.forEach((card) => {\r\n        if (card.price) {\r\n          price += card.price;\r\n        }\r\n      });\r\n      this.items.header.price = price;\r\n    });\r\n\r\n    // Request scans\r\n    this.scannerService.getScans();\r\n  }\r\n\r\n  buildCardMenu(card: Card) {\r\n    const removeMenuItem = new MenuItem({\r\n      icon: Icons.trash,\r\n      text: 'Remove',\r\n      click: (event: Event) => {\r\n        event.stopPropagation();\r\n        this.scannerService.removeCard(card);\r\n        this.items.itemGroups = [\r\n          new ItemGroup({\r\n            items: this.scannerService.scannerList.cards,\r\n          }),\r\n        ];\r\n      },\r\n    });\r\n\r\n    const cardMenuItem = new MenuItem({\r\n      menu: new Menu({\r\n        classes: 'anchor-bottom anchor-left',\r\n      }),\r\n    });\r\n\r\n    cardMenuItem.menu?.items.push(removeMenuItem);\r\n  }\r\n\r\n  search() {\r\n    if (this.query.length) {\r\n      const searchCards = this.scannerService.scannerList.cards.filter(\r\n        (card) => {\r\n          return card.name.toLowerCase().includes(this.query.toLowerCase());\r\n        }\r\n      );\r\n      this.items.itemGroups = [\r\n        new ItemGroup({\r\n          items: searchCards,\r\n        }),\r\n      ];\r\n    } else {\r\n      this.items.itemGroups = [\r\n        new ItemGroup({\r\n          items: this.scannerService.scannerList.cards,\r\n        }),\r\n      ];\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scannerService",
                        "type": "ScannerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scannerService",
                        "type": "ScannerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cardsService",
                        "type": "CardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- <items\r\n\ttitle=\"Scan Results\"\r\n\t[items]=\"items\">\r\n</items> -->\r\n"
        },
        {
            "name": "ScannerListsComponent",
            "id": "component-ScannerListsComponent-f13e1a09cbef9c5e91c04132593fd10e61e7e2e412bbf7505895d5a6b13c321844fe5978c59cc7162449ea93a90cfd5aac8c927c6efb9e0db873eb05b342f898",
            "file": "src/app/pages/scanner/scanner-lists/scanner-lists.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "scanner-lists",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./scanner-lists.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'scanner-lists',\r\n  templateUrl: './scanner-lists.component.html',\r\n})\r\nexport class ScannerListsComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "implements": [
                "OnInit"
            ],
            "templateData": ""
        },
        {
            "name": "SearchComponent",
            "id": "component-SearchComponent-249bc547445e97969c2c17e195407f1ce262c3aff36e8cb09726a2c5fe1b36d5d4f712d8349e303c89a6b9db5c43aac4d558e87fff4bdaf42538878e779245aa",
            "file": "src/app/layout/header/search/search.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "search",
            "styleUrls": [
                "./search.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "query",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "textbox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "clear",
                    "args": [
                        {
                            "name": "textboxEl",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "textboxEl",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "search",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Textbox } from '@app/controls';\r\nimport { Icons } from '@app/models';\r\n\r\n@Component({\r\n  selector: 'search',\r\n  templateUrl: './search.component.html',\r\n  styleUrls: ['./search.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class SearchComponent implements OnInit {\r\n  query: string = '';\r\n  textbox: Textbox;\r\n\r\n  constructor(private router: Router, private route: ActivatedRoute) {}\r\n\r\n  ngOnInit(): void {\r\n    // Get query from route\r\n    this.route.queryParams.subscribe((params) => {\r\n      if (params['quicksearch']) {\r\n        this.query = params['quicksearch'];\r\n      }\r\n    });\r\n\r\n    this.textbox = new Textbox({\r\n      placeholder: 'Search Cards...',\r\n      icon: Icons.search,\r\n      classes: 'bg-white color-dark',\r\n      keydownEnter: (value) => {\r\n        this.query = value;\r\n        this.search();\r\n      },\r\n      clickIcon: (value) => {\r\n        this.query = value;\r\n        this.search();\r\n      },\r\n    });\r\n  }\r\n\r\n  search() {\r\n    this.router.navigate(['/cards'], {\r\n      queryParams: {\r\n        search: this.query,\r\n      },\r\n    });\r\n  }\r\n\r\n  clear(textboxEl: HTMLElement) {\r\n    this.query = '';\r\n    // Set focus\r\n    textboxEl.focus();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";",
                    "styleUrl": "./search.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"search relative\">\r\n  <!-- <input\r\n\t\t#textboxEl\r\n\t\ttype=\"text\"\r\n\t\tplaceholder=\"Search...\"\r\n\t\t[(ngModel)]=\"query\"\r\n\t\t(keydown.enter)=\"search()\" />\r\n\t<fa-icon\r\n\t\t*ngIf=\"!query.length\"\r\n\t\ticon=\"search\"\r\n\t\t(click)=\"search()\">\r\n\t</fa-icon>\r\n\t<fa-icon \r\n\t\t*ngIf=\"query.length\"\r\n\t\ticon=\"times\"\r\n\t\t(click)=\"clear(textboxEl)\">\r\n\t</fa-icon> -->\r\n  <textbox [textbox]=\"textbox\"></textbox>\r\n</div>\r\n"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-9bbb6f5b5cc65a0ed043f914c1b82b062342f9fb4bbb1224004bdba2762deb5b043da332698e514779cd93fbd3cb711daec5342c4c5e74c56eef8c543f9ea1c5",
            "file": "src/app/controls/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SelectComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-select",
            "styleUrls": [
                "./select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "select",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "Select",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "textboxSearch",
                    "defaultValue": "new Textbox({\r\n    placeholder: 'Search...',\r\n    type: 'search',\r\n    icon: Icons.search,\r\n    size: Size.small,\r\n    keyup: (_value) => {\r\n      this.select.searchValue = _value;\r\n    },\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "methodsClass": [
                {
                    "name": "change",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "click",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clickOutside",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectOption",
                    "args": [
                        {
                            "name": "option",
                            "type": "SelectOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "SelectOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unselectOption",
                    "args": [
                        {
                            "name": "option",
                            "type": "SelectOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "SelectOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, forwardRef } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { Icons, Size } from '@app/models';\r\nimport { Select, SelectOption } from './select';\r\nimport { Textbox } from '@app/controls';\r\n\r\n@Component({\r\n  selector: 'app-select',\r\n  templateUrl: './select.component.html',\r\n  styleUrls: ['./select.component.scss'],\r\n\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => SelectComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class SelectComponent implements ControlValueAccessor {\r\n  constructor() {}\r\n\r\n  onChange: any = () => {};\r\n  onTouched: any = () => {};\r\n  registerOnChange(fn: any) {\r\n    this.onChange = fn;\r\n  }\r\n  registerOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\r\n  writeValue(value: string) {\r\n    this.value = value;\r\n  }\r\n  get value() {\r\n    return this.select.value;\r\n  }\r\n  set value(_value) {\r\n    this.select.value = _value;\r\n    this.select.options.forEach((option) => {\r\n      option.selected = option.value === _value;\r\n    });\r\n    this.select.optionGroups.forEach((group) => {\r\n      group.options.forEach((option) => {\r\n        option.selected = option.value === _value;\r\n      });\r\n    });\r\n    this.onChange(_value);\r\n    this.onTouched();\r\n  }\r\n\r\n  @Input() select: Select;\r\n\r\n  textboxSearch: Textbox = new Textbox({\r\n    placeholder: 'Search...',\r\n    type: 'search',\r\n    icon: Icons.search,\r\n    size: Size.small,\r\n    keyup: (_value) => {\r\n      this.select.searchValue = _value;\r\n    },\r\n  });\r\n\r\n  click() {\r\n    if (\r\n      this.select.multiple ||\r\n      !this.select.value ||\r\n      !this.select.value?.length\r\n    )\r\n      this.select.open = true;\r\n  }\r\n\r\n  clickOutside() {\r\n    this.select.open = false;\r\n  }\r\n\r\n  change(event?: any) {\r\n    this.value = event?.currentTarget?.value;\r\n    if (this.select.change) this.select.change(this.select.value);\r\n  }\r\n\r\n  selectOption(option: SelectOption) {\r\n    option.selected = true;\r\n    let values = this.value ? this.value.split(',') : [];\r\n    if (!values.includes(option.value)) {\r\n      values.push(option.value);\r\n      this.value = values.join(',');\r\n    }\r\n  }\r\n\r\n  unselectOption(option: SelectOption) {\r\n    option.selected = false;\r\n    let values = this.value ? this.value.split(',') : [];\r\n    if (values.includes(option.value)) {\r\n      values = values.filter((value) => value !== option.value);\r\n      this.value = values.join(',');\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n.select {\r\n  position: relative;\r\n  color: $font-color;\r\n  fa-icon {\r\n    position: absolute;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n    right: $spacing;\r\n    pointer-events: none;\r\n  }\r\n  &.dark {\r\n    select {\r\n      border: $border-strong;\r\n    }\r\n  }\r\n}\r\nselect {\r\n  height: 40px;\r\n  appearance: none;\r\n  border: $border;\r\n  padding: $spacing ($spacing * 1.5);\r\n  padding-right: 24px;\r\n  border-radius: $border-radius;\r\n  transition: $transition;\r\n  width: 100%;\r\n  font-size: $font-size;\r\n  color: $font-color;\r\n  outline: 0 !important;\r\n  background: $input-bg;\r\n  cursor: pointer;\r\n  option,\r\n  optgroup {\r\n    color: $font-color;\r\n  }\r\n  &:focus {\r\n    box-shadow: $shadow-focus, $shadow-focus-inset;\r\n    outline: 0 !important;\r\n    border-color: $primary-color;\r\n  }\r\n  &:hover {\r\n    border-color: $primary-color;\r\n  }\r\n  &:active {\r\n    outline: 0 !important;\r\n  }\r\n  &.small {\r\n    height: 28px;\r\n    padding: 0 12px;\r\n  }\r\n}\r\n.select-advanced {\r\n  min-height: 40px;\r\n  border: $border;\r\n  border-radius: $border-radius;\r\n  position: relative;\r\n  cursor: pointer;\r\n  background: $input-bg;\r\n  user-select: none;\r\n  &:hover {\r\n    border-color: $primary-color;\r\n  }\r\n  &:focus {\r\n    border-color: $primary-color;\r\n    box-shadow: $shadow-focus, $shadow-focus-inset;\r\n  }\r\n  > fa-icon {\r\n    position: absolute;\r\n    top: 50%;\r\n    right: 16px;\r\n    transform: translateY(-50%);\r\n  }\r\n  .placeholder {\r\n    line-height: 38px;\r\n    padding: 0 16px;\r\n    opacity: 0.5;\r\n  }\r\n  .selected-options {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    padding: 3px 32px 0 3px;\r\n    .select-option {\r\n      padding: 6px 10px;\r\n      border-radius: $border-radius;\r\n      background: $input-bg;\r\n      margin-right: 3px;\r\n      margin-bottom: 3px;\r\n      .text {\r\n        padding-right: 8px;\r\n      }\r\n      [icon=\"times\"] {\r\n        height: 14px;\r\n        &:hover {\r\n          color: $primary-color;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .available-options {\r\n    position: absolute;\r\n    top: 100%;\r\n    left: -1px;\r\n    right: -1px;\r\n    background: $main-bg;\r\n    box-shadow: $shadow;\r\n    border-radius: $border-radius;\r\n    overflow: hidden;\r\n    max-height: 300px;\r\n    border: $border;\r\n    .select-option {\r\n      padding: 8px 16px;\r\n      background: $input-bg;\r\n      &:hover {\r\n        background: $primary-color;\r\n      }\r\n    }\r\n  }\r\n  .search-options {\r\n    padding: 8px 0;\r\n    &::ng-deep .textbox {\r\n      border: 0;\r\n      background: transparent;\r\n      outline: 0 !important;\r\n      box-shadow: none !important;\r\n    }\r\n  }\r\n  .select-option {\r\n    display: flex;\r\n    align-items: center;\r\n    transition: $transition;\r\n    cursor: pointer;\r\n    &:hover {\r\n      background: $primary-color;\r\n    }\r\n    .text {\r\n      flex: 1;\r\n      padding-left: 8px;\r\n    }\r\n    fa-icon {\r\n      width: 16px;\r\n    }\r\n  }\r\n}\r\n\r\n// Validation\r\n:host {\r\n  &.ng-invalid {\r\n    .select-advanced {\r\n      border-color: $error;\r\n      box-shadow: $shadow-inset;\r\n      &:focus {\r\n        box-shadow: $shadow-focus-inset, $shadow-error;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "_value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 37,
                        "jsdoctags": [
                            {
                                "name": "_value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 34
                    }
                }
            },
            "templateData": "<label *ngIf=\"select.label\" class=\"label\">\r\n  {{ select.label }}\r\n</label>\r\n\r\n<div *ngIf=\"!select.advancedSelect\" class=\"select\" [class.dark]=\"select.dark\">\r\n  <fa-icon icon=\"caret-down\"></fa-icon>\r\n  <select\r\n    [(ngModel)]=\"value\"\r\n    (change)=\"change($event)\"\r\n    class=\"{{ select.classes ? select.classes : '' }}\"\r\n  >\r\n    <option *ngFor=\"let option of select.options\" [value]=\"option.value\">\r\n      {{ option.text }}\r\n    </option>\r\n    <optgroup\r\n      *ngFor=\"let optionGroup of select.optionGroups\"\r\n      [label]=\"optionGroup.label\"\r\n    >\r\n      <option *ngFor=\"let option of optionGroup.options\" [value]=\"option.value\">\r\n        {{ option.text }}\r\n      </option>\r\n    </optgroup>\r\n  </select>\r\n</div>\r\n\r\n<div\r\n  *ngIf=\"select.advancedSelect\"\r\n  class=\"select-advanced\"\r\n  (click)=\"click()\"\r\n  (clickOutside)=\"clickOutside()\"\r\n>\r\n  <div class=\"placeholder\" *ngIf=\"select.getSelectedOptions().length <= 0\">\r\n    {{ select.placeholder }}\r\n  </div>\r\n  <div class=\"selected-options\" *ngIf=\"select.getSelectedOptions().length > 0\">\r\n    <div\r\n      class=\"select-option\"\r\n      *ngFor=\"let option of select.getSelectedOptions()\"\r\n    >\r\n      <fa-icon [icon]=\"option.icon\"></fa-icon>\r\n      <span class=\"text\">{{ option.text }}</span>\r\n      <fa-icon (click)=\"unselectOption(option)\" icon=\"times\"></fa-icon>\r\n    </div>\r\n  </div>\r\n  <div class=\"available-options\" *ngIf=\"select.open\">\r\n    <div class=\"search-options\">\r\n      <textbox [textbox]=\"textboxSearch\"></textbox>\r\n    </div>\r\n    <div\r\n      class=\"select-option\"\r\n      *ngFor=\"let option of select.getUnselectedOptions()\"\r\n      (click)=\"selectOption(option)\"\r\n    >\r\n      <fa-icon [icon]=\"option.icon\"></fa-icon>\r\n      <span class=\"text\">{{ option.text }}</span>\r\n    </div>\r\n  </div>\r\n  <fa-icon icon=\"caret-down\"></fa-icon>\r\n</div>\r\n"
        },
        {
            "name": "SignInComponent",
            "id": "component-SignInComponent-71e32e162abee9b3ee0446bc3e4b25bd29ee0ea1d82a7c7d403b8e4404fab360b6702741bb4f938fb9a9d291a77dffad77cc3e1ae44a9549f132b18a483ab710",
            "file": "src/app/pages/auth/signin/signin.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "signin",
            "styleUrls": [
                "./signin.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./signin.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonSubmit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "rememberMeCheckbox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Checkbox",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "returnUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "textboxEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "textboxPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { NotificationsService } from '@app/controls';\r\nimport { Button, ButtonType } from '@app/controls/button';\r\nimport { Checkbox } from '@app/controls/checkbox';\r\nimport { Textbox } from '@app/controls/textbox/textbox';\r\nimport { AuthenticationService } from '@app/pages/auth/auth.service';\r\n\r\n@Component({\r\n  selector: 'signin',\r\n  templateUrl: './signin.component.html',\r\n  styleUrls: ['./signin.component.scss'],\r\n})\r\nexport class SignInComponent implements OnInit {\r\n  returnUrl: string;\r\n  form: FormGroup;\r\n  textboxEmail: Textbox;\r\n  textboxPassword: Textbox;\r\n  rememberMeCheckbox: Checkbox;\r\n  buttonSubmit: Button;\r\n\r\n  constructor(\r\n    private notificationService: NotificationsService,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private authenticationService: AuthenticationService\r\n  ) {\r\n    if (this.authenticationService.currentUserValue) {\r\n      this.router.navigateByUrl('/');\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.setupControls();\r\n    this.setupSubscriptions();\r\n  }\r\n\r\n  setupControls() {\r\n    this.form = this.formBuilder.group({\r\n      emailControl: ['', Validators.required],\r\n      passwordControl: ['', Validators.required],\r\n      //rememberMeControl: [''],\r\n    });\r\n    this.textboxEmail = new Textbox({\r\n      label: 'Email',\r\n      formControlName: 'emailControl',\r\n    });\r\n    this.textboxPassword = new Textbox({\r\n      label: 'Password',\r\n      type: 'password',\r\n      formControlName: 'passwordControl',\r\n    });\r\n    this.rememberMeCheckbox = new Checkbox({\r\n      text: 'Remember Me',\r\n      id: 'rememberMe',\r\n    });\r\n    this.buttonSubmit = new Button({\r\n      text: 'Sign In',\r\n      type: ButtonType.submit,\r\n    });\r\n\r\n    // Get return url from route params, else default to /\r\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n  }\r\n\r\n  setupSubscriptions() {\r\n    this.authenticationService.currentUserObservable().subscribe((user) => {\r\n      if (user) {\r\n        this.router.navigateByUrl(this.returnUrl);\r\n      }\r\n    });\r\n  }\r\n\r\n  submit() {\r\n    if (this.form.invalid) {\r\n      return;\r\n    }\r\n    this.authenticationService.login(\r\n      this.textboxEmail.value,\r\n      this.textboxPassword.value\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./signin.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "notificationService",
                        "type": "NotificationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form\r\n  class=\"padding-y-8 flex vertical flex-center\"\r\n  [formGroup]=\"form\"\r\n  (ngSubmit)=\"submit()\"\r\n>\r\n  <div class=\"flex vertical padded-2\">\r\n    <div>\r\n      <h1>Sign In</h1>\r\n    </div>\r\n    <div>\r\n      <textbox\r\n        [textbox]=\"textboxEmail\"\r\n        formControlName=\"emailControl\"\r\n      ></textbox>\r\n    </div>\r\n    <div>\r\n      <textbox\r\n        [textbox]=\"textboxPassword\"\r\n        formControlName=\"passwordControl\"\r\n      ></textbox>\r\n    </div>\r\n    <div>\r\n      <div class=\"flex padded flex-center\">\r\n        <div>\r\n          <app-button [button]=\"buttonSubmit\"></app-button>\r\n        </div>\r\n        <div>\r\n          <a routerLink=\"/forgot\">Forgot Password?</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</form>\r\n"
        },
        {
            "name": "SignUpComponent",
            "id": "component-SignUpComponent-054ff867b0509306e5e70a75d681cdffdc566554dc4294aa7200cce8e200cb9544d646401b3c3de68a069b71d9def017f6eb19c25dd73317f3456547ab7a859f",
            "file": "src/app/pages/auth/signup/signup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "signup",
            "styleUrls": [
                "./signup.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./signup.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonSubmit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "returnUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "textboxConfirmPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "textboxEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "textboxPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "textboxUsername",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Button, ButtonType } from '@app/controls/button';\r\nimport { Textbox } from '@app/controls/textbox/textbox';\r\nimport { AuthenticationService } from '@app/pages/auth/auth.service';\r\n\r\n@Component({\r\n  selector: 'signup',\r\n  templateUrl: './signup.component.html',\r\n  styleUrls: ['./signup.component.scss'],\r\n})\r\nexport class SignUpComponent implements OnInit {\r\n  returnUrl: string;\r\n  form: FormGroup;\r\n  textboxEmail: Textbox;\r\n  textboxUsername: Textbox;\r\n  textboxPassword: Textbox;\r\n  textboxConfirmPassword: Textbox;\r\n  buttonSubmit: Button;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private authenticationService: AuthenticationService\r\n  ) {\r\n    if (this.authenticationService.currentUserValue) {\r\n      this.router.navigateByUrl('/');\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.setupControls();\r\n    this.setupSubscriptions();\r\n  }\r\n\r\n  setupControls() {\r\n    this.form = this.formBuilder.group({\r\n      emailControl: ['', Validators.required],\r\n      usernameControl: ['', Validators.required],\r\n      passwordControl: ['', Validators.required],\r\n      passwordConfirmControl: ['', Validators.required],\r\n    });\r\n    this.textboxEmail = new Textbox({\r\n      label: 'Email',\r\n      type: 'email',\r\n    });\r\n    this.textboxUsername = new Textbox({\r\n      label: 'Username',\r\n    });\r\n    this.textboxPassword = new Textbox({\r\n      label: 'Password',\r\n      type: 'password',\r\n    });\r\n    this.textboxConfirmPassword = new Textbox({\r\n      label: 'Confirm Password',\r\n      type: 'password',\r\n    });\r\n    this.buttonSubmit = new Button({\r\n      text: 'Sign Up',\r\n      type: ButtonType.submit,\r\n    });\r\n\r\n    // Get return url from route params, else default to /\r\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n  }\r\n\r\n  setupSubscriptions() {\r\n    this.authenticationService.currentUserObservable().subscribe((user) => {\r\n      if (user) {\r\n        this.router.navigateByUrl(this.returnUrl);\r\n      }\r\n    });\r\n  }\r\n\r\n  submit() {\r\n    if (this.form.invalid) {\r\n      return;\r\n    }\r\n    this.authenticationService.register(\r\n      this.textboxEmail.value,\r\n      this.textboxUsername.value,\r\n      this.textboxPassword.value,\r\n      this.textboxConfirmPassword.value\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./signup.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div id=\"page-register\">\r\n  <form class=\"padding-large\" [formGroup]=\"form\" (ngSubmit)=\"submit()\">\r\n    <div class=\"flex vertical padded flex-center\">\r\n      <div>\r\n        <h1>Sign Up</h1>\r\n      </div>\r\n      <div>\r\n        <textbox [textbox]=\"textboxEmail\"></textbox>\r\n      </div>\r\n      <div>\r\n        <textbox [textbox]=\"textboxUsername\"></textbox>\r\n      </div>\r\n      <div>\r\n        <textbox [textbox]=\"textboxPassword\"></textbox>\r\n      </div>\r\n      <div>\r\n        <textbox [textbox]=\"textboxConfirmPassword\"></textbox>\r\n      </div>\r\n      <div>\r\n        <app-button [button]=\"buttonSubmit\"></app-button>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n"
        },
        {
            "name": "TagComponent",
            "id": "component-TagComponent-689c9d13eea3433ff42f0a5789e2f11fd4c46396c009615172674037fdf48effb79910fdf1bde2347de45ccbe7bdf4b8427af21743fa942cae4f275eaec948d0",
            "file": "src/app/controls/tag/tag.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tag",
            "styleUrls": [
                "./tag.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "tag.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "tag",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Tag",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { Tag } from './tag';\r\n\r\n@Component({\r\n  selector: 'tag',\r\n  templateUrl: 'tag.component.html',\r\n  styleUrls: ['./tag.component.scss'],\r\n})\r\nexport class TagComponent implements OnInit {\r\n  @Input() tag: Tag;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n.tag {\r\n\tdisplay: flex;\r\n\tpadding: 4px 6px;\r\n\ttext-transform: uppercase;\r\n\tfont-size: 12px;\r\n\tline-height: 1;\r\n\tbackground: $panel-bg;\r\n\tborder-radius: $border-radius;\r\n\talign-items: center;\r\n\tbox-shadow: $shadow-sheen;\r\n\tposition: relative;\r\n\t&.primary {\r\n\t\tbackground: $primary-color;\r\n\t\tcolor: white;\r\n\t}\r\n\t&.transparent {\r\n\t\tbackground: transparent;\r\n\t\tcolor: inherit;\r\n\t}\r\n\r\n\t&.card-rarity {\r\n\t\ttransition: $transition;\r\n\t\tcursor: pointer;\r\n\t\t&:hover {\r\n\t\t\tbox-shadow: $shadow-sheen, $shadow-focus;\r\n\t\t}\r\n\t}\r\n\r\n\tfa-icon {\r\n\t\t+ span {\r\n\t\t\tpadding-left: $spacing / 2;\r\n\t\t}\r\n\t}\r\n\r\n\t// Sheen\r\n\t&:after {\r\n\t\tcontent: \"\";\r\n\t\tborder-radius: $border-radius;\r\n\t\twidth: 100%;\r\n\t\theight: 100%;\r\n\t\tbox-shadow: $shadow-sheen;\r\n\t\tz-index: 10;\r\n\t\tposition: absolute;\r\n\t\tborder: $border-strong;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t}\r\n\r\n\t$promo: black;\r\n\t$common: grey;\r\n\t$uncommon: darken(white, 10%);\r\n\t$rare-non-holo: #119100;\r\n\t$rare-holo: #004180;\r\n\t$rare-ultra: #5d1e89;\r\n\t$rare-secret: #bb6005;\r\n\r\n\t$rarity: (\r\n\t\t\"promo\": $promo,\r\n\t\t\"common\": $common,\r\n\t\t\"uncommon\": $uncommon,\r\n\t\t\"rare\": $rare-non-holo,\r\n\t\t\"rare-holo\": $rare-holo,\r\n\t\t\"rare-ultra\": $rare-ultra,\r\n\t\t\"rare-secret\": $rare-secret,\r\n\t\t\"rare-prime\": $rare-ultra,\r\n\t);\r\n\r\n\t@each $rarity-name, $rarity-color in $rarity {\r\n\t\t&.#{$rarity-name} {\r\n\t\t\tbackground: $rarity-color;\r\n\t\t\tcolor: lighten($rarity-color, 50%);\r\n\t\t\t//box-shadow: 0 0 8px 4px rgba(lighten($rarity-color, 10%), .5);\r\n\t\t\tborder-color: darken($rarity-color, 10%);\r\n\t\t\t&:before {\r\n\t\t\t\tbackground-color: lighten($rarity-color, 50%);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t&.common {\r\n\t\t&:before {\r\n\t\t\tcontent: \"\";\r\n\t\t\tborder-radius: 50%;\r\n\t\t\twidth: 10px;\r\n\t\t\theight: 10px;\r\n\t\t\tdisplay: inline-block;\r\n\t\t\tmargin-right: 4px;\r\n\t\t}\r\n\t}\r\n\t&.uncommon {\r\n\t\tcolor: rgba(black, 0.5);\r\n\t\t//box-shadow: 0 0 8px 4px rgba($font-color, .1);\r\n\t\t&:before {\r\n\t\t\tcontent: \"\";\r\n\t\t\tdisplay: inline-block;\r\n\t\t\twidth: 8px;\r\n\t\t\theight: 8px;\r\n\t\t\ttransform: rotate(45deg);\r\n\t\t\tbackground: rgba(black, 0.5);\r\n\t\t}\r\n\t\tspan {\r\n\t\t\tmargin-left: 6px;\r\n\t\t}\r\n\t}\r\n\t&.promo,\r\n\t&.rare,\r\n\t&.rare-ultra,\r\n\t&.rare-holo {\r\n\t\t&:before {\r\n\t\t\tcontent: \"\";\r\n\t\t\tdisplay: inline-block;\r\n\t\t\tmargin-right: 4px;\r\n\t\t\twidth: 12px;\r\n\t\t\theight: 12px;\r\n\t\t\tclip-path: polygon(\r\n\t\t\t\t50% 0%,\r\n\t\t\t\t61% 35%,\r\n\t\t\t\t98% 35%,\r\n\t\t\t\t68% 57%,\r\n\t\t\t\t79% 91%,\r\n\t\t\t\t50% 70%,\r\n\t\t\t\t21% 91%,\r\n\t\t\t\t32% 57%,\r\n\t\t\t\t2% 35%,\r\n\t\t\t\t39% 35%\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\t&.promo {\r\n\t\tcolor: white;\r\n\t\topacity: 0.8;\r\n\t\t&:before {\r\n\t\t\tbackground: white;\r\n\t\t}\r\n\t}\r\n\t&.rare-secret {\r\n\t\t&:before {\r\n\t\t\tcontent: \"\";\r\n\t\t\tdisplay: inline-block;\r\n\t\t\tmargin-right: 4px;\r\n\t\t\twidth: 12px;\r\n\t\t\theight: 12px;\r\n\t\t\tclip-path: polygon(\r\n\t\t\t\t50% 0%,\r\n\t\t\t\t61% 35%,\r\n\t\t\t\t98% 35%,\r\n\t\t\t\t68% 57%,\r\n\t\t\t\t79% 91%,\r\n\t\t\t\t50% 70%,\r\n\t\t\t\t21% 91%,\r\n\t\t\t\t32% 57%,\r\n\t\t\t\t2% 35%,\r\n\t\t\t\t39% 35%\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\t&.amazing-rare {\r\n\t\tbackground: conic-gradient(\r\n\t\t\t#fae521,\r\n\t\t\t#ef3594,\r\n\t\t\t#60469c,\r\n\t\t\t#3dc4e6,\r\n\t\t\t#42b64a,\r\n\t\t\t#fae521\r\n\t\t);\r\n\t\tcolor: white;\r\n\t\ttext-shadow: $text-shadow;\r\n\t\t//box-shadow: 0 0 8px 4px rgba(#42B64A, .5);\r\n\t\tpadding: 5px 7px;\r\n\t\t&:before {\r\n\t\t\tcontent: \"\";\r\n\t\t\tdisplay: inline-block;\r\n\t\t\tmargin-right: 4px;\r\n\t\t\twidth: 12px;\r\n\t\t\theight: 12px;\r\n\t\t\tbackground: white;\r\n\t\t\tfilter: drop-shadow($text-shadow);\r\n\t\t\tclip-path: polygon(\r\n\t\t\t\t50% 0%,\r\n\t\t\t\t61% 35%,\r\n\t\t\t\t98% 35%,\r\n\t\t\t\t68% 57%,\r\n\t\t\t\t79% 91%,\r\n\t\t\t\t50% 70%,\r\n\t\t\t\t21% 91%,\r\n\t\t\t\t32% 57%,\r\n\t\t\t\t2% 35%,\r\n\t\t\t\t39% 35%\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\t&.rare-rainbow {\r\n\t\tbackground: linear-gradient(\r\n\t\t\tto left,\r\n\t\t\t#fae521,\r\n\t\t\t#ef3594,\r\n\t\t\t#60469c,\r\n\t\t\t#3dc4e6,\r\n\t\t\t#42b64a,\r\n\t\t\t#fae521\r\n\t\t);\r\n\t\tcolor: white;\r\n\t\ttext-shadow: $text-shadow;\r\n\t\t//box-shadow: 0 0 8px 4px rgba(#42B64A, .5);\r\n\t\tpadding: 5px 7px;\r\n\t\t&:before {\r\n\t\t\tcontent: \"\";\r\n\t\t\tdisplay: inline-block;\r\n\t\t\tmargin-right: 4px;\r\n\t\t\twidth: 12px;\r\n\t\t\theight: 12px;\r\n\t\t\tbackground: white;\r\n\t\t\tfilter: drop-shadow($text-shadow);\r\n\t\t\tclip-path: polygon(\r\n\t\t\t\t50% 0%,\r\n\t\t\t\t61% 35%,\r\n\t\t\t\t98% 35%,\r\n\t\t\t\t68% 57%,\r\n\t\t\t\t79% 91%,\r\n\t\t\t\t50% 70%,\r\n\t\t\t\t21% 91%,\r\n\t\t\t\t32% 57%,\r\n\t\t\t\t2% 35%,\r\n\t\t\t\t39% 35%\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n",
                    "styleUrl": "./tag.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"tag\" class=\"tag {{ tag.classes }}\" [routerLink]=\"tag.route\">\r\n  <fa-icon *ngIf=\"tag.icon\" [icon]=\"tag.icon\"> </fa-icon>\r\n  <span>{{ tag.text }}</span>\r\n</div>\r\n"
        },
        {
            "name": "TextareaComponent",
            "id": "component-TextareaComponent-008b636298290a815af470f861c187cd49fd3c050c68c1ae73df558648c876e626fb1d50224911df55d82d177803264a9583eb07dc004c5c07fbdf8a9d211ed1",
            "file": "src/app/controls/textarea/textarea.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => TextareaComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-textarea",
            "styleUrls": [
                "./textarea.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./textarea.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "textarea",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "Textarea",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "clickIcon",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "outputKeydownEnter",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "change",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "keydownEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { Textarea } from './textarea';\r\n\r\n@Component({\r\n  selector: 'app-textarea',\r\n  templateUrl: './textarea.component.html',\r\n  styleUrls: ['./textarea.component.scss'],\r\n\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => TextareaComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class TextareaComponent implements ControlValueAccessor {\r\n  onChange: any = () => {};\r\n  onTouched: any = () => {};\r\n  registerOnChange(fn: any) {\r\n    this.onChange = fn;\r\n  }\r\n  registerOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\r\n  writeValue(value: string) {\r\n    this.value = value;\r\n  }\r\n  get value() {\r\n    return this.textarea.value;\r\n  }\r\n  set value(_value) {\r\n    this.textarea.value = _value;\r\n    this.onChange(_value);\r\n    this.onTouched();\r\n  }\r\n\r\n  @Input() textarea: Textarea;\r\n  @Output() outputKeydownEnter: EventEmitter<string> = new EventEmitter();\r\n  @Output() clickIcon: EventEmitter<string> = new EventEmitter();\r\n\r\n  keydownEnter() {\r\n    this.outputKeydownEnter.emit(this.value);\r\n    if (this.textarea.keydownEnter) {\r\n      this.textarea.keydownEnter(this.value);\r\n    }\r\n  }\r\n\r\n  change() {\r\n    if (this.textarea.change) {\r\n      this.textarea.change(this.value);\r\n    }\r\n  }\r\n\r\n  constructor() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n.textarea-wrapper {\r\n  position: relative;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  flex-direction: column;\r\n  fa-icon {\r\n    position: absolute;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n    right: 16px;\r\n    cursor: pointer;\r\n  }\r\n}\r\n.textarea {\r\n  border-radius: $border-radius;\r\n  padding: 16px;\r\n  padding-right: 32px;\r\n  text-overflow: ellipsis;\r\n  min-height: 64px;\r\n  border: $border;\r\n  box-shadow: $shadow-inset;\r\n  transition: $transition;\r\n  max-width: 100%;\r\n  resize: vertical;\r\n  font-family: $font-family;\r\n  font-size: $font-size;\r\n  color: $font-color;\r\n  background: $input-bg;\r\n  &:focus {\r\n    outline: 0;\r\n    border-color: $primary-color;\r\n    box-shadow: $shadow-focus, $shadow-focus-inset;\r\n  }\r\n  &:hover {\r\n    border-color: $primary-color;\r\n  }\r\n  &[type=\"number\"] {\r\n    padding: 0;\r\n    padding-left: 16px;\r\n    line-height: 40px;\r\n  }\r\n}\r\napp-textarea {\r\n  &.ng-invalid {\r\n    .textbox {\r\n      border-color: $error;\r\n      box-shadow: $shadow-inset;\r\n      &:focus {\r\n        box-shadow: $shadow-focus-inset, $shadow-error;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./textarea.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 60
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "_value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 39,
                        "jsdoctags": [
                            {
                                "name": "_value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 36
                    }
                }
            },
            "templateData": "<div class=\"textarea-wrapper\">\r\n  <label *ngIf=\"textarea.label\" class=\"label\">{{ textarea.label }}</label>\r\n  <textarea\r\n    [style.width]=\"textarea.width ? textarea.width + 'px' : null\"\r\n    placeholder=\"{{ textarea.placeholder ? textarea.placeholder : null }}\"\r\n    class=\"textarea {{ textarea.classes }}\"\r\n    (keydown.enter)=\"keydownEnter()\"\r\n    (change)=\"change()\"\r\n    [disabled]=\"textarea.disabled\"\r\n    [(ngModel)]=\"value\"\r\n  >\r\n  </textarea>\r\n</div>\r\n"
        },
        {
            "name": "TextboxComponent",
            "id": "component-TextboxComponent-150a799a6e166221a4072372cdf4bea75fb06a0fed64a281d13e242bc4def706231e051187ebc85546fa2201cfe0df5538bb9a5e833d3f3f4e142eede1fb16f9",
            "file": "src/app/controls/textbox/textbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => TextboxComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "textbox",
            "styleUrls": [
                "./textbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./textbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "alert",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "Alert",
                    "decorators": []
                },
                {
                    "name": "textbox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "Textbox",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "outputClickClear",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "outputClickIcon",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "outputKeydownEnter",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "click",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "previousValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "methodsClass": [
                {
                    "name": "change",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clickClear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clickIcon",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "colorPickerChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "keydown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "keydownEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "keyup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPreviousValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  forwardRef,\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nimport { Alert } from '../alert';\r\nimport { Textbox } from './textbox';\r\n\r\n@Component({\r\n  selector: 'textbox',\r\n  templateUrl: './textbox.component.html',\r\n  styleUrls: ['./textbox.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => TextboxComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class TextboxComponent implements ControlValueAccessor {\r\n  constructor() {}\r\n  onChange: any = () => {};\r\n  onTouched: any = () => {};\r\n  registerOnChange(fn: any) {\r\n    this.onChange = fn;\r\n  }\r\n  registerOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\r\n  writeValue(value: string) {\r\n    this.value = value;\r\n  }\r\n  setDisabledState(isDisabled: boolean) {\r\n    this.textbox.disabled = isDisabled;\r\n  }\r\n\r\n  previousValue: string;\r\n  get value() {\r\n    return this.textbox.value;\r\n  }\r\n  set value(_value) {\r\n    this.textbox.value = _value;\r\n    if (this.textbox.change) this.textbox.change(_value);\r\n    this.onChange(_value);\r\n    this.onTouched();\r\n  }\r\n\r\n  @Input() textbox: Textbox;\r\n  @Input() alert: Alert;\r\n  @Output() outputKeydownEnter: EventEmitter<string> = new EventEmitter();\r\n  @Output() outputClickIcon: EventEmitter<string> = new EventEmitter();\r\n  @Output() outputClickClear: EventEmitter<string> = new EventEmitter();\r\n\r\n  click = (e: MouseEvent) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n  };\r\n\r\n  keyup() {\r\n    if (this.textbox.keyup) this.textbox.keyup(this.value);\r\n  }\r\n\r\n  keydown() {\r\n    if (this.textbox.keydown) this.textbox.keydown(this.value);\r\n  }\r\n\r\n  keydownEnter() {\r\n    this.outputKeydownEnter.emit(this.value);\r\n    if (this.textbox.keydownEnter) this.textbox.keydownEnter(this.value);\r\n  }\r\n\r\n  clickIcon() {\r\n    this.outputClickIcon.emit(this.value);\r\n    if (this.textbox.clickIcon) this.textbox.clickIcon(this.value);\r\n  }\r\n\r\n  clickClear() {\r\n    this.textbox.clear();\r\n    this.outputClickClear.emit(this.value);\r\n    if (this.textbox.clickClear) this.textbox.clickClear();\r\n  }\r\n\r\n  setPreviousValue() {\r\n    this.value = this.previousValue;\r\n  }\r\n\r\n  validate() {\r\n    this.textbox.valid = true;\r\n\r\n    // If max, check it\r\n    if (this.textbox.max) {\r\n      const num = Number(this.value);\r\n\r\n      // Not a number\r\n      if (isNaN(num)) {\r\n        this.textbox.valid = false;\r\n      }\r\n\r\n      // No large\r\n      if (num > this.textbox.max) {\r\n        this.textbox.valid = false;\r\n      }\r\n    }\r\n\r\n    // If min, check it\r\n    if (this.textbox.min) {\r\n      const num = Number(this.value);\r\n\r\n      // Not a number\r\n      if (isNaN(num)) {\r\n        this.textbox.valid = false;\r\n      }\r\n\r\n      // No large\r\n      if (num < this.textbox.min) {\r\n        this.textbox.valid = false;\r\n      }\r\n    }\r\n\r\n    return this.textbox.valid;\r\n  }\r\n\r\n  change(event?: any) {\r\n    // If valid\r\n    if (this.validate()) this.value = event?.currentTarget?.value;\r\n    else this.setPreviousValue();\r\n\r\n    // Set previous value after change\r\n    this.previousValue = this.value;\r\n  }\r\n\r\n  colorPickerChange(value: string) {\r\n    this.textbox.value = value;\r\n    this.change();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n.textbox-wrapper {\r\n\tposition: relative;\r\n\tdisplay: flex;\r\n\tflex-wrap: wrap;\r\n\tflex-direction: column;\r\n\tcolor: $font-color;\r\n\tfa-icon {\r\n\t\tposition: absolute;\r\n\t\ttop: 50%;\r\n\t\ttransform: translateY(-50%);\r\n\t\tright: 16px;\r\n\t\tcursor: pointer;\r\n\t}\r\n\t&.dark {\r\n\t\t.textbox {\r\n\t\t\tborder: $border-strong;\r\n\t\t}\r\n\t}\r\n\t&.small {\r\n\t\t.textbox {\r\n\t\t\theight: 24px;\r\n\t\t\tline-height: 24px;\r\n\t\t\tfont-size: 12px;\r\n\t\t\t&[type=\"number\"] {\r\n\t\t\t\tpadding: 0 0 0 8px;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n.textbox {\r\n\tborder-radius: $border-radius;\r\n\tpadding: 0 32px 0 16px;\r\n\ttext-overflow: ellipsis;\r\n\theight: 40px;\r\n\tborder: $border;\r\n\ttransition: $transition;\r\n\tmax-width: 100%;\r\n\tcursor: text;\r\n\tbackground: $input-bg;\r\n\t&:focus {\r\n\t\tborder-color: $primary-color;\r\n\t\tbox-shadow: $shadow-focus, $shadow-focus-inset;\r\n\t}\r\n\t&:hover {\r\n\t\tborder-color: $primary-color;\r\n\t}\r\n\t&[type=\"number\"] {\r\n\t\tpadding: 0 0 0 16px;\r\n\t\tline-height: 40px;\r\n\t}\r\n}\r\n\r\n// Validation\r\n:host {\r\n\t&.ng-invalid {\r\n\t\t.textbox {\r\n\t\t\tborder-color: $error;\r\n\t\t\tbox-shadow: $shadow-inset;\r\n\t\t\t&:focus {\r\n\t\t\t\tbox-shadow: $shadow-focus-inset, $shadow-error;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n",
                    "styleUrl": "./textbox.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 26
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "_value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 47,
                        "jsdoctags": [
                            {
                                "name": "_value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 44
                    }
                }
            },
            "templateData": "<div\r\n  (click)=\"click($event)\"\r\n  *ngIf=\"textbox\"\r\n  class=\"textbox-wrapper {{ textbox.wrapperClasses }} {{ textbox.size }}\"\r\n  [class.dark]=\"textbox.dark\"\r\n>\r\n  <label *ngIf=\"textbox.label\" class=\"label\">\r\n    {{ textbox.label }}\r\n  </label>\r\n\r\n  <!-- Not color picker -->\r\n  <input\r\n    *ngIf=\"!textbox.colorPicker\"\r\n    #textboxEl\r\n    [style.width]=\"textbox.width ? textbox.width + 'px' : null\"\r\n    class=\"textbox {{ textbox.classes }}\"\r\n    (click)=\"click($event)\"\r\n    (keyup)=\"keyup()\"\r\n    (keydown)=\"keydown()\"\r\n    (keydown.enter)=\"keydownEnter()\"\r\n    (change)=\"change($event)\"\r\n    [value]=\"value\"\r\n    [attr.readOnly]=\"textbox.readOnly\"\r\n    [attr.min]=\"textbox.min\"\r\n    [attr.max]=\"textbox.max\"\r\n    [attr.autocomplete]=\"textbox.autoComplete\"\r\n    [attr.disabled]=\"textbox.disabled\"\r\n    [attr.placeholder]=\"textbox.placeholder\"\r\n    [attr.type]=\"textbox.type\"\r\n  />\r\n\r\n  <!-- Color picker -->\r\n  <input\r\n    *ngIf=\"textbox.colorPicker\"\r\n    [style.width]=\"textbox.width ? textbox.width + 'px' : null\"\r\n    class=\"textbox {{ textbox.classes }}\"\r\n    (click)=\"click($event)\"\r\n    (keyup)=\"keyup()\"\r\n    (keydown)=\"keydown()\"\r\n    (keydown.enter)=\"keydownEnter()\"\r\n    (change)=\"change($event)\"\r\n    [value]=\"value\"\r\n    [attr.readOnly]=\"textbox.readOnly\"\r\n    [attr.min]=\"textbox.min\"\r\n    [attr.max]=\"textbox.max\"\r\n    [attr.autocomplete]=\"textbox.autoComplete\"\r\n    [attr.disabled]=\"textbox.disabled\"\r\n    [attr.placeholder]=\"textbox.placeholder\"\r\n    [attr.type]=\"textbox.type\"\r\n    [(colorPicker)]=\"textbox.value\"\r\n    (colorPickerChange)=\"colorPickerChange($event)\"\r\n    [cpOutputFormat]=\"'hex'\"\r\n  />\r\n\r\n  <!-- Icon -->\r\n  <fa-icon\r\n    (click)=\"clickIcon()\"\r\n    *ngIf=\"textbox.icon && (!textbox.clearable || !textbox.value.length)\"\r\n    [icon]=\"textbox.icon\"\r\n  >\r\n  </fa-icon>\r\n\r\n  <!-- Clear -->\r\n  <fa-icon\r\n    (click)=\"clickClear()\"\r\n    *ngIf=\"textbox.clearable && textbox.value.length\"\r\n    icon=\"times\"\r\n  >\r\n  </fa-icon>\r\n</div>\r\n\r\n<alert *ngIf=\"alert\" [alert]=\"alert\"></alert>\r\n"
        },
        {
            "name": "ToggleComponent",
            "id": "component-ToggleComponent-32a69fd6973fef8b7dca85ed9ad1c1e444cb39c5f1ecf917e1bbe79f8eae63290f7970f3301e9f409660f1f876ea73c301ec9675e2cc344a3f44a25fee51fab9",
            "file": "src/app/controls/toggle/toggle.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ToggleComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "toggle",
            "styleUrls": [
                "./toggle.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "toggle.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "toggle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "Toggle",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "change",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, forwardRef } from '@angular/core';\r\nimport { Toggle } from './toggle';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'toggle',\r\n  templateUrl: 'toggle.component.html',\r\n  styleUrls: ['./toggle.component.scss'],\r\n\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => ToggleComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class ToggleComponent implements ControlValueAccessor {\r\n  onChange: any = () => {};\r\n  onTouched: any = () => {};\r\n  registerOnChange(fn: any) {\r\n    this.onChange = fn;\r\n  }\r\n  registerOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\r\n  writeValue(event: any) {\r\n    this.value = event;\r\n  }\r\n  get value() {\r\n    return this.toggle.checked;\r\n  }\r\n  set value(_value) {\r\n    this.toggle.checked = _value;\r\n    this.onChange(_value);\r\n    this.onTouched();\r\n  }\r\n\r\n  @Input() toggle: Toggle;\r\n\r\n  constructor() {}\r\n\r\n  change() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\";\r\n\r\n.toggle-wrapper {\r\n\tdisplay: flex;\r\n}\r\n\r\n.toggle {\r\n\tdisplay: block;\r\n\tposition: relative;\r\n\tuser-select: none;\r\n\tcursor: pointer;\r\n\tinput[type=\"checkbox\"] {\r\n\t\tmargin: 0;\r\n\t\tappearance: none;\r\n\t\twidth: 100%;\r\n\t\theight: 40px;\r\n\t\tborder-radius: $border-radius;\r\n\t\tbackground: $input-bg;\r\n\t\tborder: $border;\r\n\t\tvertical-align: middle;\r\n\t\tposition: absolute;\r\n\t\t&:before {\r\n\t\t\tcontent: \"\";\r\n\t\t\tposition: absolute;\r\n\t\t\twidth: 34px;\r\n\t\t\ttop: 2px;\r\n\t\t\tleft: 2px;\r\n\t\t\tbackground: rgba($font-color, 0.5);\r\n\t\t\tbottom: 2px;\r\n\t\t\ttransition: $transition;\r\n\t\t\tborder-radius: $border-radius;\r\n\t\t}\r\n\t\t&:checked {\r\n\t\t\t&:before {\r\n\t\t\t\tleft: calc(100% - 34px - 2px);\r\n\t\t\t\tbackground: $primary-color;\r\n\t\t\t}\r\n\t\t\t~ .textChecked {\r\n\t\t\t\topacity: 1;\r\n\t\t\t}\r\n\t\t\t~ .text {\r\n\t\t\t\topacity: 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\t&:hover {\r\n\t\t\tborder-color: $primary-color;\r\n\t\t}\r\n\t\t&:focus {\r\n\t\t\tborder-color: $primary-color;\r\n\t\t\tbox-shadow: $shadow-focus, $shadow;\r\n\t\t}\r\n\t}\r\n\t.text {\r\n\t\tz-index: 1;\r\n\t\tposition: relative;\r\n\t\tpadding: 10px 48px;\r\n\t\tdisplay: block;\r\n\t\ttext-align: center;\r\n\t\ttransition: $transition;\r\n\t\tpadding-right: 16px;\r\n\t}\r\n\t.textChecked {\r\n\t\tz-index: 1;\r\n\t\tposition: relative;\r\n\t\tpadding: 10px 48px;\r\n\t\tdisplay: block;\r\n\t\ttext-align: center;\r\n\t\ttransition: $transition;\r\n\t\tposition: relative;\r\n\t\tmargin-top: -40px;\r\n\t\topacity: 0;\r\n\t\tpadding-left: 16px;\r\n\t}\r\n}\r\n",
                    "styleUrl": "./toggle.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 39
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "_value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 33,
                        "jsdoctags": [
                            {
                                "name": "_value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 30
                    }
                }
            },
            "templateData": "<label *ngIf=\"toggle.label\" class=\"label\">\r\n\t{{ toggle.label }}\r\n</label>\r\n<div class=\"toggle-wrapper\">\r\n\t<label class=\"toggle\">\r\n\t\t<input [(ngModel)]=\"value\" (change)=\"change()\" type=\"checkbox\" />\r\n\t\t<span *ngIf=\"toggle.text\" class=\"text\">{{ toggle.text }}</span>\r\n\t\t<span *ngIf=\"toggle.textChecked\" class=\"textChecked\">{{\r\n\t\t\ttoggle.textChecked\r\n\t\t}}</span>\r\n\t</label>\r\n</div>\r\n"
        },
        {
            "name": "TypeTagComponent",
            "id": "component-TypeTagComponent-36499d6f0d03417d8b2f36202f0c9e38a6f659b48ee93a54c8e1316f8291f993256cf7ff7d9fc9399b0641535046014a0af7288799511b6db465b9894d2efe31",
            "file": "src/app/controls/type-tag/type-tag.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "type-tag",
            "styleUrls": [
                "./type-tag.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "type-tag.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "typeTag",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TypeTag",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { TypeTag } from './type-tag';\r\n\r\n@Component({\r\n  selector: 'type-tag',\r\n  templateUrl: 'type-tag.component.html',\r\n  styleUrls: ['./type-tag.component.scss'],\r\n})\r\nexport class TypeTagComponent implements OnInit {\r\n  @Input() type: string;\r\n  typeTag: TypeTag;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    this.typeTag = new TypeTag({\r\n      type: this.type,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"settings\",\r\n\t\t\"custom\";\r\n\r\n.type-tag {\r\n\ttransition: $transition;\r\n\tcursor: pointer;\r\n\tdisplay: flex;\r\n\tvertical-align: middle;\r\n\tborder-radius: $border-radius-small;\r\n\toverflow: hidden;\r\n\tposition: relative;\r\n\t&:hover {\r\n\t\tbox-shadow: $shadow-focus;\r\n\t}\r\n\timg {\r\n\t\twidth: 20px;\r\n\t\tpadding: $spacing / 2;\r\n\t\tbox-shadow: $shadow-sheen;\r\n\t\tborder: 1px solid rgba(black, .2);\r\n\t\tborder-right: 0;\r\n\t\tborder-top-left-radius: $border-radius-small;\r\n\t\tborder-bottom-left-radius: $border-radius-small;\r\n\t}\r\n\tspan {\r\n\t\tdisplay: block;\r\n\t\tpadding: ($spacing / 2) $spacing;\r\n\t\tcolor: white;\r\n\t\tfont-size: 10px;\r\n\t\ttext-transform: uppercase;\r\n\t\tposition: relative;\r\n\t\toverflow: hidden;\r\n\t\tborder: 1px solid rgba(black, .2);\r\n\r\n\t\t// Glow\r\n\t\t&:before {\r\n\t\t\tcontent: '';\r\n\t\t\tborder-radius: 0 $border-radius-small $border-radius-small 0;\r\n\t\t\twidth: 100%;\r\n\t\t\theight: 100%;\r\n\t\t\tposition: absolute;\r\n\t\t\tbox-shadow: $shadow-sheen;\r\n\t\t\tz-index: 10;\r\n\t\t\tleft: 0;\r\n\t\t\ttop: 0;\r\n\t\t}\r\n\t}\r\n\t@each $type, $color in $poke-types {\r\n\t\t&.#{$type} {\r\n\t\t\tbackground: $color;\r\n\t\t\tspan {\r\n\t\t\t\tbackground: darken($color, 35%);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
                    "styleUrl": "./type-tag.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<a\r\n\tclass=\"type-tag {{ type.toLowerCase() }}\"\r\n\t[routerLink]=\"typeTag.route && typeTag.route\"\r\n>\r\n\t<img\r\n\t\tsrc=\"https://duiker101.github.io/pokemon-type-svg-icons/icons/{{\r\n\t\t\ttype.toLowerCase()\r\n\t\t}}.svg\"\r\n\t/>\r\n\t<span>{{ type }}</span>\r\n</a>\r\n"
        },
        {
            "name": "UserCardComponent",
            "id": "component-UserCardComponent-cef18272936795d15a4bb9370bce482b50cd83d6c960aed8d896899de8118820920a4f0de608b4ef3867dc0962b33d24a49c61f6e1b9cda0480c8299799caadb",
            "file": "src/app/pages/collection/user-cards/user-card/user-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "user-card",
            "styleUrls": [
                "./user-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "UserCard",
                    "decorators": []
                },
                {
                    "name": "userCardGroups",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "UserCardGroup[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "deleted",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter<boolean>"
                },
                {
                    "name": "updated",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter<UserCard>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "buttonAdd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "buttonNotes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "buttonRemove",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "selectCondition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Select",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "selectGradingCompany",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Select",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "selectGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Select",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "selectPrinting",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Select",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "buildControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { Button } from '@app/controls/button';\r\nimport { DialogConfig, DialogService } from '@app/controls/dialog';\r\nimport { Select, SelectOption, SelectOptionGroup } from '@app/controls/select';\r\nimport {\r\n  Condition,\r\n  ConditionGraded,\r\n  GradingCompany,\r\n  Icons,\r\n  Printings,\r\n} from '@app/models';\r\nimport { UserCard, UserCardGroup } from './user-card';\r\nimport { UserCardNotesDialogComponent } from './user-card-notes-dialog.component';\r\n\r\n@Component({\r\n  selector: 'user-card',\r\n  templateUrl: './user-card.component.html',\r\n  styleUrls: ['./user-card.component.scss'],\r\n})\r\nexport class UserCardComponent implements OnInit {\r\n  @Input() item: UserCard;\r\n  @Input() userCardGroups: UserCardGroup[];\r\n  @Output() deleted: EventEmitter<boolean> = new EventEmitter();\r\n  @Output() updated: EventEmitter<UserCard> = new EventEmitter();\r\n  selectCondition: Select;\r\n  selectGradingCompany: Select;\r\n  selectPrinting: Select;\r\n  selectGroup: Select;\r\n  buttonNotes: Button;\r\n  buttonAdd: Button;\r\n  buttonRemove: Button;\r\n\r\n  constructor(private dialogService: DialogService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.buildControls();\r\n  }\r\n\r\n  buildControls() {\r\n    // Condition\r\n    this.selectCondition = new Select({\r\n      value: this.item.condition,\r\n      classes: 'square-right',\r\n      optionGroups: [\r\n        new SelectOptionGroup({\r\n          label: 'Condition',\r\n        }),\r\n        new SelectOptionGroup({\r\n          label: 'Condition Graded',\r\n        }),\r\n      ],\r\n      change: (value) => {\r\n        var test =\r\n          (Condition as any)[value.replace(' ', '')] ||\r\n          (ConditionGraded as any)[value.replace(' ', '').replace('.', '')];\r\n        this.updated.emit(\r\n          new UserCard({\r\n            ...this.item,\r\n            condition: test,\r\n          })\r\n        );\r\n      },\r\n    });\r\n    for (let condition in Condition) {\r\n      this.selectCondition.optionGroups[0].options.push(\r\n        new SelectOption({\r\n          text: (Condition as any)[condition],\r\n          value: (Condition as any)[condition],\r\n          selected: (Condition as any)[condition] === this.item.condition,\r\n        })\r\n      );\r\n    }\r\n    for (let conditionGraded in ConditionGraded) {\r\n      this.selectCondition.optionGroups[1].options.push(\r\n        new SelectOption({\r\n          text: (ConditionGraded as any)[conditionGraded],\r\n          value: (ConditionGraded as any)[conditionGraded],\r\n          selected:\r\n            (ConditionGraded as any)[conditionGraded] === this.item.condition,\r\n        })\r\n      );\r\n    }\r\n\r\n    // Grading company\r\n    this.selectGradingCompany = new Select({\r\n      value: this.item.graded_by,\r\n      classes: 'square',\r\n      optionGroups: [\r\n        new SelectOptionGroup({\r\n          label: 'Graded By',\r\n        }),\r\n      ],\r\n      change: (value) => {\r\n        this.updated.emit(\r\n          new UserCard({\r\n            ...this.item,\r\n            graded_by: (GradingCompany as any)[value.replace(' ', '')],\r\n          })\r\n        );\r\n      },\r\n    });\r\n    for (let gradingCompany in GradingCompany) {\r\n      this.selectGradingCompany.optionGroups[0].options.push(\r\n        new SelectOption({\r\n          text: (GradingCompany as any)[gradingCompany],\r\n          value: (GradingCompany as any)[gradingCompany],\r\n        })\r\n      );\r\n    }\r\n\r\n    // Printing\r\n    this.selectPrinting = new Select({\r\n      value: this.item.printing,\r\n      classes: 'square',\r\n      optionGroups: [\r\n        new SelectOptionGroup({\r\n          label: 'Printing',\r\n        }),\r\n      ],\r\n      change: (value) => {\r\n        this.updated.emit(\r\n          new UserCard({\r\n            ...this.item,\r\n            printing: (Printings as any)[value.replace(' ', '')],\r\n          })\r\n        );\r\n      },\r\n    });\r\n    for (let printVersion in Printings) {\r\n      this.selectPrinting.optionGroups[0].options.push(\r\n        new SelectOption({\r\n          text: (Printings as any)[printVersion],\r\n          value: (Printings as any)[printVersion],\r\n        })\r\n      );\r\n    }\r\n\r\n    // Group\r\n    this.selectGroup = new Select({\r\n      classes: 'square small-round-right',\r\n      multiple: true,\r\n      options: this.userCardGroups?.map(\r\n        (userCardGroup) =>\r\n          new SelectOption({\r\n            text: userCardGroup.name,\r\n            value: userCardGroup.id.toString(),\r\n          })\r\n      ),\r\n    });\r\n\r\n    // Notes\r\n    this.buttonNotes = new Button({\r\n      text: 'Notes',\r\n      icon: Icons.stickyNote,\r\n      classes: 'square secondary small-round-left',\r\n      width: '100%',\r\n      click: () => {\r\n        this.dialogService.open(\r\n          UserCardNotesDialogComponent,\r\n          new DialogConfig({\r\n            title: 'Notes',\r\n          })\r\n        );\r\n      },\r\n    });\r\n\r\n    // Button remove\r\n    this.buttonRemove = new Button({\r\n      text: 'Remove',\r\n      icon: Icons.trash,\r\n      width: '100%',\r\n      classes: 'secondary square-left',\r\n      click: () => {\r\n        if (confirm('Are you sure you want to delete this item?')) {\r\n          this.deleted.emit(true);\r\n        }\r\n      },\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./user-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"width-12\">\r\n  <div class=\"flex flex-center\">\r\n    <div class=\"box\">\r\n      <div class=\"flex flex-center small-vertical\">\r\n        <div class=\"box small-12\">\r\n          <div class=\"flex flex-center\">\r\n            <div class=\"width-3\">\r\n              <app-select [select]=\"selectCondition\"></app-select>\r\n            </div>\r\n            <div class=\"width-3\">\r\n              <app-select [select]=\"selectGradingCompany\"></app-select>\r\n            </div>\r\n            <div class=\"width-3\">\r\n              <app-select [select]=\"selectPrinting\"></app-select>\r\n            </div>\r\n            <div class=\"width-3\">\r\n              <app-select [select]=\"selectGroup\"></app-select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"flex small-12\">\r\n          <div class=\"small-6\">\r\n            <app-button [button]=\"buttonNotes\"></app-button>\r\n          </div>\r\n          <div class=\"small-6\">\r\n            <app-button [button]=\"buttonRemove\"></app-button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "UserCardGroupComponent",
            "id": "component-UserCardGroupComponent-8515f050767a72b2aee83e26d1e0fe8281a9d94e3762adecbcb77266112a89fb274b0f0b33e9d1324a0b6e1078c2b766f1ae60ece7c814d5bcacd98d8431b9fd",
            "file": "src/app/pages/collection/user-card-group/user-card-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "user-card-group",
            "styleUrls": [
                "./user-card-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "user-card-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonCancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "buttonSave",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "selectType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Select",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "textareaDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textarea",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "textboxName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Textbox",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "togglePublic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Toggle",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n  Button,\r\n  ButtonType,\r\n  Select,\r\n  SelectOption,\r\n  Textarea,\r\n  Textbox,\r\n  Toggle,\r\n} from '@app/controls';\r\nimport { Icons } from '@app/models';\r\nimport { UserCardGroup } from '@app/pages';\r\nimport { AuthenticationService } from '@app/pages/auth/auth.service';\r\nimport { UserCardGroupService } from './user-card-group.services';\r\n\r\n@Component({\r\n  selector: 'user-card-group',\r\n  templateUrl: 'user-card-group.component.html',\r\n  styleUrls: ['./user-card-group.component.scss'],\r\n})\r\nexport class UserCardGroupComponent implements OnInit {\r\n  form: FormGroup;\r\n  textboxName: Textbox;\r\n  selectType: Select;\r\n  textareaDescription: Textarea;\r\n  togglePublic: Toggle;\r\n  buttonSave: Button;\r\n  buttonCancel: Button;\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private authenticationService: AuthenticationService,\r\n    private router: Router,\r\n    private userCardGroupService: UserCardGroupService\r\n  ) {\r\n    if (!this.authenticationService.currentUserValue) {\r\n      this.router.navigateByUrl('/');\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.setupSubscriptions();\r\n    this.setupControls();\r\n  }\r\n\r\n  setupSubscriptions() {\r\n    this.userCardGroupService\r\n      .addUserCardGroupObservable()\r\n      .subscribe((userCardGroup) => {\r\n        if (userCardGroup) {\r\n          this.router.navigateByUrl('/collection/dashboard');\r\n        }\r\n      });\r\n  }\r\n\r\n  setupControls() {\r\n    this.form = this.formBuilder.group({\r\n      nameControl: ['', Validators.required],\r\n      selectType: ['', Validators.required],\r\n      selectIcon: [''],\r\n      descriptionControl: [''],\r\n      publicControl: [''],\r\n    });\r\n    this.textboxName = new Textbox({\r\n      label: 'Name',\r\n    });\r\n    this.selectType = new Select({\r\n      label: 'Type',\r\n      advancedSelect: true,\r\n      multiple: false,\r\n      placeholder: 'Select type...',\r\n      options: [\r\n        new SelectOption({\r\n          text: 'Binder',\r\n          icon: Icons.binder,\r\n          value: 'binder',\r\n        }),\r\n        new SelectOption({\r\n          text: 'Deck',\r\n          icon: Icons.deck,\r\n          value: 'deck',\r\n        }),\r\n        new SelectOption({\r\n          text: 'Trades',\r\n          icon: Icons.exchange,\r\n          value: 'trades',\r\n        }),\r\n        new SelectOption({\r\n          text: 'Box',\r\n          icon: Icons.archive,\r\n          value: 'box',\r\n        }),\r\n        new SelectOption({\r\n          text: 'Group',\r\n          icon: Icons.folder,\r\n          value: 'group',\r\n        }),\r\n      ],\r\n    });\r\n    this.textareaDescription = new Textarea({\r\n      label: 'Description',\r\n    });\r\n    this.togglePublic = new Toggle({\r\n      text: 'Private',\r\n      textChecked: 'Public',\r\n    });\r\n    this.buttonSave = new Button({\r\n      text: 'Save',\r\n      type: ButtonType.submit,\r\n    });\r\n    this.buttonCancel = new Button({\r\n      text: 'Cancel',\r\n      classes: 'secondary',\r\n      route: '/collection/dashboard',\r\n    });\r\n  }\r\n\r\n  submit() {\r\n    if (this.form.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.userCardGroupService.addUserCardGroup(\r\n      new UserCardGroup({\r\n        name: this.form.controls['nameControl'].value,\r\n        type: this.form.controls['selectType'].value,\r\n        description: this.form.controls['descriptionControl'].value,\r\n        public: this.form.controls['publicControl'].value,\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./user-card-group.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userCardGroupService",
                        "type": "UserCardGroupService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userCardGroupService",
                        "type": "UserCardGroupService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"flex justify-center\">\r\n  <form\r\n    class=\"padding-4\"\r\n    style=\"width: 500px; max-width: 100%\"\r\n    [formGroup]=\"form\"\r\n    (ngSubmit)=\"submit()\"\r\n  >\r\n    <div class=\"flex vertical padded-2\">\r\n      <div>\r\n        <h1>Add Group</h1>\r\n      </div>\r\n      <div>\r\n        <textbox\r\n          [textbox]=\"textboxName\"\r\n          formControlName=\"nameControl\"\r\n        ></textbox>\r\n      </div>\r\n      <div class=\"relative z-3\">\r\n        <app-select\r\n          [select]=\"selectType\"\r\n          formControlName=\"selectType\"\r\n        ></app-select>\r\n      </div>\r\n      <div class=\"relative z-1\">\r\n        <app-textarea\r\n          [textarea]=\"textareaDescription\"\r\n          formControlName=\"descriptionControl\"\r\n        ></app-textarea>\r\n      </div>\r\n      <div class=\"relative z-1\">\r\n        <toggle\r\n          [toggle]=\"togglePublic\"\r\n          formControlName=\"publicControl\"\r\n        ></toggle>\r\n      </div>\r\n      <div>\r\n        <div class=\"flex\">\r\n          <div class=\"box\">\r\n            <app-button [button]=\"buttonCancel\"></app-button>\r\n          </div>\r\n          <div>\r\n            <app-button [button]=\"buttonSave\"></app-button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n"
        },
        {
            "name": "UserCardNotesDialogComponent",
            "id": "component-UserCardNotesDialogComponent-17cb1fa5d2976d8f212047a3fb93435529aeeaa618c988ed93b6e14fce53489ddc76843962eca6b0c0219191cb00f41ef8d2e20e69ea946ce38281fe3fb57e21",
            "file": "src/app/pages/collection/user-cards/user-card/user-card-notes-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "user-card-notes-dialog",
            "styleUrls": [],
            "styles": [],
            "template": "<app-form [form]=\"form\"></app-form>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogConfig",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogRef",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Form",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "formNotes",
                    "defaultValue": "this.formBuilder.group({\r\n    notesControl: [''],\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { Form, FormControl, FormControlGroup, Textarea } from '@app/controls';\r\nimport { DialogConfig, DialogRef } from '@app/controls/dialog';\r\n\r\n@Component({\r\n  selector: 'user-card-notes-dialog',\r\n  template: `<app-form [form]=\"form\"></app-form>`,\r\n})\r\nexport class UserCardNotesDialogComponent {\r\n  formNotes: FormGroup = this.formBuilder.group({\r\n    notesControl: [''],\r\n  });\r\n  public form: Form;\r\n  constructor(\r\n    public config: DialogConfig,\r\n    public dialog: DialogRef,\r\n    private formBuilder: FormBuilder\r\n  ) {\r\n    this.form = new Form({\r\n      formGroup: this.formNotes,\r\n      groups: [\r\n        new FormControlGroup({\r\n          controls: [\r\n            new FormControl({\r\n              formControlName: 'notesControl',\r\n              control: new Textarea({}),\r\n            }),\r\n          ],\r\n        }),\r\n      ],\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "DialogConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "DialogRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "DialogConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "DialogRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "UserCardsComponent",
            "id": "component-UserCardsComponent-30fb6800d343e7bb05e59879592fa30ccd94e24c9e391bfb9273cd16ac833ff4371c3ad4295e1294149b4d6f1059d59c022f3687ed61b99ac170405b2aa5d9f0",
            "file": "src/app/pages/collection/user-cards/user-cards.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "user-cards",
            "styleUrls": [
                "./user-cards.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-cards.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "card_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "userCards",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "UserCard[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonAdd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "buttonDelete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "buttonNotes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "buttonViewAll",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Button",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "checkboxWishList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Checkbox",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "empty",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Empty",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "userCardGroups",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserCardGroup[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "addItem",
                    "args": [
                        {
                            "name": "userCard",
                            "type": "UserCard",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "new UserCard({\r\n      card_id: this.card_id,\r\n    })"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userCard",
                            "type": "UserCard",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "new UserCard({\r\n      card_id: this.card_id,\r\n    })",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteItem",
                    "args": [
                        {
                            "name": "userCard",
                            "type": "UserCard",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userCard",
                            "type": "UserCard",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateItem",
                    "args": [
                        {
                            "name": "userCard",
                            "type": "UserCard",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userCard",
                            "type": "UserCard",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { Button, Checkbox, Empty } from '@app/controls';\r\nimport { APIGetPaged, Icons } from '@app/models';\r\nimport { AuthenticationService } from '@app/pages/auth/auth.service';\r\nimport { UserCardGroup, UserCardsService, UserCard } from '.';\r\nimport { UserCardGroupService } from './../user-card-group/user-card-group.services';\r\n\r\n@Component({\r\n  selector: 'user-cards',\r\n  templateUrl: './user-cards.component.html',\r\n  styleUrls: ['./user-cards.component.scss'],\r\n})\r\nexport class UserCardsComponent implements OnInit {\r\n  @Input() card_id: number;\r\n  @Input() userCards: UserCard[] = [];\r\n  buttonAdd: Button;\r\n  checkboxWishList: Checkbox;\r\n  buttonViewAll: Button;\r\n  empty: Empty;\r\n  buttonNotes: Button;\r\n  buttonDelete: Button;\r\n  userCardGroups: UserCardGroup[];\r\n\r\n  constructor(\r\n    private userCardsService: UserCardsService,\r\n    private userCardGroupService: UserCardGroupService,\r\n    private authenticationService: AuthenticationService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.setupControls();\r\n    this.setupSubscriptions();\r\n\r\n    this.userCardGroupService.getUserCardGroups(\r\n      new APIGetPaged({\r\n        user_id: this.authenticationService.currentUserValue?.id,\r\n        page_size: 100,\r\n      })\r\n    );\r\n  }\r\n\r\n  setupControls() {\r\n    this.empty = new Empty({\r\n      text: 'This card is not in your collection',\r\n      icon: Icons.box,\r\n      button: new Button({\r\n        text: 'Add to Collection',\r\n        icon: Icons.plus,\r\n        click: () => {\r\n          this.addItem();\r\n        },\r\n      }),\r\n    });\r\n\r\n    // Button add\r\n    this.buttonAdd = new Button({\r\n      text: 'Add to Collection',\r\n      icon: Icons.plus,\r\n      classes: 'secondary',\r\n      click: () => {\r\n        this.addItem();\r\n      },\r\n    });\r\n\r\n    // Button view all\r\n    this.buttonViewAll = new Button({\r\n      text: 'View Collection',\r\n      icon: Icons.externalLink,\r\n    });\r\n\r\n    // Header buttons for spacing\r\n    this.buttonNotes = new Button({\r\n      text: 'Notes',\r\n      icon: Icons.stickyNote,\r\n    });\r\n    this.buttonDelete = new Button({\r\n      text: 'Remove',\r\n      icon: Icons.trash,\r\n    });\r\n\r\n    // Checkbox wish list\r\n    this.checkboxWishList = new Checkbox({\r\n      text: 'Wishlist',\r\n    });\r\n  }\r\n\r\n  setupSubscriptions() {\r\n    this.userCardsService.addUserCardObservable().subscribe((addedCard) => {\r\n      if (addedCard) {\r\n        this.userCards.push(addedCard);\r\n      }\r\n    });\r\n    this.userCardGroupService.getUserCardGroupsObservable().subscribe((res) => {\r\n      if (res) {\r\n        this.userCardGroups = res.user_card_groups;\r\n      }\r\n    });\r\n  }\r\n\r\n  addItem(\r\n    userCard: UserCard = new UserCard({\r\n      card_id: this.card_id,\r\n    })\r\n  ) {\r\n    this.userCardsService.addUserCard(userCard);\r\n  }\r\n\r\n  deleteItem(userCard: UserCard) {\r\n    this.userCardsService.removeUserCard(userCard.id).subscribe((res) => {\r\n      if (res.success)\r\n        this.userCards = this.userCards.filter(\r\n          (_userCard) => _userCard.id !== userCard.id\r\n        );\r\n    });\r\n  }\r\n\r\n  updateItem(userCard: UserCard) {\r\n    this.userCardsService.updateUserCard(userCard).subscribe((res) => {\r\n      if (res.success)\r\n        this.userCards = this.userCards.map((_userCard) =>\r\n          _userCard.id === userCard.id ? userCard : _userCard\r\n        );\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./user-cards.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userCardsService",
                        "type": "UserCardsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userCardGroupService",
                        "type": "UserCardGroupService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "userCardsService",
                        "type": "UserCardsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userCardGroupService",
                        "type": "UserCardGroupService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "AuthenticationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"padding-2 border-bottom\">\r\n  <div class=\"max\">\r\n    <div class=\"flex padded flex-center\">\r\n      <div class=\"box\">\r\n        <h2><a [routerLink]=\"\">Collection</a></h2>\r\n      </div>\r\n      <div>\r\n        <checkbox [checkbox]=\"checkboxWishList\"></checkbox>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div class=\"padding-y padding-x-2 padding-bottom-4\">\r\n  <div class=\"max\">\r\n    <div class=\"flex padded vertical\">\r\n      <div class=\"width-12 subheading\" *ngIf=\"userCards.length\">\r\n        <div class=\"flex\">\r\n          <div class=\"box\">\r\n            <div class=\"flex\">\r\n              <div class=\"box\">\r\n                <div class=\"flex\">\r\n                  <div class=\"width-3\">Condition</div>\r\n                  <div class=\"width-3\">Graded By</div>\r\n                  <div class=\"width-3\">Printing</div>\r\n                  <div class=\"width-3\">Group</div>\r\n                </div>\r\n              </div>\r\n              <div style=\"height: 0\" class=\"small-none\">\r\n                <app-button class=\"hidden\" [button]=\"buttonNotes\"></app-button>\r\n              </div>\r\n              <div style=\"height: 0\" class=\"small-none\">\r\n                <app-button class=\"hidden\" [button]=\"buttonDelete\"></app-button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"flex padded-large vertical\">\r\n        <user-card\r\n          class=\"box\"\r\n          *ngFor=\"let userCard of userCards\"\r\n          [item]=\"userCard\"\r\n          (deleted)=\"deleteItem(userCard)\"\r\n          (updated)=\"updateItem($event)\"\r\n          [userCardGroups]=\"userCardGroups\"\r\n        >\r\n        </user-card>\r\n      </div>\r\n      <empty *ngIf=\"userCards.length === 0\" [empty]=\"empty\"></empty>\r\n      <div class=\"width-12\" *ngIf=\"userCards.length\">\r\n        <div class=\"border-top padding-top\">\r\n          <div class=\"flex padded flex-center\">\r\n            <div class=\"box\"></div>\r\n            <div>\r\n              <app-button [button]=\"buttonAdd\"></app-button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "UserComponent",
            "id": "component-UserComponent-06a863ca1736fe5e2473931bb0b932a640efdabe8e3f24f349a35f645bb30239368b1f0f9e7cb24703ca6673198656e16af4b14daefb14cebf9e17cc10568dc1",
            "file": "src/app/pages/user/user.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "user",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./user.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'user',\r\n  templateUrl: './user.component.html',\r\n})\r\nexport class UserComponent implements OnInit {\r\n  constructor() {}\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>USER HERE!</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-b50ec9020bebd647cb001c930b896fc76447588df80b394f77ef170ecee3b7063815553c89a6e163774ec9acfd653dcb4a073b8daf322ce490e36534142b9033",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "// Angular\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { DatePipe } from '@angular/common';\n\n// Third party\nimport { CKEditorModule } from '@ckeditor/ckeditor5-angular';\nimport {\n  FontAwesomeModule,\n  FaIconLibrary,\n  FaConfig,\n} from '@fortawesome/angular-fontawesome';\nimport { InlineSVGModule } from 'ng-inline-svg-2';\nimport { ColorPickerModule } from 'ngx-color-picker';\nimport { WebcamModule } from 'ngx-webcam';\n\n// App\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\n// Controls\nimport {\n  AlertComponent,\n  CheckboxComponent,\n  EditorComponent,\n  FormComponent,\n  FormGroupComponent,\n  FormControlComponent,\n  LoaderComponent,\n  MenuComponent,\n  NotificationsComponent,\n  SelectComponent,\n  TagComponent,\n  TextareaComponent,\n  TextboxComponent,\n  ToggleComponent,\n  ProgressBarComponent,\n  TypeTagComponent,\n  EmptyComponent,\n  HeroComponent,\n  DialogModule,\n  ButtonComponent,\n} from './controls';\n\n// Pages\nimport {\n  SignInComponent,\n  SignUpComponent,\n  ForgotComponent,\n  ResetComponent,\n  CardsComponent,\n  CardComponent,\n  CardItemGridComponent,\n  CardItemListComponent,\n  HomeComponent,\n  ScannerComponent,\n  ScannerListsComponent,\n  ScannerListComponent,\n  ExpansionsComponent,\n  ExpansionComponent,\n  ExpansionItemGridComponent,\n  ExpansionItemListComponent,\n  PokemonsComponent,\n  PokemonItemGridComponent,\n  PokmeonItemListComponent,\n  PokemonComponent,\n  CollectionComponent,\n  DashboardComponent,\n  UserCardGroupComponent,\n  UserCardsComponent,\n  UserCardComponent,\n  EditUserComponent,\n  CardImageDialogComponent,\n  UserCardNotesDialogComponent,\n  ChangePasswordDialogComponent,\n} from './pages';\n\n// Page\nimport {\n  FooterComponent,\n  HeaderComponent,\n  ProfileComponent,\n  SearchComponent,\n  ItemsComponent,\n  ItemsHeaderComponent,\n  ItemsFilterComponent,\n  ItemsFooterComponent,\n  ItemsGridComponent,\n  ItemsListComponent,\n  ItemsGroupsComponent,\n} from './layout';\n\n// Helpers\nimport {\n  ErrorIntercept,\n  JwtInterceptor,\n  ClickOutsideDirective,\n} from './helpers';\n\n// Icons\nimport {\n  faSearch,\n  faList,\n  faArchive,\n  faBookSpells,\n  faChartLine,\n  faUser,\n  faCrown,\n  faLightSwitchOn,\n  faCog,\n  faBox,\n  faFolders,\n  faUsers,\n  faEllipsisV,\n  faArrowUp,\n  faArrowDown,\n  faHorizontalRule,\n  faTrash,\n  faPalette,\n  faCrosshairs,\n  faHistory,\n  faExternalLink,\n  faDollarSign,\n  faAngleLeft,\n  faAngleRight,\n  faArrowLeft,\n  faArrowRight,\n  faCaretUp,\n  faCaretRight,\n  faCaretDown,\n  faCaretLeft,\n  faSignIn,\n  faPlus,\n  faSignOut,\n  faUserPlus,\n  faTh,\n  faVideo,\n  faCamera,\n  faBringFront,\n  faSync,\n  faPlay,\n  faStop,\n  faPause,\n  faDonate,\n  faTachometer,\n  faCheck,\n  faInfo,\n  faExclamationTriangle,\n  faTimesOctagon,\n  faTimes,\n  faLayerGroup,\n  faRectanglePortrait,\n  faAlbumCollection,\n  faShoppingCart,\n  faGavel,\n  faBalanceScale,\n  faSave,\n  faLineColumns,\n  faShieldAlt,\n  faSwords,\n  faAlignLeft,\n  faEye,\n  faRepeat,\n  faUndo,\n  faArrowToTop,\n  faArrowToBottom,\n  faRandom,\n  faHandHoldingMedical,\n  faTombstoneAlt,\n  faLevelUp,\n  faLevelDown,\n  faSortSizeUp,\n  faSortSizeDownAlt,\n  faSortAlt,\n  faDiceThree,\n  faDice,\n  faExclamationCircle,\n  faThumbsUp,\n  faExclamation,\n  faCoin,\n  faForward,\n  faHourglassStart,\n  faHourglassEnd,\n  faKeyboard,\n  faDiceD4,\n  faDiceD6,\n  faDiceD10,\n  faDiceD12,\n  faDiceD20,\n  faDiceD8,\n  faClone,\n  faFlaskPotion,\n  faFolder,\n  faEdit,\n  faAngleUp,\n  faAngleDown,\n  faMinus,\n  faCompress,\n  faExpand,\n  faLock,\n  faLockOpen,\n  faImage,\n  faPawClaws,\n  faTrophy,\n  faBolt,\n  faMagic,\n  faMountains,\n  faEclipse,\n  faHoodCloak,\n  faDragon,\n  faTools,\n  faToolbox,\n  faHeart,\n  faHeartbeat,\n  faThunderstorm,\n  faNewspaper,\n  faSparkles,\n  faQuestion,\n  faBars,\n  faHouse,\n  faCopy,\n  faExpandArrowsAlt,\n  faOtter,\n  faDotCircle,\n  faInfoCircle,\n  faBrush,\n  faPaintBrush,\n  faHashtag,\n  faBookOpen,\n  faInbox,\n  faExchange,\n  faStickyNote,\n  faStar,\n} from '@fortawesome/pro-duotone-svg-icons';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n\n    // Controls\n    // ====================\n    MenuComponent,\n    CheckboxComponent,\n    LoaderComponent,\n    SelectComponent,\n    TextboxComponent,\n    TextareaComponent,\n    NotificationsComponent,\n    FormComponent,\n    FormGroupComponent,\n    FormControlComponent,\n    EditorComponent,\n    ToggleComponent,\n    TagComponent,\n    AlertComponent,\n    ProgressBarComponent,\n    TypeTagComponent,\n    EmptyComponent,\n    HeroComponent,\n    ButtonComponent,\n\n    // Page\n    // ====================\n    HeaderComponent,\n    SearchComponent,\n    ProfileComponent,\n    FooterComponent,\n    ItemsComponent,\n    ItemsHeaderComponent,\n    ItemsFilterComponent,\n    ItemsFooterComponent,\n    ItemsGridComponent,\n    ItemsListComponent,\n    ItemsGroupsComponent,\n    UserCardGroupComponent,\n    DashboardComponent,\n    CardImageDialogComponent,\n    UserCardNotesDialogComponent,\n    ChangePasswordDialogComponent,\n\n    // Pages\n    // ====================\n    HomeComponent,\n    CardsComponent,\n    CardItemGridComponent,\n    CardItemListComponent,\n    CardComponent,\n    SignInComponent,\n    SignUpComponent,\n    ForgotComponent,\n    ResetComponent,\n    EditUserComponent,\n    ExpansionsComponent,\n    ExpansionItemGridComponent,\n    ExpansionItemListComponent,\n    ExpansionComponent,\n    PokemonsComponent,\n    PokemonItemGridComponent,\n    PokmeonItemListComponent,\n    PokemonComponent,\n    ProfileComponent,\n    UserCardComponent,\n    UserCardsComponent,\n    CollectionComponent,\n    ScannerComponent,\n    ScannerListsComponent,\n\n    // Helpers\n    ClickOutsideDirective,\n  ],\n  imports: [\n    BrowserModule,\n    DialogModule,\n    CommonModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FormsModule,\n    FontAwesomeModule,\n    ReactiveFormsModule,\n    CKEditorModule,\n    ColorPickerModule,\n    WebcamModule,\n    InlineSVGModule.forRoot(),\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: JwtInterceptor,\n      multi: true,\n    },\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: ErrorIntercept,\n      multi: true,\n    },\n    DatePipe,\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {\n  constructor(private library: FaIconLibrary, private faConfig: FaConfig) {\n    library.addIcons(\n      faSearch,\n      faList,\n      faArchive,\n      faBookSpells,\n      faChartLine,\n      faUser,\n      faCrown,\n      faLightSwitchOn,\n      faCog,\n      faBox,\n      faFolders,\n      faUsers,\n      faEllipsisV,\n      faArrowUp,\n      faArrowDown,\n      faHorizontalRule,\n      faTrash,\n      faPalette,\n      faCrosshairs,\n      faHistory,\n      faExternalLink,\n      faDollarSign,\n      faCog,\n      faAngleLeft,\n      faAngleRight,\n      faArrowLeft,\n      faArrowRight,\n      faCaretUp,\n      faCaretRight,\n      faCaretDown,\n      faCaretLeft,\n      faSignIn,\n      faSignOut,\n      faPlus,\n      faUserPlus,\n      faTh,\n      faCamera,\n      faVideo,\n      faBringFront,\n      faSync,\n      faPlay,\n      faPause,\n      faStop,\n      faDonate,\n      faTachometer,\n      faCheck,\n      faInfo,\n      faExclamationTriangle,\n      faTimesOctagon,\n      faTimes,\n      faLayerGroup,\n      faRectanglePortrait,\n      faAlbumCollection,\n      faShoppingCart,\n      faGavel,\n      faBalanceScale,\n      faSave,\n      faLineColumns,\n      faShieldAlt,\n      faPalette,\n      faSwords,\n      faAlignLeft,\n      faEye,\n      faRepeat,\n      faUndo,\n      faArrowToTop,\n      faArrowToBottom,\n      faRandom,\n      faHandHoldingMedical,\n      faTombstoneAlt,\n      faLevelUp,\n      faLevelDown,\n      faSwords,\n      faSortSizeUp,\n      faSortSizeDownAlt,\n      faSortAlt,\n      faDiceThree,\n      faDice,\n      faDiceD4,\n      faDiceD6,\n      faDiceD8,\n      faDiceD10,\n      faDiceD12,\n      faDiceD20,\n      faExclamationCircle,\n      faThumbsUp,\n      faExclamation,\n      faCoin,\n      faForward,\n      faHourglassStart,\n      faHourglassEnd,\n      faKeyboard,\n      faClone,\n      faFlaskPotion,\n      faFolder,\n      faEdit,\n      faAngleUp,\n      faAngleRight,\n      faAngleDown,\n      faAngleLeft,\n      faMinus,\n      faExpand,\n      faCompress,\n      faLock,\n      faLockOpen,\n      faImage,\n      faPawClaws,\n      faTrophy,\n      faBolt,\n      faMagic,\n      faMountains,\n      faEclipse,\n      faHoodCloak,\n      faDragon,\n      faTools,\n      faToolbox,\n      faHeart,\n      faHeartbeat,\n      faThunderstorm,\n      faNewspaper,\n      faSparkles,\n      faQuestion,\n      faBars,\n      faHouse,\n      faCopy,\n      faExpandArrowsAlt,\n      faOtter,\n      faDotCircle,\n      faBox,\n      faAlignLeft,\n      faInfoCircle,\n      faDollarSign,\n      faBrush,\n      faPaintBrush,\n      faHashtag,\n      faBookOpen,\n      faInbox,\n      faBalanceScale,\n      faExchange,\n      faStickyNote,\n      faStar\n    );\n    faConfig.defaultPrefix = 'fad';\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ErrorIntercept"
                        },
                        {
                            "name": "JwtInterceptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AlertComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "CardComponent"
                        },
                        {
                            "name": "CardImageDialogComponent"
                        },
                        {
                            "name": "CardItemGridComponent"
                        },
                        {
                            "name": "CardItemListComponent"
                        },
                        {
                            "name": "CardsComponent"
                        },
                        {
                            "name": "ChangePasswordDialogComponent"
                        },
                        {
                            "name": "CheckboxComponent"
                        },
                        {
                            "name": "ClickOutsideDirective"
                        },
                        {
                            "name": "CollectionComponent"
                        },
                        {
                            "name": "DashboardComponent"
                        },
                        {
                            "name": "EditUserComponent"
                        },
                        {
                            "name": "EditorComponent"
                        },
                        {
                            "name": "EmptyComponent"
                        },
                        {
                            "name": "ExpansionComponent"
                        },
                        {
                            "name": "ExpansionItemGridComponent"
                        },
                        {
                            "name": "ExpansionItemListComponent"
                        },
                        {
                            "name": "ExpansionsComponent"
                        },
                        {
                            "name": "FooterComponent"
                        },
                        {
                            "name": "ForgotComponent"
                        },
                        {
                            "name": "FormComponent"
                        },
                        {
                            "name": "FormControlComponent"
                        },
                        {
                            "name": "FormGroupComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "HeroComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "ItemsComponent"
                        },
                        {
                            "name": "ItemsFilterComponent"
                        },
                        {
                            "name": "ItemsFooterComponent"
                        },
                        {
                            "name": "ItemsGridComponent"
                        },
                        {
                            "name": "ItemsGroupsComponent"
                        },
                        {
                            "name": "ItemsHeaderComponent"
                        },
                        {
                            "name": "ItemsListComponent"
                        },
                        {
                            "name": "LoaderComponent"
                        },
                        {
                            "name": "MenuComponent"
                        },
                        {
                            "name": "NotificationsComponent"
                        },
                        {
                            "name": "PokemonComponent"
                        },
                        {
                            "name": "PokemonItemGridComponent"
                        },
                        {
                            "name": "PokemonsComponent"
                        },
                        {
                            "name": "PokmeonItemListComponent"
                        },
                        {
                            "name": "ProfileComponent"
                        },
                        {
                            "name": "ProfileComponent"
                        },
                        {
                            "name": "ProgressBarComponent"
                        },
                        {
                            "name": "ResetComponent"
                        },
                        {
                            "name": "ScannerComponent"
                        },
                        {
                            "name": "ScannerListsComponent"
                        },
                        {
                            "name": "SearchComponent"
                        },
                        {
                            "name": "SelectComponent"
                        },
                        {
                            "name": "SignInComponent"
                        },
                        {
                            "name": "SignUpComponent"
                        },
                        {
                            "name": "TagComponent"
                        },
                        {
                            "name": "TextareaComponent"
                        },
                        {
                            "name": "TextboxComponent"
                        },
                        {
                            "name": "ToggleComponent"
                        },
                        {
                            "name": "TypeTagComponent"
                        },
                        {
                            "name": "UserCardComponent"
                        },
                        {
                            "name": "UserCardGroupComponent"
                        },
                        {
                            "name": "UserCardNotesDialogComponent"
                        },
                        {
                            "name": "UserCardsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "DialogModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-6d48c7a573f259db4639e84f8c690564368e26d4b7aaf74c8234f47a6819f62bcc3b5611d21a08f7965a06c7ef5e4d5ab05338fecb385e4100ff0ce6b1b4acf4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { EditUserComponent } from '@app/pages';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n// Pages\nimport {\n  CardComponent,\n  CardsComponent,\n  HomeComponent,\n  ExpansionsComponent,\n  ExpansionComponent,\n  ScannerComponent,\n  ScannerListsComponent,\n  ScannerListComponent,\n  PokemonsComponent,\n  PokemonComponent,\n  CollectionComponent,\n  SignInComponent,\n  SignUpComponent,\n  ForgotComponent,\n  ResetComponent,\n} from '@app/pages';\n\nconst routes: Routes = [\n  // Home\n  {\n    path: '',\n    component: HomeComponent,\n    data: {\n      transparentHeader: true,\n    },\n  },\n\n  // Cards\n  {\n    path: 'cards',\n    //canActivate: [AuthGuard],\n    component: CardsComponent,\n  },\n  {\n    path: 'cards/:slug',\n    component: CardComponent,\n  },\n  {\n    path: 'cards/types/:type',\n    component: CardsComponent,\n  },\n  {\n    path: 'cards/rarity/:rarity',\n    component: CardsComponent,\n  },\n  {\n    path: 'cards/artists/:artist',\n    component: CardsComponent,\n  },\n  {\n    path: 'cards/supertype/:supertype',\n    component: CardsComponent,\n  },\n  {\n    path: 'cards/subtype/:subtype',\n    component: CardsComponent,\n  },\n\n  // Collection\n  {\n    path: 'collection',\n    component: CollectionComponent,\n  },\n  {\n    path: 'collection/dashboard',\n    component: CollectionComponent,\n  },\n  {\n    path: 'collection/wishlist',\n    component: CollectionComponent,\n  },\n  {\n    path: 'collection/add',\n    component: CollectionComponent,\n  },\n  {\n    path: 'collection/:id',\n    component: CollectionComponent,\n  },\n\n  // Scanner\n  // {\n  // \tpath: 'scanner',\n  // \tcomponent: ScannerComponent,\n  // },\n  // {\n  // \tpath: 'scanner/lists',\n  // \tcomponent: ScannerListsComponent,\n  // },\n  // {\n  // \tpath: 'scanner/lists/:id',\n  // \tcomponent: ScannerListComponent,\n  // },\n\n  // Auth\n  {\n    path: 'signin',\n    component: SignInComponent,\n  },\n  {\n    path: 'signup',\n    component: SignUpComponent,\n  },\n  {\n    path: 'forgot',\n    component: ForgotComponent,\n  },\n  {\n    path: 'reset/:token',\n    component: ResetComponent,\n  },\n\n  // Edit profile\n  // {\n  //   path: 'profile/:name',\n  //   component: ProfileComponent,\n  // },\n  {\n    path: 'profile/edit',\n    component: EditUserComponent,\n  },\n\n  // Expansions\n  {\n    path: 'expansions',\n    component: ExpansionsComponent,\n  },\n  {\n    path: 'expansions/:code',\n    component: ExpansionComponent,\n  },\n\n  // Pokemon\n  {\n    path: 'pokemon',\n    component: PokemonsComponent,\n  },\n  {\n    path: 'pokemon/:slug',\n    component: PokemonComponent,\n  },\n  {\n    path: 'pokemon/type/:type',\n    component: PokemonsComponent,\n  },\n\n  // otherwise redirect to home\n  {\n    path: '**',\n    redirectTo: '',\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-0c79baa5cf3fa3438be96b3db6df5da4bac27657239beb6ee697a9baa08d248b7b4a0e70a5b8e48aa2c8a7b72c91ec56edb1d344fe0dec826741f4b443eac221-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/helpers/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { EditUserComponent } from '@app/pages/user';\r\nimport { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { AuthGuard } from './auth.guard';\r\n\r\n// Pages\r\nimport {\r\n  CardComponent,\r\n  CardsComponent,\r\n  HomeComponent,\r\n  ExpansionsComponent,\r\n  ExpansionComponent,\r\n  ScannerComponent,\r\n  ScannerListsComponent,\r\n  ScannerListComponent,\r\n  PokemonsComponent,\r\n  PokemonComponent,\r\n  CollectionComponent,\r\n  SignInComponent,\r\n  SignUpComponent,\r\n  ForgotComponent,\r\n  ResetComponent,\r\n} from '../pages';\r\n\r\nconst routes: Routes = [\r\n  // Home\r\n  {\r\n    path: '',\r\n    component: HomeComponent,\r\n    data: {\r\n      transparentHeader: true,\r\n    },\r\n  },\r\n\r\n  // Cards\r\n  {\r\n    path: 'cards',\r\n    //canActivate: [AuthGuard],\r\n    component: CardsComponent,\r\n  },\r\n  {\r\n    path: 'cards/:slug',\r\n    component: CardComponent,\r\n  },\r\n  {\r\n    path: 'cards/types/:type',\r\n    component: CardsComponent,\r\n  },\r\n  {\r\n    path: 'cards/rarity/:rarity',\r\n    component: CardsComponent,\r\n  },\r\n  {\r\n    path: 'cards/artists/:artist',\r\n    component: CardsComponent,\r\n  },\r\n  {\r\n    path: 'cards/supertype/:supertype',\r\n    component: CardsComponent,\r\n  },\r\n  {\r\n    path: 'cards/subtype/:subtype',\r\n    component: CardsComponent,\r\n  },\r\n\r\n  // Collection\r\n  {\r\n    path: 'collection/dashboard',\r\n    component: CollectionComponent,\r\n  },\r\n  {\r\n    path: 'collection',\r\n    component: CollectionComponent,\r\n  },\r\n  {\r\n    path: 'collection/add',\r\n    component: CollectionComponent,\r\n  },\r\n\r\n  // Scanner\r\n  // {\r\n  // \tpath: 'scanner',\r\n  // \tcomponent: ScannerComponent,\r\n  // },\r\n  // {\r\n  // \tpath: 'scanner/lists',\r\n  // \tcomponent: ScannerListsComponent,\r\n  // },\r\n  // {\r\n  // \tpath: 'scanner/lists/:id',\r\n  // \tcomponent: ScannerListComponent,\r\n  // },\r\n\r\n  // Auth\r\n  {\r\n    path: 'signin',\r\n    component: SignInComponent,\r\n  },\r\n  {\r\n    path: 'signup',\r\n    component: SignUpComponent,\r\n  },\r\n  {\r\n    path: 'forgot',\r\n    component: ForgotComponent,\r\n  },\r\n  {\r\n    path: 'reset/:token',\r\n    component: ResetComponent,\r\n  },\r\n\r\n  // Edit profile\r\n  {\r\n    path: 'profile',\r\n    component: EditUserComponent,\r\n  },\r\n  {\r\n    path: 'profile/edit',\r\n    component: EditUserComponent,\r\n  },\r\n\r\n  // Expansions\r\n  {\r\n    path: 'expansions',\r\n    component: ExpansionsComponent,\r\n  },\r\n  {\r\n    path: 'expansions/:code',\r\n    component: ExpansionComponent,\r\n  },\r\n\r\n  // Pokemon\r\n  {\r\n    path: 'pokemon',\r\n    component: PokemonsComponent,\r\n  },\r\n  {\r\n    path: 'pokemon/:slug',\r\n    component: PokemonComponent,\r\n  },\r\n  {\r\n    path: 'pokemon/type/:type',\r\n    component: PokemonsComponent,\r\n  },\r\n\r\n  // otherwise redirect to home\r\n  {\r\n    path: '**',\r\n    redirectTo: '',\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DialogModule",
            "id": "module-DialogModule-f17f11203f9af4c6a6411ac044fb0c7596338b2f073c4dcb6e8b4c3240eea1c62f53195d00af2c754b59810ed7cfdea62ba4ae6d5695f7e568bd4d80ad54a35d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/controls/dialog/dialog.module.ts",
            "methods": [],
            "sourceCode": "import { InsertionDirective } from './insertion.directive';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { DialogComponent } from '.';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [DialogComponent, InsertionDirective],\r\n  entryComponents: [DialogComponent],\r\n})\r\nexport class DialogModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DialogComponent"
                        },
                        {
                            "name": "InsertionDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "buildUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/api.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(folder: string, queryString = '') => {\r\n  const apiUrl = 'https://api.rotomdex.app/api/';\r\n  return `${apiUrl}${folder}${queryString.length ? '?' + queryString : ''}`;\r\n}"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DEFAULT_IMAGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/cards/card/card.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'/assets/back.jpg'"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new Environment({\n  production: false,\n  api: 'https://api.rotomdex.app/api/',\n  images: 'https://images.rotomdex.app/',\n})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/controls/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/controls/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/controls/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/controls/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/controls/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\r\n  props: args,\r\n})"
            }
        ],
        "functions": [
            {
                "name": "GUID",
                "file": "src/app/helpers/guid.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "SetPageSize",
                "file": "src/app/pages/expansions/expansion/expansion.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "itemFooter",
                        "type": "ItemsFooter",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "itemFooter",
                        "type": "ItemsFooter",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "SetSortByCards",
                "file": "src/app/pages/cards/card/card.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "itemFilter",
                        "type": "ItemsFilter",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "itemFilter",
                        "type": "ItemsFilter",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "SetSortByExpansion",
                "file": "src/app/pages/expansions/expansion/expansion.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "itemFilter",
                        "type": "ItemsFilter",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "itemFilter",
                        "type": "ItemsFilter",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "SetSortByExpansions",
                "file": "src/app/pages/expansions/expansion/expansion.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "itemFilter",
                        "type": "ItemsFilter",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "itemFilter",
                        "type": "ItemsFilter",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "SetSortByPokemon",
                "file": "src/app/pages/pokemons/pokemon/pokemon.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "select",
                        "type": "Select",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "select",
                        "type": "Select",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [
            {
                "name": "AlertType",
                "childs": [
                    {
                        "name": "success",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "success"
                    },
                    {
                        "name": "info",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "info"
                    },
                    {
                        "name": "warning",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "warning"
                    },
                    {
                        "name": "error",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "error"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/controls/alert/alert.ts"
            },
            {
                "name": "ButtonType",
                "childs": [
                    {
                        "name": "button",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "button"
                    },
                    {
                        "name": "submit",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "submit"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/controls/button/button.ts"
            },
            {
                "name": "Condition",
                "childs": [
                    {
                        "name": "Mint",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Mint"
                    },
                    {
                        "name": "NearMint",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Near Mint"
                    },
                    {
                        "name": "LightlyPlayed",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Lightly Played"
                    },
                    {
                        "name": "ModeratelyPlayed",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Moderately Played"
                    },
                    {
                        "name": "HeavilyPlayed",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Heavily Played"
                    },
                    {
                        "name": "Damaged",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Damaged"
                    },
                    {
                        "name": "Misprint",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Misprint"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/condition.ts"
            },
            {
                "name": "ConditionGraded",
                "childs": [
                    {
                        "name": "Graded10",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 10"
                    },
                    {
                        "name": "Graded95",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 9.5"
                    },
                    {
                        "name": "Graded9",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 9"
                    },
                    {
                        "name": "Graded85",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 8.5"
                    },
                    {
                        "name": "Graded8",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 8"
                    },
                    {
                        "name": "Graded75",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 7.5"
                    },
                    {
                        "name": "Graded7",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 7"
                    },
                    {
                        "name": "Graded65",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 6.5"
                    },
                    {
                        "name": "Graded6",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 6"
                    },
                    {
                        "name": "Graded55",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 5.5"
                    },
                    {
                        "name": "Graded5",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 5"
                    },
                    {
                        "name": "Graded45",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 4.5"
                    },
                    {
                        "name": "Graded4",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 4"
                    },
                    {
                        "name": "Graded35",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 3.5"
                    },
                    {
                        "name": "Graded3",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 3"
                    },
                    {
                        "name": "Graded25",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 2.5"
                    },
                    {
                        "name": "Graded2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 2"
                    },
                    {
                        "name": "Graded15",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 1.5"
                    },
                    {
                        "name": "Graded1",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Graded 1"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/condition.ts"
            },
            {
                "name": "Corners",
                "childs": [
                    {
                        "name": "topRight",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Top Right"
                    },
                    {
                        "name": "topLeft",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Top Left"
                    },
                    {
                        "name": "bottomRight",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Bottom Right"
                    },
                    {
                        "name": "bottomLeft",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Bottom Left"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/sides.ts"
            },
            {
                "name": "GradingCompany",
                "childs": [
                    {
                        "name": "PSA",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "PSA"
                    },
                    {
                        "name": "BGS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "BGS"
                    },
                    {
                        "name": "CGC",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CGC"
                    },
                    {
                        "name": "SGC",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SGC"
                    },
                    {
                        "name": "GAI",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "GIA"
                    },
                    {
                        "name": "CCS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "CCS"
                    },
                    {
                        "name": "SCD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SCD"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/condition.ts"
            },
            {
                "name": "Icons",
                "childs": [
                    {
                        "name": "search",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "search"
                    },
                    {
                        "name": "list",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "list"
                    },
                    {
                        "name": "archive",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "archive"
                    },
                    {
                        "name": "deck",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "layer-group"
                    },
                    {
                        "name": "stats",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "chart-line"
                    },
                    {
                        "name": "user",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "user"
                    },
                    {
                        "name": "settings",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "cog"
                    },
                    {
                        "name": "signOut",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "sign-out"
                    },
                    {
                        "name": "binders",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "folders"
                    },
                    {
                        "name": "users",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "users"
                    },
                    {
                        "name": "ellipsisV",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ellipsis-v"
                    },
                    {
                        "name": "arrowUp",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "arrow-up"
                    },
                    {
                        "name": "arrowDown",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "arrow-down"
                    },
                    {
                        "name": "arrowLeft",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "arrow-left"
                    },
                    {
                        "name": "arrowRight",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "arrow-right"
                    },
                    {
                        "name": "caretUp",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "caret-up"
                    },
                    {
                        "name": "caretRight",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "caret-right"
                    },
                    {
                        "name": "caretDown",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "caret-down"
                    },
                    {
                        "name": "caretLeft",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "caret-left"
                    },
                    {
                        "name": "trash",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "trash"
                    },
                    {
                        "name": "theme",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "palette"
                    },
                    {
                        "name": "scanner",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "crosshairs"
                    },
                    {
                        "name": "history",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "history"
                    },
                    {
                        "name": "externalLink",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "external-link"
                    },
                    {
                        "name": "price",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dollar-sign"
                    },
                    {
                        "name": "signIn",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "sign-in"
                    },
                    {
                        "name": "plus",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "plus"
                    },
                    {
                        "name": "userPlus",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "user-plus"
                    },
                    {
                        "name": "grid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "th"
                    },
                    {
                        "name": "camera",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "camera"
                    },
                    {
                        "name": "video",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "video"
                    },
                    {
                        "name": "bringFront",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "bring-front"
                    },
                    {
                        "name": "sync",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "sync"
                    },
                    {
                        "name": "play",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "play"
                    },
                    {
                        "name": "stop",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "stop"
                    },
                    {
                        "name": "pause",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pause"
                    },
                    {
                        "name": "donate",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "donate"
                    },
                    {
                        "name": "dashboard",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "tachometer"
                    },
                    {
                        "name": "check",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "check"
                    },
                    {
                        "name": "info",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "info"
                    },
                    {
                        "name": "warning",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "exclamation-triangle"
                    },
                    {
                        "name": "error",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "times-octagon"
                    },
                    {
                        "name": "close",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "times"
                    },
                    {
                        "name": "cards",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "layer-group"
                    },
                    {
                        "name": "card",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "rectangle-portrait"
                    },
                    {
                        "name": "cart",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "shopping-cart"
                    },
                    {
                        "name": "scale",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "balance-scale"
                    },
                    {
                        "name": "judge",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "gavel"
                    },
                    {
                        "name": "save",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "save"
                    },
                    {
                        "name": "lineColumns",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "line-columns"
                    },
                    {
                        "name": "sets",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "shield-alt"
                    },
                    {
                        "name": "artists",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "palette"
                    },
                    {
                        "name": "formats",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "swords"
                    },
                    {
                        "name": "text",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "align-left"
                    },
                    {
                        "name": "eye",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "eye"
                    },
                    {
                        "name": "repeat",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "repeat"
                    },
                    {
                        "name": "tap",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "undo"
                    },
                    {
                        "name": "untap",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "undo"
                    },
                    {
                        "name": "top",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "arrow-to-top"
                    },
                    {
                        "name": "bottom",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "arrow-to-bottom"
                    },
                    {
                        "name": "shuffle",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "random"
                    },
                    {
                        "name": "hand",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "hand-holding-medical"
                    },
                    {
                        "name": "graveyard",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "tombstone-alt"
                    },
                    {
                        "name": "exile",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "times"
                    },
                    {
                        "name": "levelUp",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "level-up"
                    },
                    {
                        "name": "levelDown",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "level-down"
                    },
                    {
                        "name": "swords",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "swords"
                    },
                    {
                        "name": "sort",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "sort-alt"
                    },
                    {
                        "name": "moveForward",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "sort-size-up"
                    },
                    {
                        "name": "moveBackward",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "sort-size-down-alt"
                    },
                    {
                        "name": "moveTop",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "arrow-to-top"
                    },
                    {
                        "name": "moveBottom",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "arrow-to-bottom"
                    },
                    {
                        "name": "counters",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dice-three"
                    },
                    {
                        "name": "diceThree",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dice-three"
                    },
                    {
                        "name": "dice",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dice"
                    },
                    {
                        "name": "d4",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dice-d4"
                    },
                    {
                        "name": "d6",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dice-d6"
                    },
                    {
                        "name": "d8",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dice-d8"
                    },
                    {
                        "name": "d10",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dice-d10"
                    },
                    {
                        "name": "d12",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dice-d12"
                    },
                    {
                        "name": "d20",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dice-d20"
                    },
                    {
                        "name": "alert",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "exclamation"
                    },
                    {
                        "name": "thumbsUp",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "thumbs-up"
                    },
                    {
                        "name": "coin",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "coin"
                    },
                    {
                        "name": "pass",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "forward"
                    },
                    {
                        "name": "hourglassStart",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "hourglass-start"
                    },
                    {
                        "name": "hourglassEnd",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "hourglass-end"
                    },
                    {
                        "name": "keyboard",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "keyboard"
                    },
                    {
                        "name": "clone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "clone"
                    },
                    {
                        "name": "potion",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "flask-potion"
                    },
                    {
                        "name": "folder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "folder"
                    },
                    {
                        "name": "edit",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "edit"
                    },
                    {
                        "name": "minus",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "minus"
                    },
                    {
                        "name": "compress",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "compress"
                    },
                    {
                        "name": "expand",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "expand"
                    },
                    {
                        "name": "lock",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "lock"
                    },
                    {
                        "name": "unlock",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "lock-open"
                    },
                    {
                        "name": "image",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "image"
                    },
                    {
                        "name": "pawClaws",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "paw-claws"
                    },
                    {
                        "name": "trophy",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "trophy"
                    },
                    {
                        "name": "bolt",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "bolt"
                    },
                    {
                        "name": "magic",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "magic"
                    },
                    {
                        "name": "mountains",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "mountains"
                    },
                    {
                        "name": "eclipse",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "eclipse"
                    },
                    {
                        "name": "hoodCloak",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "hood-cloak"
                    },
                    {
                        "name": "dragon",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dragon"
                    },
                    {
                        "name": "heartbeat",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "heartbeat"
                    },
                    {
                        "name": "heart",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "heart"
                    },
                    {
                        "name": "lightning",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "lightning"
                    },
                    {
                        "name": "tools",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "tools"
                    },
                    {
                        "name": "toolbox",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "toolbox"
                    },
                    {
                        "name": "thunderstorm",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "thunderstorm"
                    },
                    {
                        "name": "bars",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "bars"
                    },
                    {
                        "name": "house",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "house"
                    },
                    {
                        "name": "copy",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "copy"
                    },
                    {
                        "name": "expandArrows",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "expand-arrows-alt"
                    },
                    {
                        "name": "otter",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "otter"
                    },
                    {
                        "name": "dotCircle",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dot-circle"
                    },
                    {
                        "name": "box",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "box"
                    },
                    {
                        "name": "alignLeft",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "align-left"
                    },
                    {
                        "name": "infoCircle",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "info-circle"
                    },
                    {
                        "name": "dollar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dollar-sign"
                    },
                    {
                        "name": "brush",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "brush"
                    },
                    {
                        "name": "paintBrush",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "paint-brush"
                    },
                    {
                        "name": "hashtag",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "hastag"
                    },
                    {
                        "name": "binder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "book-open"
                    },
                    {
                        "name": "inbox",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "inbox"
                    },
                    {
                        "name": "balanceScale",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "balance-scale"
                    },
                    {
                        "name": "exchange",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "exchange"
                    },
                    {
                        "name": "stickyNote",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "sticky-note"
                    },
                    {
                        "name": "star",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "star"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/icons.ts"
            },
            {
                "name": "ItemDisplayType",
                "childs": [
                    {
                        "name": "grid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Grid"
                    },
                    {
                        "name": "list",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "List"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/layout/main/items/items-filter/items-filter.ts"
            },
            {
                "name": "Printings",
                "childs": [
                    {
                        "name": "Unlimited",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Unlimited"
                    },
                    {
                        "name": "ReverseFoil",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Reverse Foil"
                    },
                    {
                        "name": "Shadowless",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Shadowless"
                    },
                    {
                        "name": "FirstEdition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "First Edition"
                    },
                    {
                        "name": "Jumbo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Jumbo"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/print-version.ts"
            },
            {
                "name": "ScanType",
                "childs": [
                    {
                        "name": "scan",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "scan"
                    },
                    {
                        "name": "multiple",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "scan_multiple"
                    },
                    {
                        "name": "snapshot",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "snapshot"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/pages/scanner/scanner.service.ts"
            },
            {
                "name": "Sides",
                "childs": [
                    {
                        "name": "top",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "top"
                    },
                    {
                        "name": "right",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "right"
                    },
                    {
                        "name": "bottom",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "bottom"
                    },
                    {
                        "name": "left",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "left"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/sides.ts"
            },
            {
                "name": "Size",
                "childs": [
                    {
                        "name": "small",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "small"
                    },
                    {
                        "name": "medium",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "medium"
                    },
                    {
                        "name": "large",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "large"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/size.ts"
            },
            {
                "name": "Symbols",
                "childs": [
                    {
                        "name": "cards",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "assets/symbols/cards.svg"
                    },
                    {
                        "name": "pokeball",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "assets/symbols/pokeball.svg"
                    },
                    {
                        "name": "facebook",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "assets/symbols/facebook.svg"
                    },
                    {
                        "name": "patreon",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "assets/symbols/patreon.svg"
                    },
                    {
                        "name": "twitter",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "assets/symbols/twitter.svg"
                    },
                    {
                        "name": "youtube",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "assets/symbols/youtube.svg"
                    },
                    {
                        "name": "discord",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "assets/symbols/discord.svg"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/icons.ts"
            }
        ],
        "groupedVariables": {
            "src/app/models/api.ts": [
                {
                    "name": "buildUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/api.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(folder: string, queryString = '') => {\r\n  const apiUrl = 'https://api.rotomdex.app/api/';\r\n  return `${apiUrl}${folder}${queryString.length ? '?' + queryString : ''}`;\r\n}"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/app/pages/cards/card/card.ts": [
                {
                    "name": "DEFAULT_IMAGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/cards/card/card.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'/assets/back.jpg'"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new Environment({\n  production: false,\n  api: 'https://api.rotomdex.app/api/',\n  images: 'https://images.rotomdex.app/',\n})"
                }
            ],
            "src/app/controls/button/button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/controls/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/controls/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/controls/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/controls/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/controls/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\r\n  props: args,\r\n})"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/helpers/guid.ts": [
                {
                    "name": "GUID",
                    "file": "src/app/helpers/guid.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ],
            "src/app/pages/expansions/expansion/expansion.ts": [
                {
                    "name": "SetPageSize",
                    "file": "src/app/pages/expansions/expansion/expansion.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "itemFooter",
                            "type": "ItemsFooter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "itemFooter",
                            "type": "ItemsFooter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "SetSortByExpansion",
                    "file": "src/app/pages/expansions/expansion/expansion.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "itemFilter",
                            "type": "ItemsFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "itemFilter",
                            "type": "ItemsFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "SetSortByExpansions",
                    "file": "src/app/pages/expansions/expansion/expansion.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "itemFilter",
                            "type": "ItemsFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "itemFilter",
                            "type": "ItemsFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/pages/cards/card/card.ts": [
                {
                    "name": "SetSortByCards",
                    "file": "src/app/pages/cards/card/card.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "itemFilter",
                            "type": "ItemsFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "itemFilter",
                            "type": "ItemsFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/pages/pokemons/pokemon/pokemon.ts": [
                {
                    "name": "SetSortByPokemon",
                    "file": "src/app/pages/pokemons/pokemon/pokemon.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "select",
                            "type": "Select",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "select",
                            "type": "Select",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/controls/alert/alert.ts": [
                {
                    "name": "AlertType",
                    "childs": [
                        {
                            "name": "success",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "success"
                        },
                        {
                            "name": "info",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "info"
                        },
                        {
                            "name": "warning",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "warning"
                        },
                        {
                            "name": "error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "error"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/controls/alert/alert.ts"
                }
            ],
            "src/app/controls/button/button.ts": [
                {
                    "name": "ButtonType",
                    "childs": [
                        {
                            "name": "button",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "button"
                        },
                        {
                            "name": "submit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "submit"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/controls/button/button.ts"
                }
            ],
            "src/app/models/condition.ts": [
                {
                    "name": "Condition",
                    "childs": [
                        {
                            "name": "Mint",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Mint"
                        },
                        {
                            "name": "NearMint",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Near Mint"
                        },
                        {
                            "name": "LightlyPlayed",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Lightly Played"
                        },
                        {
                            "name": "ModeratelyPlayed",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Moderately Played"
                        },
                        {
                            "name": "HeavilyPlayed",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Heavily Played"
                        },
                        {
                            "name": "Damaged",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Damaged"
                        },
                        {
                            "name": "Misprint",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Misprint"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/condition.ts"
                },
                {
                    "name": "ConditionGraded",
                    "childs": [
                        {
                            "name": "Graded10",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 10"
                        },
                        {
                            "name": "Graded95",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 9.5"
                        },
                        {
                            "name": "Graded9",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 9"
                        },
                        {
                            "name": "Graded85",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 8.5"
                        },
                        {
                            "name": "Graded8",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 8"
                        },
                        {
                            "name": "Graded75",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 7.5"
                        },
                        {
                            "name": "Graded7",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 7"
                        },
                        {
                            "name": "Graded65",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 6.5"
                        },
                        {
                            "name": "Graded6",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 6"
                        },
                        {
                            "name": "Graded55",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 5.5"
                        },
                        {
                            "name": "Graded5",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 5"
                        },
                        {
                            "name": "Graded45",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 4.5"
                        },
                        {
                            "name": "Graded4",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 4"
                        },
                        {
                            "name": "Graded35",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 3.5"
                        },
                        {
                            "name": "Graded3",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 3"
                        },
                        {
                            "name": "Graded25",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 2.5"
                        },
                        {
                            "name": "Graded2",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 2"
                        },
                        {
                            "name": "Graded15",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 1.5"
                        },
                        {
                            "name": "Graded1",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Graded 1"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/condition.ts"
                },
                {
                    "name": "GradingCompany",
                    "childs": [
                        {
                            "name": "PSA",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "PSA"
                        },
                        {
                            "name": "BGS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "BGS"
                        },
                        {
                            "name": "CGC",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CGC"
                        },
                        {
                            "name": "SGC",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SGC"
                        },
                        {
                            "name": "GAI",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "GIA"
                        },
                        {
                            "name": "CCS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "CCS"
                        },
                        {
                            "name": "SCD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SCD"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/condition.ts"
                }
            ],
            "src/app/models/sides.ts": [
                {
                    "name": "Corners",
                    "childs": [
                        {
                            "name": "topRight",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Top Right"
                        },
                        {
                            "name": "topLeft",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Top Left"
                        },
                        {
                            "name": "bottomRight",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Bottom Right"
                        },
                        {
                            "name": "bottomLeft",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Bottom Left"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/sides.ts"
                },
                {
                    "name": "Sides",
                    "childs": [
                        {
                            "name": "top",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "top"
                        },
                        {
                            "name": "right",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "right"
                        },
                        {
                            "name": "bottom",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "bottom"
                        },
                        {
                            "name": "left",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "left"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/sides.ts"
                }
            ],
            "src/app/models/icons.ts": [
                {
                    "name": "Icons",
                    "childs": [
                        {
                            "name": "search",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "search"
                        },
                        {
                            "name": "list",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "list"
                        },
                        {
                            "name": "archive",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "archive"
                        },
                        {
                            "name": "deck",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "layer-group"
                        },
                        {
                            "name": "stats",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "chart-line"
                        },
                        {
                            "name": "user",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "user"
                        },
                        {
                            "name": "settings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "cog"
                        },
                        {
                            "name": "signOut",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "sign-out"
                        },
                        {
                            "name": "binders",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "folders"
                        },
                        {
                            "name": "users",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "users"
                        },
                        {
                            "name": "ellipsisV",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ellipsis-v"
                        },
                        {
                            "name": "arrowUp",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "arrow-up"
                        },
                        {
                            "name": "arrowDown",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "arrow-down"
                        },
                        {
                            "name": "arrowLeft",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "arrow-left"
                        },
                        {
                            "name": "arrowRight",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "arrow-right"
                        },
                        {
                            "name": "caretUp",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "caret-up"
                        },
                        {
                            "name": "caretRight",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "caret-right"
                        },
                        {
                            "name": "caretDown",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "caret-down"
                        },
                        {
                            "name": "caretLeft",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "caret-left"
                        },
                        {
                            "name": "trash",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "trash"
                        },
                        {
                            "name": "theme",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "palette"
                        },
                        {
                            "name": "scanner",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "crosshairs"
                        },
                        {
                            "name": "history",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "history"
                        },
                        {
                            "name": "externalLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "external-link"
                        },
                        {
                            "name": "price",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dollar-sign"
                        },
                        {
                            "name": "signIn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "sign-in"
                        },
                        {
                            "name": "plus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "plus"
                        },
                        {
                            "name": "userPlus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "user-plus"
                        },
                        {
                            "name": "grid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "th"
                        },
                        {
                            "name": "camera",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "camera"
                        },
                        {
                            "name": "video",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "video"
                        },
                        {
                            "name": "bringFront",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "bring-front"
                        },
                        {
                            "name": "sync",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "sync"
                        },
                        {
                            "name": "play",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "play"
                        },
                        {
                            "name": "stop",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "stop"
                        },
                        {
                            "name": "pause",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pause"
                        },
                        {
                            "name": "donate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "donate"
                        },
                        {
                            "name": "dashboard",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "tachometer"
                        },
                        {
                            "name": "check",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "check"
                        },
                        {
                            "name": "info",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "info"
                        },
                        {
                            "name": "warning",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "exclamation-triangle"
                        },
                        {
                            "name": "error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "times-octagon"
                        },
                        {
                            "name": "close",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "times"
                        },
                        {
                            "name": "cards",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "layer-group"
                        },
                        {
                            "name": "card",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "rectangle-portrait"
                        },
                        {
                            "name": "cart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "shopping-cart"
                        },
                        {
                            "name": "scale",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "balance-scale"
                        },
                        {
                            "name": "judge",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "gavel"
                        },
                        {
                            "name": "save",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "save"
                        },
                        {
                            "name": "lineColumns",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "line-columns"
                        },
                        {
                            "name": "sets",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "shield-alt"
                        },
                        {
                            "name": "artists",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "palette"
                        },
                        {
                            "name": "formats",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "swords"
                        },
                        {
                            "name": "text",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "align-left"
                        },
                        {
                            "name": "eye",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "eye"
                        },
                        {
                            "name": "repeat",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "repeat"
                        },
                        {
                            "name": "tap",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "undo"
                        },
                        {
                            "name": "untap",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "undo"
                        },
                        {
                            "name": "top",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "arrow-to-top"
                        },
                        {
                            "name": "bottom",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "arrow-to-bottom"
                        },
                        {
                            "name": "shuffle",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "random"
                        },
                        {
                            "name": "hand",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "hand-holding-medical"
                        },
                        {
                            "name": "graveyard",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "tombstone-alt"
                        },
                        {
                            "name": "exile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "times"
                        },
                        {
                            "name": "levelUp",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "level-up"
                        },
                        {
                            "name": "levelDown",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "level-down"
                        },
                        {
                            "name": "swords",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "swords"
                        },
                        {
                            "name": "sort",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "sort-alt"
                        },
                        {
                            "name": "moveForward",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "sort-size-up"
                        },
                        {
                            "name": "moveBackward",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "sort-size-down-alt"
                        },
                        {
                            "name": "moveTop",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "arrow-to-top"
                        },
                        {
                            "name": "moveBottom",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "arrow-to-bottom"
                        },
                        {
                            "name": "counters",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dice-three"
                        },
                        {
                            "name": "diceThree",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dice-three"
                        },
                        {
                            "name": "dice",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dice"
                        },
                        {
                            "name": "d4",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dice-d4"
                        },
                        {
                            "name": "d6",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dice-d6"
                        },
                        {
                            "name": "d8",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dice-d8"
                        },
                        {
                            "name": "d10",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dice-d10"
                        },
                        {
                            "name": "d12",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dice-d12"
                        },
                        {
                            "name": "d20",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dice-d20"
                        },
                        {
                            "name": "alert",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "exclamation"
                        },
                        {
                            "name": "thumbsUp",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "thumbs-up"
                        },
                        {
                            "name": "coin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "coin"
                        },
                        {
                            "name": "pass",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "forward"
                        },
                        {
                            "name": "hourglassStart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "hourglass-start"
                        },
                        {
                            "name": "hourglassEnd",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "hourglass-end"
                        },
                        {
                            "name": "keyboard",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "keyboard"
                        },
                        {
                            "name": "clone",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "clone"
                        },
                        {
                            "name": "potion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "flask-potion"
                        },
                        {
                            "name": "folder",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "folder"
                        },
                        {
                            "name": "edit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "edit"
                        },
                        {
                            "name": "minus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "minus"
                        },
                        {
                            "name": "compress",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "compress"
                        },
                        {
                            "name": "expand",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "expand"
                        },
                        {
                            "name": "lock",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "lock"
                        },
                        {
                            "name": "unlock",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "lock-open"
                        },
                        {
                            "name": "image",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "image"
                        },
                        {
                            "name": "pawClaws",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "paw-claws"
                        },
                        {
                            "name": "trophy",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "trophy"
                        },
                        {
                            "name": "bolt",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "bolt"
                        },
                        {
                            "name": "magic",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "magic"
                        },
                        {
                            "name": "mountains",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "mountains"
                        },
                        {
                            "name": "eclipse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "eclipse"
                        },
                        {
                            "name": "hoodCloak",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "hood-cloak"
                        },
                        {
                            "name": "dragon",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dragon"
                        },
                        {
                            "name": "heartbeat",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "heartbeat"
                        },
                        {
                            "name": "heart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "heart"
                        },
                        {
                            "name": "lightning",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "lightning"
                        },
                        {
                            "name": "tools",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "tools"
                        },
                        {
                            "name": "toolbox",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "toolbox"
                        },
                        {
                            "name": "thunderstorm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "thunderstorm"
                        },
                        {
                            "name": "bars",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "bars"
                        },
                        {
                            "name": "house",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "house"
                        },
                        {
                            "name": "copy",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "copy"
                        },
                        {
                            "name": "expandArrows",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "expand-arrows-alt"
                        },
                        {
                            "name": "otter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "otter"
                        },
                        {
                            "name": "dotCircle",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dot-circle"
                        },
                        {
                            "name": "box",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "box"
                        },
                        {
                            "name": "alignLeft",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "align-left"
                        },
                        {
                            "name": "infoCircle",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "info-circle"
                        },
                        {
                            "name": "dollar",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dollar-sign"
                        },
                        {
                            "name": "brush",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "brush"
                        },
                        {
                            "name": "paintBrush",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "paint-brush"
                        },
                        {
                            "name": "hashtag",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "hastag"
                        },
                        {
                            "name": "binder",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "book-open"
                        },
                        {
                            "name": "inbox",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "inbox"
                        },
                        {
                            "name": "balanceScale",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "balance-scale"
                        },
                        {
                            "name": "exchange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "exchange"
                        },
                        {
                            "name": "stickyNote",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "sticky-note"
                        },
                        {
                            "name": "star",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "star"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/icons.ts"
                },
                {
                    "name": "Symbols",
                    "childs": [
                        {
                            "name": "cards",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "assets/symbols/cards.svg"
                        },
                        {
                            "name": "pokeball",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "assets/symbols/pokeball.svg"
                        },
                        {
                            "name": "facebook",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "assets/symbols/facebook.svg"
                        },
                        {
                            "name": "patreon",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "assets/symbols/patreon.svg"
                        },
                        {
                            "name": "twitter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "assets/symbols/twitter.svg"
                        },
                        {
                            "name": "youtube",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "assets/symbols/youtube.svg"
                        },
                        {
                            "name": "discord",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "assets/symbols/discord.svg"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/icons.ts"
                }
            ],
            "src/app/layout/main/items/items-filter/items-filter.ts": [
                {
                    "name": "ItemDisplayType",
                    "childs": [
                        {
                            "name": "grid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Grid"
                        },
                        {
                            "name": "list",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "List"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/layout/main/items/items-filter/items-filter.ts"
                }
            ],
            "src/app/models/print-version.ts": [
                {
                    "name": "Printings",
                    "childs": [
                        {
                            "name": "Unlimited",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Unlimited"
                        },
                        {
                            "name": "ReverseFoil",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Reverse Foil"
                        },
                        {
                            "name": "Shadowless",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Shadowless"
                        },
                        {
                            "name": "FirstEdition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "First Edition"
                        },
                        {
                            "name": "Jumbo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Jumbo"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/print-version.ts"
                }
            ],
            "src/app/pages/scanner/scanner.service.ts": [
                {
                    "name": "ScanType",
                    "childs": [
                        {
                            "name": "scan",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "scan"
                        },
                        {
                            "name": "multiple",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "scan_multiple"
                        },
                        {
                            "name": "snapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "snapshot"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/pages/scanner/scanner.service.ts"
                }
            ],
            "src/app/models/size.ts": [
                {
                    "name": "Size",
                    "childs": [
                        {
                            "name": "small",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "small"
                        },
                        {
                            "name": "medium",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "medium"
                        },
                        {
                            "name": "large",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "large"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/size.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "HomeComponent",
                        "data": {
                            "transparentHeader": true
                        }
                    },
                    {
                        "path": "cards",
                        "component": "CardsComponent"
                    },
                    {
                        "path": "cards/:slug",
                        "component": "CardComponent"
                    },
                    {
                        "path": "cards/types/:type",
                        "component": "CardsComponent"
                    },
                    {
                        "path": "cards/rarity/:rarity",
                        "component": "CardsComponent"
                    },
                    {
                        "path": "cards/artists/:artist",
                        "component": "CardsComponent"
                    },
                    {
                        "path": "cards/supertype/:supertype",
                        "component": "CardsComponent"
                    },
                    {
                        "path": "cards/subtype/:subtype",
                        "component": "CardsComponent"
                    },
                    {
                        "path": "collection",
                        "component": "CollectionComponent"
                    },
                    {
                        "path": "collection/dashboard",
                        "component": "CollectionComponent"
                    },
                    {
                        "path": "collection/wishlist",
                        "component": "CollectionComponent"
                    },
                    {
                        "path": "collection/add",
                        "component": "CollectionComponent"
                    },
                    {
                        "path": "collection/:id",
                        "component": "CollectionComponent"
                    },
                    {
                        "path": "signin",
                        "component": "SignInComponent"
                    },
                    {
                        "path": "signup",
                        "component": "SignUpComponent"
                    },
                    {
                        "path": "forgot",
                        "component": "ForgotComponent"
                    },
                    {
                        "path": "reset/:token",
                        "component": "ResetComponent"
                    },
                    {
                        "path": "profile/edit",
                        "component": "EditUserComponent"
                    },
                    {
                        "path": "expansions",
                        "component": "ExpansionsComponent"
                    },
                    {
                        "path": "expansions/:code",
                        "component": "ExpansionComponent"
                    },
                    {
                        "path": "pokemon",
                        "component": "PokemonsComponent"
                    },
                    {
                        "path": "pokemon/:slug",
                        "component": "PokemonComponent"
                    },
                    {
                        "path": "pokemon/type/:type",
                        "component": "PokemonsComponent"
                    },
                    {
                        "path": "**",
                        "redirectTo": ""
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/app.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppSettings",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/alert/alert.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Alert",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/button/button.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Button",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/checkbox/checkbox.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Checkbox",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/dialog/dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/dialog/dialog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DialogService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/dialog/dialog.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DialogConfig",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/dialog/dialog.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DialogInjector",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/dialog/dialog.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DialogRef",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/dialog/insertion.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "InsertionDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/editor/editor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/editor/editor.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Editor",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/empty/empty.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EmptyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/empty/empty.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Empty",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/form/form-group/form-control/form-control.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FormControl",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/form/form-group/form-control/from-control.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormControlComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/form/form-group/form-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/form/form-group/form-group.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FormControlGroup",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/form/form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/form/form.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Form",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/hero/hero.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeroComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/loader/loader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/loader/loader.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoaderService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/menu/menu.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Menu",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/menu/menu.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MenuItem",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/notifications/notification.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Notification",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/notifications/notifications.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotificationsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/notifications/notifications.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NotificationsService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/progress-bar/progress-bar.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProgressBar",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/select/select.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Select",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/select/select.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SelectOption",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/select/select.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SelectOptionGroup",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/tag/tag.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TagComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/tag/tag.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Tag",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/textarea/textarea.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextareaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/textarea/textarea.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Textarea",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/textbox/textbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/textbox/textbox.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Textbox",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/toggle/toggle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToggleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/toggle/toggle.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Toggle",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/type-tag/type-tag.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TypeTagComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/controls/type-tag/type-tag.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TypeTag",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/cache.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Cache",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/clickOutside.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ClickOutsideDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/error.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "ErrorIntercept",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/guid.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "GUID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/jwt.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "JwtInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/string.extensions.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "String",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/header/profile-menu/profile-name.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/header/search/search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/main/items/items-filter/items-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemsFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/main/items/items-filter/items-filter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ItemsFilter",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/main/items/items-footer/items-footer-component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemsFooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/main/items/items-footer/items-footer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ItemsFooter",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/main/items/items-grid/items-grid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemsGridComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/main/items/items-groups/item-group.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ItemGroup",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/main/items/items-groups/items-groups.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemsGroupsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/main/items/items-header/items-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemsHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/main/items/items-header/items-header.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ItemsHeader",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/main/items/items-list/items-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemsListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/main/items/items.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/main/items/items.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Items",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/models/api.ts",
                "type": "class",
                "linktype": "classe",
                "name": "APIGetPaged",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/models/api.ts",
                "type": "class",
                "linktype": "classe",
                "name": "APIReponseMeta",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/models/api.ts",
                "type": "class",
                "linktype": "classe",
                "name": "APIResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/api.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "buildUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthenticationService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/forgot/forgot.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ForgotComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/reset/reset.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResetComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/signin/signin.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignInComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/auth/signup/signup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignUpComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/cards/card-item/card-item-grid/card-item-grid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardItemGridComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/cards/card-item/card-item-list/card-item-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardItemListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/cards/card/card-image-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardImageDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/cards/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/cards/card/card.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CardService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/cards/card/card.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Attack",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/cards/card/card.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Card",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/cards/card/card.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CardCount",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/cards/card/card.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CardLastPrices",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/cards/card/card.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Weakness",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/cards/card/card.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "SetSortByCards",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/cards/card/card.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_IMAGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/cards/cards.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/cards/cards.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CardsService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/cards/cards.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResCards",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/cards/cards.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Cards",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/collection/collection.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CollectionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/collection/collection.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Collection",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/collection/dashboard/collection-dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/collection/user-card-group/user-card-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserCardGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/collection/user-card-group/user-card-group.services.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserCardGroupService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/collection/user-card-group/user-card-group.services.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResUserCardGroups",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/collection/user-cards/user-card/user-card-notes-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserCardNotesDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/collection/user-cards/user-card/user-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/collection/user-cards/user-card/user-card.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserCard",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/collection/user-cards/user-card/user-card.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserCardGroup",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/collection/user-cards/user-cards.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserCardsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/collection/user-cards/user-cards.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddUserCard",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/collection/user-cards/user-cards.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateUserCard",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/collection/user-cards/user-cards.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserCardsService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/expansions/expansion-item/expansion-item-grid/expansion-item-grid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExpansionItemGridComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/expansions/expansion-item/expansion-item-list/expansion-item-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExpansionItemListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/expansions/expansion/expansion.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExpansionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/expansions/expansion/expansion.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ExpansionService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/expansions/expansion/expansion.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Expansion",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/expansions/expansion/expansion.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Series",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/expansions/expansion/expansion.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "SetPageSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/expansions/expansion/expansion.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "SetSortByExpansion",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/expansions/expansion/expansion.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "SetSortByExpansions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/expansions/expansions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExpansionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/expansions/expansions.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ExpansionsService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/featured.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FeaturedService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/featured.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Featured",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/release-notes.services.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ReleaseNotesServices",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/release-notes.services.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ReleaseNote",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/pokemons/pokemon-item/pokemon-item-grid/pokemon-item-grid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PokemonItemGridComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/pokemons/pokemon-item/pokemon-item-list/pokemon-item-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PokmeonItemListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/pokemons/pokemon/pokedex-entry-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PokedexEntryDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/pokemons/pokemon/pokemon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PokemonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/pokemons/pokemon/pokemon.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PokemonService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/pokemons/pokemon/pokemon.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EvolutionChain",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/pokemons/pokemon/pokemon.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Pokemon",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/pokemons/pokemon/pokemon.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PokemonGeneration",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/pokemons/pokemon/pokemon.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PokemonSprites",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/pokemons/pokemon/pokemon.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PokemonVariant",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/pokemons/pokemon/pokemon.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "SetSortByPokemon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/pokemons/pokemons.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PokemonsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/pokemons/pokemons.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PokemonsService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/pokemons/pokemons.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResPokemonVariants",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/scanner/scanner-lists/scanner-list/scanner-card.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScannerCard",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/scanner/scanner-lists/scanner-list/scanner-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScannerListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/scanner/scanner-lists/scanner-list/scanner-list.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScannerList",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/scanner/scanner-lists/scanner-lists.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScannerListsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/scanner/scanner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScannerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/63",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/scanner/scanner.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ScannerService",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/scanner/scanner.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GetScanCardParams",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/scanner/scanner.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GetScanCardsParams",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/scanner/scanner.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Scanner",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/user/edit-user/change-password-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChangePasswordDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/user/edit-user/edit-user.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditUserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/user/user.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/user/user.ts",
                "type": "class",
                "linktype": "classe",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Environment",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}